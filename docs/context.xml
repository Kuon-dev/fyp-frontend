<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\_index.tsx</source>
<document_content>import type { MetaFunction } from \"@remix-run/node\";\nimport { cn } from \"@/lib/utils\";\nimport React from \"react\";\nimport { BentoGrid, BentoGridItem } from \"@/components/ui/bento-grid\";\nimport {\n  IconClipboardCheck,\n  IconChecks,\n  IconChartBar,\n  IconBuildingStore,\n} from \"@tabler/icons-react\";\nimport { motion } from \"framer-motion\";\nimport { EagerImage } from \"@/components/custom/image\";\nimport { Button } from \"@/components/ui/button\";\n// import Navbar from \"@/elements/landing-navbar\";\nimport Footer from \"@/components/landing/footer\";\nimport Navbar from \"@/components/landing/navbar\";\nimport { ClientOnly } from \"remix-utils/client-only\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"Kortex\" },\n    {\n      name: \"description\",\n      content: \"Next generation e-commerce application for developers\",\n    },\n  ];\n};\n\nfunction BentoGridThirdDemo() {\n  return (\n    <BentoGrid className=\"max-w-4xl mx-auto md:auto-rows-[20rem]\">\n      {items.map((item, i) => (\n        <BentoGridItem\n          key={i}\n          title={item.title}\n          description={item.description}\n          header={item.header}\n          className={cn(\"[&>p:text-lg]\", item.className)}\n          icon={item.icon}\n        />\n      ))}\n    </BentoGrid>\n  );\n}\nconst Skeleton = () => (\n  <div className=\"flex flex-1 w-full h-full min-h-[6rem] rounded-xl dark:bg-dot-white/[0.2] bg-dot-black/[0.2] [mask-image:radial-gradient(ellipse_at_center,white,transparent)]  border border-transparent dark:border-white/[0.2] bg-neutral-100 dark:bg-black\"></div>\n);\n\nconst SkeletonOne = () => {\n  const variants = {\n    initial: {\n      x: 0,\n    },\n    animate: {\n      x: 10,\n      rotate: 5,\n      transition: {\n        duration: 0.2,\n      },\n    },\n  };\n  const variantsSecond = {\n    initial: {\n      x: 0,\n    },\n    animate: {\n      x: -10,\n      rotate: -5,\n      transition: {\n        duration: 0.2,\n      },\n    },\n  };\n\n  return (\n    <motion.div\n      initial=\"initial\"\n      whileHover=\"animate\"\n      className=\"flex flex-1 w-full h-full min-h-[6rem] dark:bg-dot-white/[0.2] bg-dot-black/[0.2] flex-col space-y-2\"\n    >\n      <motion.div\n        variants={variants}\n        className=\"flex flex-row rounded-full border border-neutral-100 dark:border-white/[0.2] p-2  items-center space-x-2 bg-white dark:bg-black\"\n      >\n        <div className=\"h-6 w-6 rounded-full bg-gradient-to-r from-pink-500 to-violet-500 flex-shrink-0\" />\n        <div className=\"w-full bg-gray-100 h-4 rounded-full dark:bg-neutral-900\" />\n      </motion.div>\n      <motion.div\n        variants={variantsSecond}\n        className=\"flex flex-row rounded-full border border-neutral-100 dark:border-white/[0.2] p-2 items-center space-x-2 w-3/4 ml-auto bg-white dark:bg-black\"\n      >\n        <div className=\"w-full bg-gray-100 h-4 rounded-full dark:bg-neutral-900\" />\n        <div className=\"h-6 w-6 rounded-full bg-gradient-to-r from-pink-500 to-violet-500 flex-shrink-0\" />\n      </motion.div>\n      <motion.div\n        variants={variants}\n        className=\"flex flex-row rounded-full border border-neutral-100 dark:border-white/[0.2] p-2 items-center space-x-2 bg-white dark:bg-black\"\n      >\n        <div className=\"h-6 w-6 rounded-full bg-gradient-to-r from-pink-500 to-violet-500 flex-shrink-0\" />\n        <div className=\"w-full bg-gray-100 h-4 rounded-full dark:bg-neutral-900\" />\n      </motion.div>\n    </motion.div>\n  );\n};\nconst SkeletonTwo = () => {\n  const variants = {\n    initial: {\n      width: 0,\n    },\n    animate: {\n      width: \"100%\",\n      transition: {\n        duration: 0.2,\n      },\n    },\n    hover: {\n      width: [\"0%\", \"100%\"],\n      transition: {\n        duration: 2,\n      },\n    },\n  };\n  const arr = new Array(6).fill(0);\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      whileHover=\"hover\"\n      className=\"flex flex-1 w-full h-full min-h-[6rem] dark:bg-dot-white/[0.2] bg-dot-black/[0.2] flex-col space-y-2\"\n    >\n      {arr.map((_, i) => (\n        <motion.div\n          key={\"skelenton-two\" + i}\n          variants={variants}\n          style={{\n            maxWidth: Math.random() * (100 - 40) + 40 + \"%\",\n          }}\n          className=\"flex flex-row rounded-full border border-neutral-100 dark:border-white/[0.2] p-2  items-center space-x-2 bg-neutral-100 dark:bg-black w-full h-4\"\n        ></motion.div>\n      ))}\n    </motion.div>\n  );\n};\nconst SkeletonThree = () => {\n  const variants = {\n    initial: {\n      backgroundPosition: \"0 50%\",\n    },\n    animate: {\n      backgroundPosition: [\"0, 50%\", \"100% 50%\", \"0 50%\"],\n    },\n  };\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      variants={variants}\n      transition={{\n        duration: 5,\n        repeat: Infinity,\n        repeatType: \"reverse\",\n      }}\n      className=\"flex flex-1 w-full h-full min-h-[6rem] dark:bg-dot-white/[0.2] rounded-lg bg-dot-black/[0.2] flex-col space-y-2\"\n      style={{\n        background:\n          \"linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab)\",\n        backgroundSize: \"400% 400%\",\n      }}\n    >\n      <motion.div className=\"h-full w-full rounded-lg\"></motion.div>\n    </motion.div>\n  );\n};\nconst SkeletonFour = () => {\n  const first = {\n    initial: {\n      x: 20,\n      rotate: -5,\n    },\n    hover: {\n      x: 0,\n      rotate: 0,\n    },\n  };\n  const second = {\n    initial: {\n      x: -20,\n      rotate: 5,\n    },\n    hover: {\n      x: 0,\n      rotate: 0,\n    },\n  };\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      whileHover=\"hover\"\n      className=\"flex flex-1 w-full h-full min-h-[6rem] dark:bg-dot-white/[0.2] bg-dot-black/[0.2] flex-row space-x-2\"\n    >\n      <motion.div\n        variants={first}\n        className=\"h-full w-1/3 rounded-2xl bg-white p-4 dark:bg-black dark:border-white/[0.1] border border-neutral-200 flex flex-col items-center justify-center\"\n      >\n        <EagerImage\n          src=\"https://pbs.twimg.com/profile_images/1417752099488636931/cs2R59eW_400x400.jpg\"\n          alt=\"avatar\"\n          height={100}\n          width={100}\n          className=\"rounded-full h-10 w-10\"\n        />\n        <p className=\"sm:text-sm text-xs text-center font-semibold text-neutral-500 mt-4\">\n          Utilize AI for Code Analysis\n        </p>\n        <p className=\"border border-blue-500 bg-blue-100 dark:bg-blue-900/20 text-blue-600 text-xs rounded-full px-2 py-0.5 mt-4\">\n          Innovative\n        </p>\n      </motion.div>\n      <motion.div className=\"h-full relative z-20 w-1/3 rounded-2xl bg-white p-4 dark:bg-black dark:border-white/[0.1] border border-neutral-200 flex flex-col items-center justify-center\">\n        <EagerImage\n          src=\"https://pbs.twimg.com/profile_images/1417752099488636931/cs2R59eW_400x400.jpg\"\n          alt=\"avatar\"\n          height={100}\n          width={100}\n          className=\"rounded-full h-10 w-10\"\n        />\n        <p className=\"sm:text-sm text-xs text-center font-semibold text-neutral-500 mt-4\">\n          Ensure Security Compliance\n        </p>\n        <p className=\"border border-green-500 bg-green-100 dark:bg-green-900/20 text-green-600 text-xs rounded-full px-2 py-0.5 mt-4\">\n          Secure\n        </p>\n      </motion.div>\n      <motion.div\n        variants={second}\n        className=\"h-full w-1/3 rounded-2xl bg-white p-4 dark:bg-black dark:border-white/[0.1] border border-neutral-200 flex flex-col items-center justify-center\"\n      >\n        <EagerImage\n          src=\"https://pbs.twimg.com/profile_images/1417752099488636931/cs2R59eW_400x400.jpg\"\n          alt=\"avatar\"\n          height={100}\n          width={100}\n          className=\"rounded-full h-10 w-10\"\n        />\n        <p className=\"sm:text-sm text-xs text-center font-semibold text-neutral-500 mt-4\">\n          Optimize Code Performance\n        </p>\n        <p className=\"border border-orange-500 bg-orange-100 dark:bg-orange-900/20 text-orange-600 text-xs rounded-full px-2 py-0.5 mt-4\">\n          Efficient\n        </p>\n      </motion.div>\n    </motion.div>\n  );\n};\nconst SkeletonFive = () => {\n  const variants = {\n    initial: {\n      x: 0,\n    },\n    animate: {\n      x: 10,\n      rotate: 5,\n      transition: {\n        duration: 0.2,\n      },\n    },\n  };\n  const variantsSecond = {\n    initial: {\n      x: 0,\n    },\n    animate: {\n      x: -10,\n      rotate: -5,\n      transition: {\n        duration: 0.2,\n      },\n    },\n  };\n\n  return (\n    <motion.div\n      initial=\"initial\"\n      whileHover=\"animate\"\n      className=\"flex flex-1 w-full h-full min-h-[6rem] dark:bg-dot-white/[0.2] bg-dot-black/[0.2] flex-col space-y-2\"\n    >\n      <motion.div\n        variants={variants}\n        className=\"flex flex-row rounded-2xl border border-neutral-100 dark:border-white/[0.2] p-2  items-start space-x-2 bg-white dark:bg-black\"\n      >\n        <EagerImage\n          src=\"https://pbs.twimg.com/profile_images/1417752099488636931/cs2R59eW_400x400.jpg\"\n          alt=\"avatar\"\n          height={100}\n          width={100}\n          className=\"rounded-full h-10 w-10\"\n        />\n        <p className=\"text-xs text-neutral-500\">\n          There are a lot of cool framerworks out there like React, Angular,\n          Vue, Svelte that can make your life ....\n        </p>\n      </motion.div>\n      <motion.div\n        variants={variantsSecond}\n        className=\"flex flex-row rounded-full border border-neutral-100 dark:border-white/[0.2] p-2 items-center justify-end space-x-2 w-3/4 ml-auto bg-white dark:bg-black\"\n      >\n        <p className=\"text-xs text-neutral-500\">Use PHP.</p>\n        <div className=\"h-6 w-6 rounded-full bg-gradient-to-r from-pink-500 to-violet-500 flex-shrink-0\" />\n      </motion.div>\n    </motion.div>\n  );\n};\n\nconst items = [\n  {\n    title: \"AI Code Analysis\",\n    description: (\n      <span className=\"text-sm\">\n        Utilize Kortex's AI tool to analyze and ensure high standards of code\n        quality, functionality, and security.\n      </span>\n    ),\n    header: <SkeletonOne />,\n    className: \"md:col-span-1\",\n    icon: <IconClipboardCheck className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"Code Optimization\",\n    description: (\n      <span className=\"text-sm\">\n        Optimize your code with Kortex's advanced AI to improve efficiency and\n        performance.\n      </span>\n    ),\n    header: <SkeletonTwo />,\n    className: \"md:col-span-1\",\n    icon: <IconChartBar className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"Security Compliance\",\n    description: (\n      <span className=\"text-sm\">\n        Ensure your code meets industry security standards with Kortex's\n        AI-driven assessments.\n      </span>\n    ),\n    header: <SkeletonThree />,\n    className: \"md:col-span-1\",\n    icon: <IconChecks className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"Code Reliability\",\n    description: (\n      <span className=\"text-sm\">\n        Improve the reliability and maintainability of your code with detailed\n        AI feedback from Kortex.\n      </span>\n    ),\n    header: <SkeletonFour />,\n    className: \"md:col-span-2\",\n    icon: <IconChecks className=\"h-4 w-4 text-neutral-500\" />,\n  },\n  {\n    title: \"Marketplace Integration\",\n    description: (\n      <span className=\"text-sm\">\n        Monetize your coding skills by selling high-quality, AI-reviewed code\n        snippets on the Kortex platform.\n      </span>\n    ),\n    header: <SkeletonFive />,\n    className: \"md:col-span-1\",\n    icon: <IconBuildingStore className=\"h-4 w-4 text-neutral-500\" />,\n  },\n];\n\nexport default function Index() {\n  // const { showBanner } = useLoaderData<typeof loader>();\n  return (\n    <>\n      <Navbar />\n      <div className=\"h-screen w-full dark:bg-black bg-white dark:bg-grid-white/[0.1] bg-grid-black/[0.2] relative flex items-center justify-center md:px-0 px-4 flex-col\">\n        {/* Radial gradient for the container to give a faded look */}\n        <p className=\"text-4xl sm:text-7xl font-bold relative z-20 bg-clip-text text-transparent bg-gradient-to-b from-neutral-200 to-neutral-500 py-8 max-w-4xl\">\n          Elevate Your Code Quality with AI-Powered Analysis\n        </p>\n        <div>\n          <p className=\"text-lg sm:text-xl font-semibold relative z-20 bg-clip-text text-transparent bg-gradient-to-b from-neutral-200 to-neutral-500 max-w-4xl\">\n            Sell high-quality, AI-reviewed code snippets on the Kortex platform.\n          </p>\n        </div>\n        <div>\n          <Button className=\"mt-8\">Get Started</Button>\n        </div>\n        <div className=\"mt-32\">\n          {/*\n          <p className=\"text-xl sm:text-4xl font-bold relative z-20 bg-clip-text text-transparent bg-gradient-to-b from-neutral-200 to-neutral-500 max-w-4xl\">\n            <span>What is Kortex?</span><span>{\"   \"}</span><span className=\"text-lg sm:text-xl font-semibold relative z-20 bg-clip-text text-transparent bg-gradient-to-b from-neutral-200 to-neutral-500 max-w-4xl\">Sell high-quality, AI-reviewed code snippets on the Kortex platform.\n            </span>\n          </p>\n           */}\n        </div>\n      </div>\n\n      <div className=\"w-full bg-black dark:bg-grid-white/[0.1] bg-grid-black/[0.2] pb-20\">\n        <div className=\"md:max-w-4xl mx-auto bg-transparent max-w-2xl md:px-0 px-4\">\n          <ClientOnly>{() => <BentoGridThirdDemo />}</ClientOnly>\n          <Footer className=\"pt-10\" />\n        </div>\n      </div>\n    </>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\about.tsx</source>
<document_content>import Navbar from \"@/components/landing/navbar\";\nimport Footer from \"@/components/landing/footer\";\nimport { Shell } from \"@/components/landing/shell\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"@remix-run/react\";\n\nexport function AboutUs() {\n  return (\n    <Shell className=\"lg:px-32 mx-auto py-12 lg:py-16\">\n      <h1 className=\"scroll-m-20 text-4xl font-extrabold tracking-tight lg:text-5xl\">\n        About Us\n      </h1>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        Our Mission\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        Our mission is to revolutionize the way developers buy, sell, and share\n        code by providing an innovative platform that ensures high standards of\n        code quality, functionality, and security. We aim to foster a thriving\n        community where developers can monetize their skills and where buyers\n        can access top-notch code snippets.\n      </p>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        Our Vision\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        Our vision is to become the leading marketplace for code snippets,\n        setting new standards for code quality and security in the digital\n        economy. We strive to create a platform where innovation and excellence\n        are the norms, and where both code producers and consumers can thrive.\n      </p>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        Our Team\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        We are a team of passionate developers, designers, and innovators who\n        are dedicated to building a platform that meets the needs of the modern\n        coding community. Our diverse backgrounds and expertise enable us to\n        create solutions that are both cutting-edge and user-friendly.\n      </p>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        What We Offer\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        We offer a comprehensive e-commerce platform that includes:\n      </p>\n      <ul className=\"my-6 ml-6 list-disc [&>li]:mt-2\">\n        <li>\n          AI-powered code analysis tools to ensure the highest standards of code\n          quality and security.\n        </li>\n        <li>A marketplace for buying and selling code snippets.</li>\n        <li>\n          Community features that foster collaboration and knowledge sharing\n          among developers.\n        </li>\n        <li>\n          Resources and support to help developers succeed in the digital\n          economy.\n        </li>\n      </ul>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        Our Values\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        Our values guide everything we do:\n      </p>\n      <ul className=\"my-6 ml-6 list-disc [&>li]:mt-2\">\n        <li>\n          <strong>Innovation:</strong> We are committed to pushing the\n          boundaries of what is possible in the world of code.\n        </li>\n        <li>\n          <strong>Quality:</strong> We strive to ensure that every code snippet\n          on our platform meets the highest standards of quality and security.\n        </li>\n        <li>\n          <strong>Community:</strong> We believe in the power of collaboration\n          and the importance of supporting one another.\n        </li>\n        <li>\n          <strong>Integrity:</strong> We conduct our business with honesty and\n          transparency, building trust with our users.\n        </li>\n      </ul>\n    </Shell>\n  );\n}\n\nexport default function Layout() {\n  return (\n    <>\n      <Navbar />\n      <div className=\"w-full bg-black dark:bg-grid-white/[0.1] bg-grid-black/[0.2] pb-20 pt-32\">\n        <div className=\"md:max-w-4xl mx-auto bg-transparent max-w-2xl lg:px-0 px-4\">\n          <Button className=\"\" variant=\"link\">\n            <Link to=\"/\">&larr; Back to Home</Link>\n          </Button>\n          <AboutUs />\n          <Footer className=\"pt-10\" />\n        </div>\n      </div>\n    </>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\forgot-password.tsx</source>
<document_content>import ForgotPasswordForm from \"@/components/auth/forms/forgot-password-form\";\nimport AuthLayout from \"@/components/auth/layout\";\n\nfunction HeaderTitle() {\n  return (\n    <div className=\"flex flex-col space-y-2 text-left\">\n      <h1 className=\"text-2xl font-semibold tracking-tight\">Reset Password</h1>\n      <p className=\"text-sm text-muted-foreground\">\n        Enter your email below to reset your password\n      </p>\n    </div>\n  );\n}\n\nexport default function Layout() {\n  return (\n    <AuthLayout>\n      <HeaderTitle />\n      <ForgotPasswordForm />\n    </AuthLayout>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\login.tsx</source>
<document_content>import LoginForm from \"@/components/auth/forms/login-form\";\nimport AuthLayout from \"@/components/auth/layout\";\n\nexport default function Login() {\n  return (\n    <AuthLayout>\n      <HeaderTitle />\n      <LoginForm />\n    </AuthLayout>\n  );\n}\n\nfunction HeaderTitle() {\n  return (\n    <div className=\"flex flex-col space-y-2 text-left\">\n      <h1 className=\"text-2xl font-semibold tracking-tight\">Login</h1>\n      <p className=\"text-sm text-muted-foreground\">\n        Enter your email and password to access your account\n      </p>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\register.tsx</source>
<document_content>import RegisterForm from \"@/components/auth/forms/register-form\";\nimport AuthLayout from \"@/components/auth/layout\";\n\nexport default function Login() {\n  return (\n    <AuthLayout>\n      <HeaderTitle />\n      <RegisterForm />\n      <FooterQuote />\n    </AuthLayout>\n  );\n}\n\nfunction FooterQuote() {\n  return (\n    <p className=\"px-8 text-center text-sm text-muted-foreground mt-2\">\n      By clicking register, you agree to our{\" \"}\n      <a\n        href=\"/terms\"\n        className=\"underline underline-offset-4 hover:text-primary\"\n      >\n        Terms of Service\n      </a>{\" \"}\n      and{\" \"}\n      <a\n        href=\"/privacy\"\n        className=\"underline underline-offset-4 hover:text-primary\"\n      >\n        Privacy Policy\n      </a>\n      .\n    </p>\n  );\n}\n\nfunction HeaderTitle() {\n  return (\n    <div className=\"flex flex-col space-y-2 text-left\">\n      <h1 className=\"text-2xl font-semibold tracking-tight\">Register</h1>\n      <p className=\"text-sm text-muted-foreground\">\n        Enter your email and password to create your account\n      </p>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\reset-password.tsx</source>
<document_content>import ResetPasswordForm from \"@/components/auth/forms/reset-password-form\";\nimport AuthLayout from \"@/components/auth/layout\";\n\nexport default function ResetPasswordPage() {\n  return (\n    <AuthLayout>\n      <ResetPasswordForm />\n    </AuthLayout>\n  );\n}\n\nfunction HeaderTitle() {\n  return (\n    <div className=\"flex flex-col space-y-2 text-left\">\n      <h1 className=\"text-2xl font-semibold tracking-tight\">Reset password</h1>\n      <p className=\"text-sm text-muted-foreground\">Enter your new password</p>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\verify-email.tsx</source>
<document_content>import { getErrorMessage } from \"@/lib/handle-error\";\nimport { LoaderFunction, json, redirect } from \"@remix-run/node\";\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const url = new URL(request.url);\n  const code = url.searchParams.get(\"code\");\n  const token = url.searchParams.get(\"auth_session\") ?? \"\";\n  const cookieHeader = request.headers.get(\"Cookie\");\n  console.log(token);\n\n  // const cookieHeader = request.headers.get(\"Cookie\");\n  try {\n    const res = await fetch(`${process.env.BACKEND_URL}/api/v1/verify-email`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Cookie: cookieHeader ?? token,\n      },\n      body: JSON.stringify({\n        code,\n      }),\n    });\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message);\n    }\n    // success data\n    /* {\n     *  \"message\": \"Email verification successful\"\n     * }\n     */\n  } catch (e) {\n    const errorMessage = getErrorMessage(e);\n    return json(\n      {\n        message: errorMessage,\n      },\n      {\n        status: 400,\n      },\n    );\n  }\n  return redirect(\"/app\", {\n    headers: {\n      \"Set-Cookie\": token ?? \"\",\n    },\n  });\n};\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app\route.tsx</source>
<document_content>import React from \"react\";\nimport { Outlet, redirect, useLoaderData, useLocation } from \"@remix-run/react\";\nimport { ActionFunction, LoaderFunction, json } from \"@remix-run/node\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport DashboardSidebar from \"@/components/dashboard/sidebar\";\nimport { Layout, LayoutBody } from \"@/components/custom/layout\";\nimport VerifyEmailComponent from \"@/components/dashboard/verify-email\";\nimport { Me, useUserStore } from \"@/stores/user-store\";\nimport {\n  sidebarLinks,\n  settingsLink,\n  SidebarLink,\n} from \"@/components/dashboard/constants\";\n//import { sendVerifyEmailCodeFromUser } from \"@/lib/fetcher/user\";\nimport BannedBanner from \"@/components/auth/banned\";\nimport ExpiredBanner from \"@/components/auth/expired\";\n\nconst accessRules: Record<Role, string[]> = {\n  USER: [\"/app/user\", \"/app/settings\"],\n  SELLER: [\"/app/user\", \"/app/seller\", \"/app/settings\"],\n  MODERATOR: [\"/app/mod\", \"/app/settings\"],\n  ADMIN: [\"/app/admin\", \"/app/mod\", \"/app/settings\"],\n};\n\nconst hasAccess = (role: Role, path: string): boolean => {\n  const allowedPaths = accessRules[role] || [];\n  return allowedPaths.some((allowedPath) => path.startsWith(allowedPath));\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const cookieHeader = request.headers.get(\"Cookie\");\n  const authCookie = cookieHeader\n    ?.split(\";\")\n    .find((cookie) => cookie.includes(\"auth_session\"));\n  if (!authCookie) return redirect(\"/login\");\n\n  try {\n    const response = await fetch(`${process.env.BACKEND_URL}/api/v1/me`, {\n      headers: { Cookie: cookieHeader?.toString() ?? \"\" },\n    });\n    console.log(response);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        return redirect(\"/login\");\n      }\n      throw new Error(\"Failed to fetch user data\");\n    }\n\n    const userData: Me = await response.json();\n    const url = new URL(request.url);\n\n    if (!hasAccess(userData.user.role, url.pathname)) {\n      // Redirect to appropriate dashboard based on role\n      switch (userData.user.role) {\n        case \"ADMIN\":\n          return redirect(\"/app/admin\");\n        case \"MODERATOR\":\n          return redirect(\"/app/mod\");\n        case \"SELLER\":\n          return redirect(\"/app/seller\");\n        default:\n          return redirect(\"/app/user\");\n      }\n    }\n\n    return json({ user: userData });\n  } catch (error) {\n    console.error(\"Error in loader:\", error);\n    return redirect(\"/login\");\n  }\n};\n\nexport default function DashboardLayout() {\n  const { user } = useLoaderData<{ user: Me }>();\n  const [currentSidebarLinks, setCurrentSidebarLinks] = React.useState<\n    SidebarLink[]\n  >([]);\n\n  React.useEffect(() => {\n    if (user?.user?.role) {\n      setCurrentSidebarLinks(\n        sidebarLinks[user.user.role.toUpperCase()] || sidebarLinks.buyer,\n      );\n    }\n  }, [user]);\n\n  return (\n    <div className=\"flex\">\n      <DashboardSidebar\n        sidebarLinks={currentSidebarLinks}\n        settingsLink={settingsLink}\n      />\n      <div className=\"flex-1 sm:pl-14\">\n        <Layout className=\"min-h-screen w-full flex flex-col\">\n          <LayoutBody>\n            <main>\n              <Outlet />\n              <ClientOnly>\n                {() => (\n                  <React.Fragment>\n                    {user?.user && !user?.user?.emailVerified && (\n                      <VerifyEmailComponent />\n                    )}\n                    {user?.user?.bannedUntil && <BannedBanner />}\n                    {!user && <ExpiredBanner />}\n                  </React.Fragment>\n                )}\n              </ClientOnly>\n            </main>\n          </LayoutBody>\n        </Layout>\n      </div>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.admin.payouts._index\route.tsx</source>
<document_content>import React, { useMemo } from \"react\";\nimport { DataTable } from \"@/components/data-table/data-table\";\nimport {\n  PayoutRequestSchema,\n  columns,\n  filters,\n  payoutRequestSchema,\n} from \"./table\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { LoaderFunction, json, redirect } from \"@remix-run/node\";\nimport { useLoaderData, useRouteError } from \"@remix-run/react\";\nimport ErrorComponent from \"@/components/error/500\";\nimport { checkAuthCookie } from \"@/lib/router-guard\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Cell,\n  Legend,\n  Pie,\n  Tooltip,\n  PieChart,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { ChartConfig, ChartContainer } from \"@/components/ui/chart\";\nimport {\n  AlertCircle,\n  CheckCircle,\n  Clock,\n  DollarSign,\n  Users,\n  XCircle,\n} from \"lucide-react\";\nimport LoadingComponent from \"@/components/custom/loading\";\n\nexport const ErrorBoundary = () => {\n  return <ErrorComponent />;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const cookieHeader = request.headers.get(\"Cookie\");\n  if (!checkAuthCookie(request)) return redirect(\"/login\");\n  const res = await fetch(\n    `${process.env.BACKEND_URL}/api/v1/admin/payout-requests`,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Cookie: cookieHeader?.toString() ?? \"\",\n      },\n    },\n  );\n  if (!res.ok) throw new Error(\"Oh no! Something went wrong!\");\n  const data = await res.json();\n  return json({\n    items: data,\n    success: true,\n  });\n};\n\nexport default function PayoutRequestsPage() {\n  const { items } = useLoaderData<typeof loader>();\n\n  const payoutRequests = useMemo(() => {\n    return items.map((item: unknown) => payoutRequestSchema.parse(item));\n  }, [items]);\n\n  const statusCounts = useMemo(() => {\n    return payoutRequests.reduce(\n      (acc: Record<string, number>, request: PayoutRequestSchema) => {\n        acc[request.status] = (acc[request.status] || 0) + 1;\n        return acc;\n      },\n      {},\n    );\n  }, [payoutRequests]);\n\n  const totalAmount = useMemo(() => {\n    return payoutRequests.reduce(\n      (sum: number, request: PayoutRequestSchema) => sum + request.totalAmount,\n      0,\n    );\n  }, [payoutRequests]);\n\n  const pendingAmount = useMemo(() => {\n    return payoutRequests\n      .filter((request: PayoutRequestSchema) => request.status === \"PENDING\")\n      .reduce(\n        (sum: number, request: PayoutRequestSchema) =>\n          sum + request.totalAmount,\n        0,\n      );\n  }, [payoutRequests]);\n\n  return (\n    <div className=\"flex flex-col space-y-8 p-8\">\n      <Header />\n      <div className=\"grid grid-cols-3 gap-4\">\n        <StatusDistributionChart statusCounts={statusCounts} />\n        <InfoPanel\n          totalRequests={payoutRequests.length}\n          statusCounts={statusCounts}\n          totalAmount={totalAmount}\n          pendingAmount={pendingAmount}\n        />\n      </div>\n      <ClientOnly fallback={<LoadingComponent />}>\n        {() => (\n          <DataTable\n            data={payoutRequests}\n            columns={columns}\n            filters={filters}\n            search=\"email\"\n          />\n        )}\n      </ClientOnly>\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"space-y-1\">\n        <h2 className=\"text-2xl font-semibold tracking-tight\">\n          Payout Requests\n        </h2>\n        <p className=\"text-sm text-muted-foreground\">\n          Manage and process payout requests from sellers.\n        </p>\n      </div>\n    </div>\n  );\n}\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  Icon: React.ElementType;\n}\n\nfunction StatCard({ title, value, Icon }: StatCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 py-2 px-3\">\n        <CardTitle className=\"text-xs font-medium\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent className=\"py-2 px-3\">\n        <div className=\"text-xl font-bold\">{value}</div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface StatusDistributionChartProps {\n  statusCounts: Record<string, number>;\n}\n\nconst STATUS_COLORS = {\n  PENDING: \"#FFCE56\",\n  REJECTED: \"#FF6384\",\n  PROCESSED: \"#36A2EB\",\n};\n\nconst StatusDistributionChart: React.FC<StatusDistributionChartProps> = ({\n  statusCounts,\n}) => {\n  const data = Object.entries(statusCounts).map(([status, count]) => ({\n    name: status,\n    value: count,\n  }));\n\n  const chartConfig: ChartConfig = {\n    PENDING: { label: \"Pending\", color: STATUS_COLORS.PENDING },\n    REJECTED: { label: \"Rejected\", color: STATUS_COLORS.REJECTED },\n    PROCESSED: { label: \"Processed\", color: STATUS_COLORS.PROCESSED },\n  };\n\n  const renderCustomizedLabel = ({\n    cx,\n    cy,\n    midAngle,\n    innerRadius,\n    outerRadius,\n    percent,\n  }: any) => {\n    const RADIAN = Math.PI / 180;\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        fill=\"white\"\n        textAnchor={x > cx ? \"start\" : \"end\"}\n        dominantBaseline=\"central\"\n      >\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    );\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Status Distribution</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} className=\"min-h-[300px] w-full\">\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={data}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                label={renderCustomizedLabel}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n              >\n                {data.map((entry, index) => (\n                  <Cell\n                    key={`cell-${index}`}\n                    fill={\n                      STATUS_COLORS[entry.name as keyof typeof STATUS_COLORS]\n                    }\n                  />\n                ))}\n              </Pie>\n              <Tooltip\n                formatter={(value: number, name: string) => {\n                  const total = data.reduce((sum, item) => sum + item.value, 0);\n                  const percent = ((value / total) * 100).toFixed(1);\n                  return [`${value} (${percent}%)`, name];\n                }}\n              />\n              <Legend layout=\"vertical\" align=\"right\" verticalAlign=\"middle\" />\n            </PieChart>\n          </ResponsiveContainer>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\ninterface InfoPanelProps {\n  totalRequests: number;\n  statusCounts: Record<string, number>;\n  totalAmount: number;\n  pendingAmount: number;\n}\n\nfunction InfoPanel({\n  totalRequests,\n  statusCounts,\n  totalAmount,\n  pendingAmount,\n}: InfoPanelProps) {\n  return (\n    <Card className=\"col-span-2\">\n      <CardHeader>\n        <CardTitle>Payout Request Statistics</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-3 gap-4\">\n          <StatCard title=\"Total Requests\" value={totalRequests} Icon={Users} />\n          <StatCard\n            title=\"Pending\"\n            value={statusCounts[\"PENDING\"] || 0}\n            Icon={Clock}\n          />\n          <StatCard\n            title=\"Processed\"\n            value={statusCounts[\"PROCESSED\"] || 0}\n            Icon={CheckCircle}\n          />\n          <StatCard\n            title=\"Rejected\"\n            value={statusCounts[\"REJECTED\"] || 0}\n            Icon={XCircle}\n          />\n          <StatCard\n            title=\"Total Amount\"\n            value={`$${totalAmount.toFixed(2)}`}\n            Icon={DollarSign}\n          />\n          <StatCard\n            title=\"Pending Amount\"\n            value={`$${pendingAmount.toFixed(2)}`}\n            Icon={AlertCircle}\n          />\n        </div>\n        <div className=\"mt-4 flex items-center space-x-4\">\n          <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n            <DollarSign className=\"h-4 w-4\" />\n            <span>{totalRequests} Total Requests</span>\n          </Badge>\n          <Badge variant=\"warning\" className=\"flex items-center space-x-1\">\n            <Clock className=\"h-4 w-4\" />\n            <span>{statusCounts[\"PENDING\"] || 0} Pending</span>\n          </Badge>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.admin.payouts._index\table.tsx</source>
<document_content>import React, { useState } from \"react\";\nimport { z } from \"zod\";\nimport { ColumnDef, Row } from \"@tanstack/react-table\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DataTableColumnHeader } from \"@/components/data-table/data-table-column-header\";\nimport { Button } from \"@/components/custom/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { DotsHorizontalIcon } from \"@radix-ui/react-icons\";\nimport type { ZodSchema } from \"zod\";\nimport {\n  AlertDialog,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogCancel,\n  AlertDialogAction,\n} from \"@/components/ui/alert-dialog\";\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport { toast } from \"sonner\";\n\n// Define the schema for the bank account\nconst bankAccountSchema = z.object({\n  accountHolderName: z.string(),\n  accountNumber: z.string(),\n  bankName: z.string(),\n  swiftCode: z.string(),\n  iban: z.string().nullable(),\n  routingNumber: z.string().nullable(),\n});\n\n// Define the schema for the seller profile\nconst sellerProfileSchema = z.object({\n  id: z.string(),\n  businessName: z.string(),\n  businessEmail: z.string(),\n  businessPhone: z.string(),\n  bankAccount: bankAccountSchema,\n  user: z.object({\n    email: z.string(),\n    bannedUntil: z.string().nullable(),\n  }),\n});\n\n// Updated PayoutRequest schema\nexport const payoutRequestSchema = z.object({\n  id: z.string(),\n  totalAmount: z.number(),\n  status: z.enum([\"PENDING\", \"REJECTED\", \"PROCESSED\"]),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  processedAt: z.string().nullable(),\n  sellerProfile: sellerProfileSchema,\n});\n\nexport type PayoutRequestSchema = z.infer<typeof payoutRequestSchema>;\n\n// Status options for filter\nexport const statusOptions = [\n  { label: \"Pending\", value: \"PENDING\" },\n  { label: \"Rejected\", value: \"REJECTED\" },\n  { label: \"Processed\", value: \"PROCESSED\" },\n];\n\ninterface DialogProps {\n  payoutRequest: PayoutRequestSchema;\n  onClose: () => void;\n  onAction: (action: string) => Promise<void>;\n}\n\nconst ProcessPayoutRequestDialog: React.FC<DialogProps> = ({\n  payoutRequest,\n  onClose,\n  onAction,\n}) => {\n  const { sellerProfile, totalAmount } = payoutRequest;\n  const { bankAccount } = sellerProfile;\n\n  return (\n    <>\n      <AlertDialogHeader>\n        <AlertDialogTitle>Process Payout Request</AlertDialogTitle>\n        <AlertDialogDescription>\n          Please review the following information before processing the payout\n          request for ${totalAmount.toFixed(2)}.\n        </AlertDialogDescription>\n      </AlertDialogHeader>\n      <div className=\"my-4\">\n        <h3 className=\"font-semibold mb-2\">Seller Information:</h3>\n        <p>Business Name: {sellerProfile.businessName}</p>\n        <p>Business Email: {sellerProfile.businessEmail}</p>\n        <p>Business Phone: {sellerProfile.businessPhone}</p>\n      </div>\n      <div className=\"my-4\">\n        <h3 className=\"font-semibold mb-2\">Bank Account Information:</h3>\n        <p>Account Holder: {bankAccount.accountHolderName}</p>\n        <p>Account Number: {bankAccount.accountNumber}</p>\n        <p>Bank Name: {bankAccount.bankName}</p>\n        <p>Swift Code: {bankAccount.swiftCode}</p>\n        {bankAccount.iban && <p>IBAN: {bankAccount.iban}</p>}\n        {bankAccount.routingNumber && (\n          <p>Routing Number: {bankAccount.routingNumber}</p>\n        )}\n      </div>\n      <AlertDialogDescription className=\"mt-4 text-sm text-gray-500\">\n        Note: This action will only initiate the payout process. The actual\n        transfer of funds will be completed after this step.\n      </AlertDialogDescription>\n      <AlertDialogFooter>\n        <AlertDialogCancel onClick={onClose}>Cancel</AlertDialogCancel>\n        <AlertDialogAction onClick={() => onAction(\"approve\")}>\n          Approve and Process Payout\n        </AlertDialogAction>\n        <AlertDialogAction\n          onClick={() => onAction(\"reject\")}\n          className=\"bg-red-600 hover:bg-red-700\"\n        >\n          Reject Payout\n        </AlertDialogAction>\n      </AlertDialogFooter>\n    </>\n  );\n};\n\ninterface DataTableRowActionsProps<TData> {\n  row: Row<TData>;\n  tableSchema: ZodSchema<PayoutRequestSchema>;\n}\n\nexport function PayoutRequestTableRowActions<TData>({\n  row,\n  tableSchema,\n}: DataTableRowActionsProps<TData>) {\n  const payoutRequest = tableSchema.parse(row.original);\n  const [activeDialog, setActiveDialog] = useState<string | null>(null);\n\n  const handleAction = async (action: string) => {\n    try {\n      const url = `${window.ENV.BACKEND_URL}/api/v1/payout-requests/${payoutRequest.id}/process`;\n      const res = await fetch(url, {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ action }),\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Oh no! Something went wrong!\");\n      }\n\n      toast.success(`Payout request ${action}ed successfully`);\n      window.location.reload();\n    } catch (e) {\n      showErrorToast(e);\n    }\n  };\n\n  const renderDialogContent = () => {\n    switch (activeDialog) {\n      case \"process\":\n        return (\n          <ProcessPayoutRequestDialog\n            payoutRequest={payoutRequest}\n            onClose={() => setActiveDialog(null)}\n            onAction={handleAction}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <AlertDialog\n      open={!!activeDialog}\n      onOpenChange={() => setActiveDialog(null)}\n    >\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            className=\"flex h-8 w-8 p-0 data-[state=open]:bg-muted\"\n          >\n            <DotsHorizontalIcon className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Open menu</span>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-[160px]\">\n          <DropdownMenuItem\n            onClick={() => setActiveDialog(\"process\")}\n            disabled={row.getValue(\"processedAt\")}\n          >\n            Process Request\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      <AlertDialogContent>{renderDialogContent()}</AlertDialogContent>\n    </AlertDialog>\n  );\n}\n\nexport const columns: ColumnDef<PayoutRequestSchema>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    id: \"email\",\n    accessorKey: \"sellerProfile.user.email\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"User Email\" />\n    ),\n    cell: ({ row }) => (\n      <div className=\"max-w-[200px] truncate\">\n        {row.original.sellerProfile.user.email}\n      </div>\n    ),\n    enableSorting: true,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"totalAmount\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Amount\" />\n    ),\n    cell: ({ row }) => (\n      <div className=\"\">${row.getValue<number>(\"totalAmount\").toFixed(2)}</div>\n    ),\n  },\n  {\n    accessorKey: \"status\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Status\" />\n    ),\n    cell: ({ row }) => (\n      <div className=\"\">{row.getValue(\"status\")}</div>\n    ),\n    filterFn: (row, id, value) => {\n      return value.includes(row.getValue(id));\n    },\n  },\n  {\n    accessorKey: \"createdAt\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Created At\" />\n    ),\n    cell: ({ row }) => (\n      <div>{new Date(row.getValue<string>(\"createdAt\")).toLocaleString()}</div>\n    ),\n  },\n  {\n    accessorKey: \"processedAt\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Processed At\" />\n    ),\n    cell: ({ row }) => {\n      const processedAt = row.getValue<string | null>(\"processedAt\");\n      return processedAt ? (\n        <div>{new Date(processedAt).toLocaleString()}</div>\n      ) : (\n        <div>Not processed</div>\n      );\n    },\n  },\n  {\n    id: \"actions\",\n    cell: ({ row }) => (\n      <PayoutRequestTableRowActions\n        row={row}\n        tableSchema={payoutRequestSchema}\n      />\n    ),\n  },\n];\n\n// Export filters for use in the main component\nexport const filters = [\n  {\n    columnId: \"status\",\n    title: \"Status\",\n    options: statusOptions,\n  },\n];\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.admin.users.seller-profile.$id\route.tsx</source>
<document_content>import React from \"react\";\nimport { useLoaderData, useParams, Link } from \"@remix-run/react\";\nimport { LoaderFunction, json } from \"@remix-run/node\";\nimport { SellerProfileEditComponent } from \"@/components/user/seller-form\";\nimport type { SellerProfileFormData } from \"@/components/user/seller-form\";\n//import { z } from 'zod';\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport { toast } from \"sonner\";\nimport { Button } from \"@/components/ui/button\";\n\n// Define the type for the loader data\ntype LoaderData = {\n  sellerProfile: SellerProfileFormData;\n};\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  const { id } = params;\n  if (!id) {\n    throw new Error(\"Seller Email is required\");\n  }\n\n  const response = await fetch(\n    `${process.env.BACKEND_URL}/api/v1/users/${id}`,\n    {\n      headers: {\n        Cookie: request.headers.get(\"Cookie\") || \"\",\n      },\n    },\n  );\n\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch seller profile\");\n  }\n\n  const user = await response.json();\n  console.log(user);\n\n  const loaderData: LoaderData = {\n    sellerProfile: {\n      businessName: user.sellerProfile.businessName,\n      businessAddress: user.sellerProfile.businessAddress,\n      businessPhone: user.sellerProfile.businessPhone,\n      businessEmail: user.sellerProfile.businessEmail,\n      accountHolderName:\n        user.sellerProfile.bankAccount?.accountHolderName || \"\",\n      accountNumber: user.sellerProfile.bankAccount?.accountNumber || \"\",\n      bankName: user.sellerProfile.bankAccount?.bankName || \"\",\n      swiftCode: user.sellerProfile.bankAccount?.swiftCode || \"\",\n      iban: user.sellerProfile.bankAccount?.iban || \"\",\n      routingNumber: user.sellerProfile.bankAccount?.routingNumber || \"\",\n    },\n  };\n\n  return json(loaderData);\n};\n\nconst AdminSellerProfileEditPage: React.FC = () => {\n  const { sellerProfile } = useLoaderData<LoaderData>();\n  const { id } = useParams();\n\n  const handleSubmit = async (data: SellerProfileFormData) => {\n    try {\n      const response = await fetch(\n        `${window.ENV.BACKEND_URL}/api/v1/admin/seller-profile/${id}`,\n        {\n          method: \"PUT\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(data),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update seller profile\");\n      }\n\n      toast.success(\"Seller profile updated successfully\");\n    } catch (error) {\n      showErrorToast(error);\n      console.error(\"Error updating seller profile:\", error);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <Link to=\"/app/admin/users\">\n        <Button className=\"mb-4\">Back</Button>\n      </Link>\n      <h2 className=\"text-xl font-bold mb-6\">\n        Editing profile for seller: {id}\n      </h2>\n      <SellerProfileEditComponent\n        initialData={sellerProfile}\n        onSubmit={handleSubmit}\n        isAdmin={true}\n      />\n    </div>\n  );\n};\n\nexport default AdminSellerProfileEditPage;\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.admin.users.user-profile.$id\route.tsx</source>
<document_content>import React, { useState } from \"react\";\nimport { useLoaderData, useParams, Link } from \"@remix-run/react\";\nimport { LoaderFunction, json } from \"@remix-run/node\";\nimport ProfileEditComponent from \"@/components/user/user-form\";\nimport type { FormData } from \"@/components/user/user-form\";\nimport { useUserStore } from \"@/stores/user-store\";\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport { toast } from \"sonner\";\nimport { Button } from \"@/components/ui/button\";\n\ntype LoaderData = {\n  profileData: {\n    name: string;\n    phoneNumber: string;\n    profileImg: string;\n  } | null;\n};\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  const { id } = params;\n  let profileData = null;\n\n  if (id) {\n    // Admin is editing a user's profile\n    const response = await fetch(\n      `${process.env.BACKEND_URL}/api/v1/users/${id}`,\n      {\n        headers: {\n          Cookie: request.headers.get(\"Cookie\") || \"\",\n        },\n      },\n    );\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch user profile\");\n    }\n\n    const userData = await response.json();\n    profileData = {\n      name: userData.profile.name,\n      phoneNumber: userData.profile.phoneNumber,\n      profileImg: userData.profile.profileImg,\n    };\n  } else {\n    // User is editing their own profile\n    const response = await fetch(`${process.env.BACKEND_URL}/api/v1/profile`, {\n      headers: {\n        Cookie: request.headers.get(\"Cookie\") || \"\",\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch user profile\");\n    }\n\n    profileData = await response.json();\n  }\n\n  return json({ profileData });\n};\n\nconst ProfileEditPage: React.FC = () => {\n  const { profileData } = useLoaderData<LoaderData>();\n  const { id } = useParams();\n  const { checkLoginStatus } = useUserStore();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async (data: FormData, avatar: string | null) => {\n    setIsSubmitting(true);\n    try {\n      const endpoint = id\n        ? `${window.ENV.BACKEND_URL}/api/v1/admin/profile/${id}`\n        : `${window.ENV.BACKEND_URL}/api/v1/profile`;\n\n      let body;\n      const fetchOptions: RequestInit = {\n        method: \"PUT\",\n        credentials: \"include\",\n      };\n\n      if (avatar && avatar !== profileData?.profileImg) {\n        const formData = new FormData();\n        if (data.name) formData.append(\"name\", data.name);\n        if (data.phoneNumber) formData.append(\"phoneNumber\", data.phoneNumber);\n\n        const response = await fetch(avatar);\n        const blob = await response.blob();\n        formData.append(\"profileImg\", blob, \"avatar.png\");\n\n        body = formData;\n      } else {\n        body = JSON.stringify({\n          name: data.name,\n          phoneNumber: data.phoneNumber,\n        });\n        fetchOptions.headers = {\n          \"Content-Type\": \"application/json\",\n        };\n      }\n\n      fetchOptions.body = body;\n\n      const response = await fetch(endpoint, fetchOptions);\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update profile\");\n      }\n\n      await checkLoginStatus();\n      toast.success(\"Profile updated successfully\");\n    } catch (error) {\n      showErrorToast(error);\n      console.error(\"Error updating profile:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (!profileData) {\n    return <div>Error: Unable to load profile data</div>;\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <Link to=\"/app/admin/users\">\n        <Button className=\"mb-4\">Back</Button>\n      </Link>\n      <h1 className=\"text-3xl font-bold mb-6\">\n        {id ? `Edit User Profile (Admin)` : \"Edit Your Profile\"}\n      </h1>\n      {id && <p className=\"mb-4\">Editing profile for user ID: {id}</p>}\n      <ProfileEditComponent\n        initialData={profileData}\n        onSubmit={handleSubmit}\n        isAdmin={!!id}\n        userId={id}\n      />\n    </div>\n  );\n};\n\nexport default ProfileEditPage;\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.admin.users._index\route.tsx</source>
<document_content>import React, { useMemo } from \"react\";\nimport { DataTable } from \"@/components/data-table/data-table\";\nimport { UserSchema, columns, roleOptions, userSchema } from \"./table\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { LoaderFunction, json, redirect } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport ErrorComponent from \"@/components/error/500\";\nimport { checkAuthCookie } from \"@/lib/router-guard\";\nimport LoadingComponent from \"@/components/custom/loading\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Cell,\n  Legend,\n  Pie,\n  Tooltip,\n  PieChart,\n  ResponsiveContainer,\n  Bar,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  BarChart,\n} from \"recharts\";\nimport { ChartConfig, ChartContainer } from \"@/components/ui/chart\";\nimport { Users, UserCheck, UserX, ShieldAlert, Mail, User } from \"lucide-react\";\nimport { z } from \"zod\";\n\nexport const ErrorBoundary = () => {\n  return <ErrorComponent />;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const cookieHeader = request.headers.get(\"Cookie\");\n  if (!checkAuthCookie(request)) return redirect(\"/login\");\n  const res = await fetch(`${process.env.BACKEND_URL}/api/v1/users/`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Cookie: cookieHeader?.toString() ?? \"\",\n    },\n  });\n  if (!res.ok) throw new Error(\"Oh no! Something went wrong!\");\n  const data = await res.json();\n  return json({\n    items: z.array(userSchema).parse(data),\n    success: res.ok,\n  });\n};\n\nconst filters = [\n  {\n    columnId: \"role\",\n    title: \"Role\",\n    options: roleOptions,\n  },\n];\n\nexport default function UserManagementPage() {\n  const { items } = useLoaderData<typeof loader>();\n\n  const roleCounts = useMemo(() => {\n    return items.reduce((acc: Record<string, number>, user: UserSchema) => {\n      acc[user.role] = (acc[user.role] || 0) + 1;\n      return acc;\n    }, {});\n  }, [items]);\n\n  const verifiedCount = useMemo(() => {\n    return items.filter(\n      (user: UserSchema) =>\n        user.sellerProfile?.verificationStatus === \"APPROVED\",\n    ).length;\n  }, [items]);\n\n  const bannedCount = useMemo(() => {\n    return items.filter((user: UserSchema) => user.bannedUntil !== null).length;\n  }, [items]);\n\n  const pendingSellerCount = useMemo(() => {\n    return items.filter(\n      (user: UserSchema) =>\n        user.sellerProfile?.verificationStatus === \"PENDING\",\n    ).length;\n  }, [items]);\n\n  return (\n    <div className=\"flex flex-col space-y-8 p-8\">\n      <Header />\n      <div className=\"grid grid-cols-3 gap-4\">\n        <RoleDistributionChart roleCounts={roleCounts} />\n        <InfoPanel\n          totalUsers={items.length}\n          roleCounts={roleCounts}\n          verifiedCount={verifiedCount}\n          bannedCount={bannedCount}\n          pendingSellerCount={pendingSellerCount}\n        />\n      </div>\n      <ClientOnly fallback={<LoadingComponent />}>\n        {() => (\n          <DataTable\n            data={items ?? []}\n            columns={columns}\n            filters={filters}\n            search=\"email\"\n          />\n        )}\n      </ClientOnly>\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"space-y-1\">\n        <h2 className=\"text-2xl font-semibold tracking-tight\">\n          User Management\n        </h2>\n        <p className=\"text-sm text-muted-foreground\">\n          Manage and monitor user accounts across the platform.\n        </p>\n      </div>\n    </div>\n  );\n}\n\ninterface StatCardProps {\n  title: string;\n  value: number;\n  Icon: React.ElementType;\n}\n\nfunction StatCard({ title, value, Icon }: StatCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 py-2 px-3\">\n        <CardTitle className=\"text-xs font-medium\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent className=\"py-2 px-3\">\n        <div className=\"text-xl font-bold\">{value}</div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface RoleDistributionChartProps {\n  roleCounts: Record<string, number>;\n}\n\nconst ROLE_COLORS: Record<string, string> = {\n  ADMIN: \"#FF6384\",\n  USER: \"#36A2EB\",\n  SELLER: \"#FFCE56\",\n  MODERATOR: \"#4BC0C0\",\n};\n\nconst RoleDistributionChart: React.FC<RoleDistributionChartProps> = ({\n  roleCounts,\n}) => {\n  const data = Object.entries(roleCounts).map(([role, count]) => ({\n    name: role,\n    count: count,\n  }));\n\n  const chartConfig: ChartConfig = Object.fromEntries(\n    Object.entries(ROLE_COLORS).map(([role, color]) => [\n      role,\n      { label: role, color },\n    ]),\n  );\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Role Distribution</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} className=\"min-h-[300px] w-full\">\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart\n              data={data}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip\n                formatter={(value: number, name: string, props: any) => {\n                  const total = data.reduce((sum, item) => sum + item.count, 0);\n                  const percent = ((value / total) * 100).toFixed(1);\n                  return [`${value} (${percent}%)`, props.name];\n                }}\n              />\n              <Bar dataKey=\"count\" fill=\"#8884d8\">\n                {data.map((entry, index) => (\n                  <Cell\n                    key={`cell-${index}`}\n                    fill={ROLE_COLORS[entry.name] || \"#000000\"}\n                  />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\ninterface InfoPanelProps {\n  totalUsers: number;\n  roleCounts: Record<string, number>;\n  verifiedCount: number;\n  bannedCount: number;\n  pendingSellerCount: number;\n}\n\nfunction InfoPanel({\n  totalUsers,\n  roleCounts,\n  verifiedCount,\n  bannedCount,\n  pendingSellerCount,\n}: InfoPanelProps) {\n  return (\n    <Card className=\"col-span-2\">\n      <CardHeader>\n        <CardTitle>User Statistics</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-3 gap-4\">\n          <StatCard title=\"Total Users\" value={totalUsers} Icon={Users} />\n          <StatCard\n            title=\"Verified Sellers\"\n            value={verifiedCount}\n            Icon={UserCheck}\n          />\n          <StatCard title=\"Banned Users\" value={bannedCount} Icon={UserX} />\n          <StatCard\n            title=\"Admins\"\n            value={roleCounts[\"ADMIN\"] || 0}\n            Icon={ShieldAlert}\n          />\n          <StatCard\n            title=\"Moderators\"\n            value={roleCounts[\"MODERATOR\"] || 0}\n            Icon={User}\n          />\n          <StatCard\n            title=\"Pending Sellers\"\n            value={pendingSellerCount}\n            Icon={Mail}\n          />\n        </div>\n        <div className=\"mt-4 flex items-center space-x-4\">\n          <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n            <Users className=\"h-4 w-4\" />\n            <span>{totalUsers} Total Users</span>\n          </Badge>\n          <Badge variant=\"destructive\" className=\"flex items-center space-x-1\">\n            <UserX className=\"h-4 w-4\" />\n            <span>{bannedCount} Banned</span>\n          </Badge>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.admin.users._index\table.tsx</source>
<document_content>import { z } from \"zod\";\nimport { ColumnDef, Row } from \"@tanstack/react-table\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DataTableColumnHeader } from \"@/components/data-table/data-table-column-header\";\nimport { Button } from \"@/components/custom/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { DotsHorizontalIcon, FileIcon } from \"@radix-ui/react-icons\";\n//import type { ZodSchema } from \"zod\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport { toast } from \"sonner\";\nimport { Link } from \"@remix-run/react\";\nimport React from \"react\";\n\n// User schema\nconst bankAccountSchema = z.object({\n  id: z.string(),\n  sellerProfileId: z.string(),\n  accountHolderName: z.string(),\n  accountNumber: z.string(),\n  bankName: z.string(),\n  swiftCode: z.string(),\n  iban: z.string().nullable(),\n  routingNumber: z.string().nullable(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\n// Define the user schema with the updated sellerProfile including bankAccount\nexport const userSchema = z.object({\n  id: z.string(),\n  email: z.string().email(),\n  bannedUntil: z.string().nullable(),\n  role: z.enum([\"ADMIN\", \"USER\", \"SELLER\", \"MODERATOR\"]),\n  sellerProfile: z\n    .object({\n      id: z.string(),\n      userId: z.string(),\n      profileImg: z.string().nullable(),\n      businessName: z.string(),\n      businessAddress: z.string(),\n      businessPhone: z.string(),\n      businessEmail: z.string(),\n      identityDoc: z.string().nullable(),\n      verificationDate: z.string().nullable(),\n      verificationStatus: z.enum([\"PENDING\", \"APPROVED\", \"REJECTED\", \"IDLE\"]),\n      balance: z.number().nullable(),\n      lastPayoutDate: z.string().nullable(),\n      bankAccount: bankAccountSchema.nullable(),\n    })\n    .nullable(),\n});\n\nexport const roleOptions = [\n  {\n    label: \"Seller\",\n    value: \"SELLER\",\n  },\n  {\n    label: \"User\",\n    value: \"USER\",\n  },\n  {\n    label: \"Moderator\",\n    value: \"MODERATOR\",\n  },\n];\n\nexport type UserSchema = z.infer<typeof userSchema>;\ntype SellerProfileType = NonNullable<UserSchema[\"sellerProfile\"]>;\ntype VerificationStatusType = SellerProfileType[\"verificationStatus\"];\n//type VerificationStatus = UserSchema[\"sellerProfile\"][];\n\ninterface DialogProps {\n  user: UserSchema;\n  onClose: () => void;\n  onAction: (\n    action: \"ban\" | \"unban\" | \"delete\" | \"reviewApplication\",\n    status?: string,\n  ) => Promise<void>;\n}\n\nconst BanUserDialog: React.FC<DialogProps> = ({ user, onClose, onAction }) => (\n  <>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Ban User</AlertDialogTitle>\n      <AlertDialogDescription>\n        Are you sure you want to ban {user.email}? This action can be reversed\n        later.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel onClick={onClose}>Cancel</AlertDialogCancel>\n      <AlertDialogAction onClick={() => onAction(\"ban\")}>\n        Ban User\n      </AlertDialogAction>\n    </AlertDialogFooter>\n  </>\n);\n\nconst UnbanUserDialog: React.FC<DialogProps> = ({\n  user,\n  onClose,\n  onAction,\n}) => (\n  <>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Unban User</AlertDialogTitle>\n      <AlertDialogDescription>\n        Are you sure you want to unban {user.email}? This will restore their\n        access to the platform.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel onClick={onClose}>Cancel</AlertDialogCancel>\n      <AlertDialogAction onClick={() => onAction(\"unban\")}>\n        Unban User\n      </AlertDialogAction>\n    </AlertDialogFooter>\n  </>\n);\n\nconst DeleteUserDialog: React.FC<DialogProps> = ({\n  user,\n  onClose,\n  onAction,\n}) => (\n  <>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Delete User</AlertDialogTitle>\n      <AlertDialogDescription>\n        Are you absolutely sure you want to delete {user.email}? This action\n        cannot be undone. This will permanently delete the account and remove\n        all user data completely.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel onClick={onClose}>Cancel</AlertDialogCancel>\n      <AlertDialogAction onClick={() => onAction(\"delete\")}>\n        Delete User\n      </AlertDialogAction>\n    </AlertDialogFooter>\n  </>\n);\n\nconst ReviewApplicationDialog: React.FC<DialogProps> = ({\n  user,\n  onClose,\n  onAction,\n}) => {\n  const [status, setStatus] = React.useState<VerificationStatusType>(\n    user.sellerProfile?.verificationStatus || \"PENDING\",\n  );\n\n  if (!user.sellerProfile) {\n    return (\n      <AlertDialogHeader>\n        <AlertDialogTitle>Seller Profile Not Found</AlertDialogTitle>\n        <AlertDialogDescription>\n          This user does not have a seller profile.\n        </AlertDialogDescription>\n        <AlertDialogFooter>\n          <AlertDialogCancel onClick={onClose}>Close</AlertDialogCancel>\n        </AlertDialogFooter>\n      </AlertDialogHeader>\n    );\n  }\n\n  return (\n    <>\n      <AlertDialogHeader>\n        <AlertDialogTitle>Review Seller Application</AlertDialogTitle>\n        <AlertDialogDescription>\n          Review and update the status of the seller application for{\" \"}\n          {user.email}.\n        </AlertDialogDescription>\n      </AlertDialogHeader>\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <div className=\"space-y-6\">\n          <div>\n            <h3 className=\"text-xl font-medium\">Business Profile</h3>\n            <div className=\"mt-4 grid gap-4\">\n              <div className=\"grid grid-cols-2 items-center\">\n                <div className=\"text-muted-foreground\">Company Name</div>\n                <div>{user.sellerProfile.businessName}</div>\n              </div>\n              <div className=\"grid grid-cols-2 items-center\">\n                <div className=\"text-muted-foreground\">Business Address</div>\n                <div>{user.sellerProfile.businessAddress}</div>\n              </div>\n              <div className=\"grid grid-cols-2 items-center\">\n                <div className=\"text-muted-foreground\">Business Phone</div>\n                <div>{user.sellerProfile.businessPhone}</div>\n              </div>\n              <div className=\"grid grid-cols-2 items-center\">\n                <div className=\"text-muted-foreground\">Business Email</div>\n                <div>{user.sellerProfile.businessEmail}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"space-y-6\">\n          <div>\n            <h3 className=\"text-xl font-medium\">Bank Account Details</h3>\n            <div className=\"mt-4 grid gap-4\">\n              {user.sellerProfile.bankAccount ? (\n                <>\n                  <div className=\"grid grid-cols-2 items-center\">\n                    <div className=\"text-muted-foreground\">\n                      Account Holder Name\n                    </div>\n                    <div>\n                      {user.sellerProfile.bankAccount.accountHolderName}\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 items-center\">\n                    <div className=\"text-muted-foreground\">Account Number</div>\n                    <div>{user.sellerProfile.bankAccount.accountNumber}</div>\n                  </div>\n                  <div className=\"grid grid-cols-2 items-center\">\n                    <div className=\"text-muted-foreground\">Bank Name</div>\n                    <div>{user.sellerProfile.bankAccount.bankName}</div>\n                  </div>\n                  <div className=\"grid grid-cols-2 items-center\">\n                    <div className=\"text-muted-foreground\">SWIFT Code</div>\n                    <div>{user.sellerProfile.bankAccount.swiftCode}</div>\n                  </div>\n                  <div className=\"grid grid-cols-2 items-center\">\n                    <div className=\"text-muted-foreground\">IBAN</div>\n                    <div>{user.sellerProfile.bankAccount.iban || \"N/A\"}</div>\n                  </div>\n                  <div className=\"grid grid-cols-2 items-center\">\n                    <div className=\"text-muted-foreground\">Routing Number</div>\n                    <div>{user.sellerProfile.bankAccount.routingNumber}</div>\n                  </div>\n                </>\n              ) : (\n                <div className=\"text-muted-foreground\">\n                  No bank account details available\n                </div>\n              )}\n            </div>\n          </div>\n          <div>\n            <h3 className=\"text-xl font-medium\">Verification Status</h3>\n            <div className=\"mt-4\">\n              <Select\n                onValueChange={(e) => setStatus(e as VerificationStatusType)}\n                defaultValue={status}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select application status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"PENDING\">Pending</SelectItem>\n                  <SelectItem value=\"APPROVED\">Approved</SelectItem>\n                  <SelectItem value=\"REJECTED\">Rejected</SelectItem>\n                  <SelectItem value=\"IDLE\" disabled>\n                    Idle\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </div>\n      <AlertDialogFooter>\n        <AlertDialogCancel onClick={onClose}>Cancel</AlertDialogCancel>\n        <Button onClick={() => onAction(\"reviewApplication\", status)}>\n          Update Status\n        </Button>\n      </AlertDialogFooter>\n    </>\n  );\n};\n\ninterface DataTableRowActionsProps<TData> {\n  row: Row<TData>;\n  tableSchema: z.ZodSchema<UserSchema>;\n}\n\nexport function UserTableRowActions<TData>({\n  row,\n  tableSchema,\n}: DataTableRowActionsProps<TData>) {\n  const user = tableSchema.parse(row.original);\n  const [activeDialog, setActiveDialog] = React.useState<string | null>(null);\n\n  const handleAction = async (action: string, status?: string) => {\n    try {\n      let url = `${window.ENV.BACKEND_URL}/api/v1/admin/${user.email}`;\n      let method = \"POST\";\n      let body = null;\n\n      switch (action) {\n        case \"ban\":\n          url += \"/ban\";\n          break;\n        case \"unban\":\n          url += \"/unban\";\n          break;\n        case \"delete\":\n          method = \"DELETE\";\n          break;\n        case \"reviewApplication\":\n          url = `${window.ENV.BACKEND_URL}/api/v1/admin/seller-profile/${user.email}`;\n          method = \"PUT\";\n          body = JSON.stringify({ verificationStatus: status });\n          break;\n        default:\n          throw new Error(\"Invalid action\");\n      }\n\n      const res = await fetch(url, {\n        method: method,\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: body,\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Oh no! Something went wrong!\");\n      }\n\n      toast.success(`Action ${action} completed successfully`);\n      window.location.reload();\n    } catch (e) {\n      showErrorToast(e);\n    }\n  };\n\n  const renderDialogContent = () => {\n    switch (activeDialog) {\n      case \"ban\":\n        return (\n          <BanUserDialog\n            user={user}\n            onClose={() => setActiveDialog(null)}\n            onAction={() => handleAction(\"ban\")}\n          />\n        );\n      case \"unban\":\n        return (\n          <UnbanUserDialog\n            user={user}\n            onClose={() => setActiveDialog(null)}\n            onAction={() => handleAction(\"unban\")}\n          />\n        );\n      case \"delete\":\n        return (\n          <DeleteUserDialog\n            user={user}\n            onClose={() => setActiveDialog(null)}\n            onAction={() => handleAction(\"delete\")}\n          />\n        );\n      case \"reviewApplication\":\n        return (\n          <ReviewApplicationDialog\n            user={user}\n            onClose={() => setActiveDialog(null)}\n            onAction={(action, status) => handleAction(action, status)}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <AlertDialog\n      open={!!activeDialog}\n      onOpenChange={() => setActiveDialog(null)}\n    >\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            className=\"flex h-8 w-8 p-0 data-[state=open]:bg-muted\"\n          >\n            <DotsHorizontalIcon className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Open menu</span>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-[160px]\">\n          {!user.bannedUntil ? (\n            <Link to={`/app/admin/users/user-profile/${user.email}`}>\n              <DropdownMenuItem>Edit Profile</DropdownMenuItem>\n            </Link>\n          ) : (\n            <DropdownMenuItem disabled>Edit Profile</DropdownMenuItem>\n          )}\n          {user.role === \"SELLER\" && (\n            <>\n              <Link to={`/app/admin/users/seller-profile/${user.email}`}>\n                <DropdownMenuItem>Edit Seller Profile</DropdownMenuItem>\n              </Link>\n              <DropdownMenuItem\n                onClick={() => setActiveDialog(\"reviewApplication\")}\n              >\n                Review Application\n              </DropdownMenuItem>\n            </>\n          )}\n          {user.bannedUntil ? (\n            <DropdownMenuItem onClick={() => setActiveDialog(\"unban\")}>\n              Unban User\n            </DropdownMenuItem>\n          ) : (\n            <DropdownMenuItem\n              onClick={() => setActiveDialog(\"ban\")}\n              className=\"text-red-500\"\n            >\n              Ban User\n            </DropdownMenuItem>\n          )}\n          <DropdownMenuItem\n            onClick={() => setActiveDialog(\"delete\")}\n            className=\"text-red-500\"\n          >\n            Delete User\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      <AlertDialogContent className=\"w-1/2 max-w-full\">\n        {renderDialogContent()}\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n\nexport const toolbar = {};\n\nexport const columns: ColumnDef<UserSchema>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"id\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"User ID\" />\n    ),\n    cell: ({ row }) => (\n      <div className=\"w-[80px] max-w-[80px] truncate\">{row.getValue(\"id\")}</div>\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Email\" />\n    ),\n    cell: ({ row }) => {\n      return (\n        <div className=\"flex items-center\">\n          <span>{row.getValue(\"email\")}</span>\n        </div>\n      );\n    },\n  },\n  {\n    accessorKey: \"role\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Role\" />\n    ),\n    cell: ({ row }) => {\n      return (\n        <div className=\"flex items-center\">\n          <span>{row.getValue(\"role\")}</span>\n        </div>\n      );\n    },\n    filterFn: (row, id, value) => {\n      return value.includes(row.getValue(id));\n    },\n  },\n  {\n    id: \"actions\",\n    cell: ({ row }) => (\n      <UserTableRowActions row={row} tableSchema={userSchema} />\n    ),\n  },\n];\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.admin._index\route.tsx</source>
<document_content>import React from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { DataTable } from \"@/components/data-table/data-table\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { LoaderFunction, json, redirect } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport ErrorComponent from \"@/components/error/500\";\nimport { checkAuthCookie } from \"@/lib/router-guard\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Bar, BarChart, ResponsiveContainer, XAxis, YAxis } from \"recharts\";\nimport { z } from \"zod\";\nimport { ColumnDef } from \"@tanstack/react-table\";\nimport { DataTableColumnHeader } from \"@/components/data-table/data-table-column-header\";\n\n// Updated schema to match the new backend structure\nconst dashboardDataSchema = z.object({\n  salesOverview: z.object({\n    totalRevenue: z.number(),\n    totalSales: z.number(),\n    averageOrderValue: z.number(),\n    dailySales: z.object({ revenue: z.number(), salesCount: z.number() }),\n    weeklySales: z.object({ revenue: z.number(), salesCount: z.number() }),\n    monthlySales: z.object({ revenue: z.number(), salesCount: z.number() }),\n  }),\n  userStatistics: z.object({\n    totalUsers: z.number(),\n    userTypeCounts: z.record(z.number()),\n    newUsers: z.number(),\n  }),\n  repoMetrics: z.object({\n    totalRepos: z.number(),\n    pendingApprovalRepos: z.number(),\n    popularRepos: z.array(\n      z.object({\n        id: z.string(),\n        name: z.string(),\n        _count: z.object({ orders: z.number() }),\n      }),\n    ),\n    recentRepos: z.array(\n      z.object({\n        id: z.string(),\n        name: z.string(),\n        createdAt: z.string(),\n      }),\n    ),\n  }),\n  sellerPerformance: z.object({\n    topSellers: z.array(\n      z.object({\n        id: z.string(),\n        email: z.string(),\n        profile: z.object({ name: z.string().nullable() }).optional(),\n        sellerProfile: z\n          .object({\n            balance: z.number(),\n            verificationStatus: z.enum([\n              \"IDLE\",\n              \"PENDING\",\n              \"APPROVED\",\n              \"REJECTED\",\n            ]),\n          })\n          .nullable(),\n        _count: z.object({ orders: z.number() }),\n      }),\n    ),\n    newSellerApplications: z.number(),\n  }),\n  orderManagement: z.object({\n    recentOrders: z.array(\n      z.object({\n        id: z.string(),\n        userId: z.string(),\n        codeRepoId: z.string(),\n        createdAt: z.string(),\n        status: z.enum([\n          \"REQUIRESPAYMENTMETHOD\",\n          \"REQUIRESCONFIRMATION\",\n          \"REQUIRESACTION\",\n          \"PROCESSING\",\n          \"REQUIRESCAPTURE\",\n          \"CANCELLED\",\n          \"SUCCEEDED\",\n        ]),\n        totalAmount: z.number(),\n        user: z.object({ email: z.string() }),\n        codeRepo: z.object({ name: z.string() }),\n      }),\n    ),\n    orderStatusCounts: z.record(z.number()),\n  }),\n  financialInsights: z.object({\n    currentMonthRevenue: z.number(),\n    previousMonthRevenue: z.number(),\n    revenueGrowth: z.number(),\n    pendingPayouts: z.number(),\n    processedPayouts: z.number(),\n    topSellingRepos: z.array(\n      z.object({\n        id: z.string(),\n        name: z.string(),\n        language: z.enum([\"JSX\", \"TSX\"]),\n        totalRevenue: z.number(),\n      }),\n    ),\n  }),\n  supportTickets: z.object({\n    openTicketsCount: z.number(),\n    averageResponseTime: z.number().nullable(),\n    ticketStatusCounts: z.record(z.number()),\n  }),\n  contentModeration: z.object({\n    flaggedReviews: z.number(),\n    flaggedComments: z.number(),\n    totalFlaggedContent: z.number(),\n  }),\n});\n\ntype DashboardData = z.infer<typeof dashboardDataSchema>;\n\nexport const ErrorBoundary = () => {\n  return <ErrorComponent />;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const cookieHeader = request.headers.get(\"Cookie\");\n  if (!checkAuthCookie(request)) return redirect(\"/login\");\n  const res = await fetch(`${process.env.BACKEND_URL}/api/v1/admin/dashboard`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Cookie: cookieHeader?.toString() ?? \"\",\n    },\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch admin dashboard data\");\n  const data = await res.json();\n  return json(dashboardDataSchema.parse(data));\n};\n\nconst recentOrderColumns: ColumnDef<\n  DashboardData[\"orderManagement\"][\"recentOrders\"][number]\n>[] = [\n  {\n    accessorKey: \"user.email\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"User Email\" />\n    ),\n  },\n  {\n    accessorKey: \"codeRepo.name\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Repo Name\" />\n    ),\n  },\n  {\n    accessorKey: \"totalAmount\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Amount\" />\n    ),\n    cell: ({ row }) => `$${row.getValue<number>(\"totalAmount\").toFixed(2)}`,\n  },\n  {\n    accessorKey: \"status\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Status\" />\n    ),\n  },\n  {\n    accessorKey: \"createdAt\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Date\" />\n    ),\n    cell: ({ row }) =>\n      new Date(row.getValue<string>(\"createdAt\")).toLocaleDateString(),\n  },\n];\n\nconst orderFilters = [\n  {\n    columnId: \"status\",\n    title: \"Status\",\n    options: [\n      { label: \"Requires Payment Method\", value: \"REQUIRESPAYMENTMETHOD\" },\n      { label: \"Requires Confirmation\", value: \"REQUIRESCONFIRMATION\" },\n      { label: \"Requires Action\", value: \"REQUIRESACTION\" },\n      { label: \"Processing\", value: \"PROCESSING\" },\n      { label: \"Requires Capture\", value: \"REQUIRESCAPTURE\" },\n      { label: \"Cancelled\", value: \"CANCELLED\" },\n      { label: \"Succeeded\", value: \"SUCCEEDED\" },\n    ],\n  },\n];\n\nexport default function AdminDashboard() {\n  const dashboardData = useLoaderData<DashboardData>();\n\n  return (\n    <div className=\"space-y-4 p-8\">\n      <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <MetricCard\n          title=\"Total Users\"\n          value={dashboardData.userStatistics.totalUsers}\n        />\n        <MetricCard\n          title=\"Total Revenue\"\n          value={`$${dashboardData.salesOverview.totalRevenue.toFixed(2)}`}\n        />\n        <MetricCard\n          title=\"Total Sales\"\n          value={dashboardData.salesOverview.totalSales}\n        />\n        <MetricCard\n          title=\"Avg. Order Value\"\n          value={`$${dashboardData.salesOverview.averageOrderValue.toFixed(2)}`}\n        />\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Sales Overview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={350}>\n              <BarChart\n                data={[\n                  { name: \"Daily\", ...dashboardData.salesOverview.dailySales },\n                  {\n                    name: \"Weekly\",\n                    ...dashboardData.salesOverview.weeklySales,\n                  },\n                  {\n                    name: \"Monthly\",\n                    ...dashboardData.salesOverview.monthlySales,\n                  },\n                ]}\n              >\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Bar dataKey=\"revenue\" fill=\"#8884d8\" name=\"Revenue\" />\n                <Bar dataKey=\"salesCount\" fill=\"#82ca9d\" name=\"Sales Count\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Top Sellers</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ul>\n              {dashboardData.sellerPerformance.topSellers.map(\n                (seller, index) => (\n                  <li key={seller.id} className=\"mb-2\">\n                    {index + 1}. {seller.profile?.name || seller.email} - $\n                    {seller.sellerProfile?.balance.toFixed(2) ?? \"N/A\"} (\n                    {seller._count.orders} orders)\n                  </li>\n                ),\n              )}\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Orders</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ClientOnly fallback={<LoadingComponent />}>\n            {() => (\n              <DataTable\n                data={dashboardData.orderManagement.recentOrders}\n                columns={recentOrderColumns}\n                filters={orderFilters}\n                search=\"user.email\"\n              />\n            )}\n          </ClientOnly>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <MetricCard\n          title=\"Pending Repo Approvals\"\n          value={dashboardData.repoMetrics.pendingApprovalRepos}\n        />\n        <MetricCard\n          title=\"Open Support Tickets\"\n          value={dashboardData.supportTickets.openTicketsCount}\n        />\n        <MetricCard\n          title=\"Flagged Content\"\n          value={dashboardData.contentModeration.totalFlaggedContent}\n        />\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Financial Insights</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div>\n              <p>\n                Current Month Revenue: $\n                {dashboardData.financialInsights.currentMonthRevenue.toFixed(2)}\n              </p>\n              <p>\n                Previous Month Revenue: $\n                {dashboardData.financialInsights.previousMonthRevenue.toFixed(\n                  2,\n                )}\n              </p>\n              <p>\n                Revenue Growth:{\" \"}\n                {dashboardData.financialInsights.revenueGrowth.toFixed(2)}%\n              </p>\n            </div>\n            <div>\n              <p>\n                Pending Payouts: $\n                {dashboardData.financialInsights.pendingPayouts.toFixed(2)}\n              </p>\n              <p>\n                Processed Payouts: $\n                {dashboardData.financialInsights.processedPayouts.toFixed(2)}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\ninterface MetricCardProps {\n  title: string;\n  value: number | string;\n}\n\nfunction MetricCard({ title, value }: MetricCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction LoadingComponent() {\n  return (\n    <div className=\"flex h-screen w-screen items-center justify-center\">\n      <div className=\"flex flex-col items-center space-y-4\">\n        <p className=\"text-gray-500 dark:text-gray-400\">\n          Please wait while we are preparing the content\n        </p>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-4 w-[250px]\" />\n            <Skeleton className=\"h-4 w-[200px]\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.mod.comments._index\route.tsx</source>
<document_content>import React, { useMemo } from \"react\";\nimport { DataTable } from \"@/components/data-table/data-table\";\nimport { columns, filters, flagOptions } from \"./table\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { LoaderFunction, json, redirect } from \"@remix-run/node\";\nimport { useLoaderData, useRouteError } from \"@remix-run/react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport ErrorComponent from \"@/components/error/500\";\nimport { checkAuthCookie } from \"@/lib/router-guard\";\nimport {\n  AlertTriangle,\n  Flag,\n  Flame,\n  HelpCircle,\n  MessageCircle,\n  XCircle,\n} from \"lucide-react\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport {\n  Cell,\n  Legend,\n  Pie,\n  Tooltip,\n  PieChart,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { ChartConfig, ChartContainer } from \"@/components/ui/chart\";\nimport { DataTableLoadingComponent } from \"@/components/dashboard/loading\";\n\nexport const ErrorBoundary = () => {\n  const error = useRouteError();\n  return <ErrorComponent />;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const cookieHeader = request.headers.get(\"Cookie\");\n  if (!checkAuthCookie(request)) return redirect(\"/login\");\n  const res = await fetch(`${process.env.BACKEND_URL}/api/v1/comments`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Cookie: cookieHeader?.toString() ?? \"\",\n    },\n  });\n  if (!res.ok) throw new Error(\"Oh no! Something went wrong!\");\n  const data = await res.json();\n  return json({\n    items: data ?? [],\n    success: true,\n  });\n};\n\nexport default function FlaggedCommentsPage() {\n  const comments = useLoaderData<typeof loader>();\n\n  const flagCounts = useMemo(() => {\n    return comments.items.reduce(\n      (acc, comment) => {\n        acc[comment.flag] = (acc[comment.flag] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n  }, [comments.items]);\n\n  const highPriorityComments = useMemo(() => {\n    return comments.items.filter(\n      (comment) =>\n        comment.flag === \"HARASSMENT\" || comment.flag === \"FALSE_INFORMATION\",\n    );\n  }, [comments.items]);\n\n  return (\n    <div className=\"flex flex-col space-y-8 p-8\">\n      <Header />\n      <div className=\"grid grid-cols-3 gap-4\">\n        <FlagDistributionChart flagCounts={flagCounts} />\n        <InfoPanel\n          totalComments={comments.items.length}\n          flagCounts={flagCounts}\n          highPriorityCount={highPriorityComments.length}\n        />\n      </div>\n      <ClientOnly fallback={<DataTableLoadingComponent />}>\n        {() => (\n          <DataTable\n            data={comments.items ?? []}\n            columns={columns}\n            filters={filters}\n            search=\"content\"\n          />\n        )}\n      </ClientOnly>\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"space-y-1\">\n        <h2 className=\"text-2xl font-semibold tracking-tight\">\n          Flagged Comments\n        </h2>\n        <p className=\"text-sm text-muted-foreground\">\n          Manage and moderate flagged comments from users.\n        </p>\n      </div>\n    </div>\n  );\n}\n\ninterface StatCardProps {\n  title: string;\n  value: number;\n  Icon: React.ElementType;\n}\n\nfunction StatCard({ title, value, Icon }: StatCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 py-2 px-3\">\n        <CardTitle className=\"text-xs font-medium\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent className=\"py-2 px-3\">\n        <div className=\"text-xl font-bold\">{value}</div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface FlagDistributionChartProps {\n  flagCounts: Record<string, number>;\n}\n\ninterface FlagCount {\n  name: string;\n  value: number;\n  key: string;\n}\n\nconst FLAG_COLORS = {\n  FALSE_INFORMATION: \"#FF6384\",\n  OTHER: \"#36A2EB\",\n  HARASSMENT: \"#FFCE56\",\n  OFF_TOPIC: \"#4BC0C0\",\n  INAPPROPRIATE_LANGUAGE: \"#9966FF\",\n  SPAM: \"#FF9F40\",\n};\n\nconst FlagDistributionChart: React.FC<FlagDistributionChartProps> = ({\n  flagCounts,\n}) => {\n  const data: FlagCount[] = Object.entries(flagCounts)\n    .map(([key, value]) => ({\n      name: flagOptions.find((option) => option.value === key)?.label || key,\n      value: value,\n      key: key,\n    }))\n    .sort((a, b) => b.value - a.value);\n\n  const chartConfig: ChartConfig = data.reduce((config, item) => {\n    config[item.key] = {\n      label: item.name,\n      color: FLAG_COLORS[item.key as keyof typeof FLAG_COLORS] || \"#000000\",\n    };\n    return config;\n  }, {} as ChartConfig);\n\n  const renderCustomizedLabel = ({\n    cx,\n    cy,\n    midAngle,\n    innerRadius,\n    outerRadius,\n    percent,\n  }: any) => {\n    const RADIAN = Math.PI / 180;\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        fill=\"white\"\n        textAnchor={x > cx ? \"start\" : \"end\"}\n        dominantBaseline=\"central\"\n      >\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    );\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Flag Distribution</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} className=\"min-h-[300px] w-full\">\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={data}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                label={renderCustomizedLabel}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n              >\n                {data.map((entry, index) => (\n                  <Cell\n                    key={`cell-${index}`}\n                    fill={chartConfig[entry.key].color}\n                  />\n                ))}\n              </Pie>\n              <Tooltip\n                formatter={(value: number, name: string) => {\n                  const total = data.reduce((sum, item) => sum + item.value, 0);\n                  const percent = ((value / total) * 100).toFixed(1);\n                  return [`${value} (${percent}%)`, name];\n                }}\n              />\n              <Legend layout=\"vertical\" align=\"right\" verticalAlign=\"middle\" />\n            </PieChart>\n          </ResponsiveContainer>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\ninterface InfoPanelProps {\n  flagCounts: Record<string, number>;\n  totalComments: number;\n  highPriorityCount: number;\n}\n\nfunction InfoPanel({\n  flagCounts,\n  totalComments,\n  highPriorityCount,\n}: InfoPanelProps) {\n  return (\n    <Card className=\"col-span-2\">\n      <CardHeader>\n        <CardTitle>Comment Statistics</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <StatCard title=\"Total Flagged\" value={totalComments} Icon={Flag} />\n          <StatCard\n            title=\"Spam\"\n            value={flagCounts[\"SPAM\"] || 0}\n            Icon={MessageCircle}\n          />\n          <StatCard\n            title=\"Inappropriate\"\n            value={flagCounts[\"INAPPROPRIATE_LANGUAGE\"] || 0}\n            Icon={Flame}\n          />\n          <StatCard\n            title=\"Harassment\"\n            value={flagCounts[\"HARASSMENT\"] || 0}\n            Icon={AlertTriangle}\n          />\n          <StatCard\n            title=\"False Information\"\n            value={flagCounts[\"FALSE_INFORMATION\"] || 0}\n            Icon={XCircle}\n          />\n          <StatCard\n            title=\"Other\"\n            value={flagCounts[\"OTHER\"] || 0}\n            Icon={HelpCircle}\n          />\n        </div>\n        <div className=\"mt-4 flex items-center space-x-4\">\n          <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n            <Flag className=\"h-4 w-4\" />\n            <span>{totalComments} Flagged</span>\n          </Badge>\n          <Badge variant=\"destructive\" className=\"flex items-center space-x-1\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <span>{highPriorityCount} High Priority</span>\n          </Badge>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.mod.comments._index\table.tsx</source>
<document_content>import React from \"react\";\nimport { z } from \"zod\";\nimport { ColumnDef, Row } from \"@tanstack/react-table\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DataTableColumnHeader } from \"@/components/data-table/data-table-column-header\";\nimport { Button } from \"@/components/custom/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { DotsHorizontalIcon } from \"@radix-ui/react-icons\";\nimport type { ZodSchema } from \"zod\";\nimport {\n  AlertDialog,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogCancel,\n  AlertDialogAction,\n} from \"@/components/ui/alert-dialog\";\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport { toast } from \"sonner\";\n\n// Comment schema\nexport const commentSchema = z.object({\n  id: z.string(),\n  content: z.string(),\n  userId: z.string(),\n  reviewId: z.string(),\n  flag: z.string(),\n});\n\nexport type CommentSchema = z.infer<typeof commentSchema>;\n\n// Flag options for filter\nexport const flagOptions = [\n  { label: \"No Flag\", value: \"NONE\" },\n  { label: \"Spam\", value: \"SPAM\" },\n  { label: \"Inappropriate Language\", value: \"INAPPROPRIATE_LANGUAGE\" },\n  { label: \"Harassment\", value: \"HARASSMENT\" },\n  { label: \"Off-topic\", value: \"OFF_TOPIC\" },\n  { label: \"False Information\", value: \"FALSE_INFORMATION\" },\n  { label: \"Plagiarism\", value: \"PLAGIARISM\" },\n  { label: \"Other\", value: \"OTHER\" },\n];\n\n// Vote count options for filter\nexport const voteCountOptions = [\n  { label: \"Low (0-10)\", value: \"low\" },\n  { label: \"Medium (11-50)\", value: \"medium\" },\n  { label: \"High (>50)\", value: \"high\" },\n];\n\ninterface DialogProps {\n  comment: CommentSchema;\n  onClose: () => void;\n  onAction: () => Promise<void>;\n}\n\nconst RemoveFlagDialog: React.FC<DialogProps> = ({\n  comment,\n  onClose,\n  onAction,\n}) => (\n  <>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Remove Flag</AlertDialogTitle>\n      <AlertDialogDescription>\n        Are you sure you want to remove the flag from this comment? This action\n        will mark the comment as reviewed.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel onClick={onClose}>Cancel</AlertDialogCancel>\n      <AlertDialogAction onClick={onAction}>Remove Flag</AlertDialogAction>\n    </AlertDialogFooter>\n  </>\n);\n\nconst DeleteCommentDialog: React.FC<DialogProps> = ({\n  comment,\n  onClose,\n  onAction,\n}) => (\n  <>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Delete Comment</AlertDialogTitle>\n      <AlertDialogDescription>\n        Are you sure you want to delete this comment? This action cannot be\n        undone.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel onClick={onClose}>Cancel</AlertDialogCancel>\n      <AlertDialogAction onClick={onAction}>Delete Comment</AlertDialogAction>\n    </AlertDialogFooter>\n  </>\n);\n\ninterface DataTableRowActionsProps<TData> {\n  row: Row<TData>;\n  tableSchema: ZodSchema<CommentSchema>;\n}\n\nexport function CommentTableRowActions<TData>({\n  row,\n  tableSchema,\n}: DataTableRowActionsProps<TData>) {\n  const comment = tableSchema.parse(row.original);\n  const [activeDialog, setActiveDialog] = React.useState<string | null>(null);\n\n  const handleAction = async (action: string) => {\n    try {\n      // eslint-disable-next-line\n      let url = `${window.ENV.BACKEND_URL}/api/v1/comments/${comment.id}`;\n      let method = \"PUT\";\n\n      switch (action) {\n        case \"removeFlag\":\n          url += \"/revert\";\n          method = \"PUT\";\n          break;\n        case \"delete\":\n          method = \"DELETE\";\n          break;\n        default:\n          throw new Error(\"Invalid action\");\n      }\n\n      const res = await fetch(url, {\n        method: method,\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(action === \"removeFlag\" ? { flag: \"NONE\" } : {}),\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Oh no! Something went wrong!\");\n      }\n\n      toast.success(\n        `Comment ${action === \"removeFlag\" ? \"updated\" : \"deleted\"} successfully`,\n      );\n      window.location.reload();\n    } catch (e) {\n      showErrorToast(e);\n    }\n  };\n\n  const renderDialogContent = () => {\n    switch (activeDialog) {\n      case \"removeFlag\":\n        return (\n          <RemoveFlagDialog\n            comment={comment}\n            onClose={() => setActiveDialog(null)}\n            onAction={() => handleAction(\"removeFlag\")}\n          />\n        );\n      case \"delete\":\n        return (\n          <DeleteCommentDialog\n            comment={comment}\n            onClose={() => setActiveDialog(null)}\n            onAction={() => handleAction(\"delete\")}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <AlertDialog\n      open={!!activeDialog}\n      onOpenChange={() => setActiveDialog(null)}\n    >\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            className=\"flex h-8 w-8 p-0 data-[state=open]:bg-muted\"\n          >\n            <DotsHorizontalIcon className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Open menu</span>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-[160px]\">\n          <DropdownMenuItem onClick={() => setActiveDialog(\"removeFlag\")}>\n            Remove Flag\n          </DropdownMenuItem>\n          <DropdownMenuItem\n            onClick={() => setActiveDialog(\"delete\")}\n            className=\"text-red-500\"\n          >\n            Delete Comment\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      <AlertDialogContent>{renderDialogContent()}</AlertDialogContent>\n    </AlertDialog>\n  );\n}\n\nexport const toolbar = {};\n\nexport const columns: ColumnDef<CommentSchema>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"id\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Comment ID\" />\n    ),\n    cell: ({ row }) => (\n      <div className=\"w-[80px] max-w-[80px] truncate\">{row.getValue(\"id\")}</div>\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"content\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Content\" />\n    ),\n    cell: ({ row }) => {\n      const content: string = row.getValue(\"content\");\n      return (\n        <div className=\"max-w-[300px] truncate\" title={content}>\n          {content}\n        </div>\n      );\n    },\n  },\n  {\n    accessorKey: \"flag\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Flag\" />\n    ),\n    cell: ({ row }) => {\n      const flagValue: number = row.getValue(\"flag\");\n      return (\n        <div className=\"\">\n          {flagOptions.find((option) => option.value === flagValue.toString())\n            ?.label || flagValue}\n        </div>\n      );\n    },\n    filterFn: (row, id, value) => {\n      return value.includes((row.getValue(id) as string).toString());\n    },\n  },\n  {\n    id: \"actions\",\n    cell: ({ row }) => (\n      <CommentTableRowActions row={row} tableSchema={commentSchema} />\n    ),\n  },\n];\n\n// Export filters for use in the main component\nexport const filters = [\n  {\n    columnId: \"flag\",\n    title: \"Flag\",\n    options: flagOptions,\n  },\n  {\n    columnId: \"upvotes\",\n    title: \"Upvotes\",\n    options: voteCountOptions,\n  },\n  {\n    columnId: \"downvotes\",\n    title: \"Downvotes\",\n    options: voteCountOptions,\n  },\n];\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.mod.reviews._index\route.tsx</source>
<document_content>import React, { useMemo } from \"react\";\nimport { DataTable } from \"@/components/data-table/data-table\";\nimport { ReviewSchema, columns, filters, flagOptions } from \"./table\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { LoaderFunction, json, redirect } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport ErrorComponent from \"@/components/error/500\";\nimport { checkAuthCookie } from \"@/lib/router-guard\";\nimport {\n  AlertTriangle,\n  Flag,\n  Flame,\n  HelpCircle,\n  MessageCircle,\n  XCircle,\n} from \"lucide-react\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport {\n  Cell,\n  Legend,\n  Pie,\n  Tooltip,\n  PieChart,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { ChartConfig, ChartContainer } from \"@/components/ui/chart\";\nimport LoadingComponent from \"@/components/custom/loading\";\n\nexport const ErrorBoundary = () => {\n  //const error = useRouteError();\n  return <ErrorComponent />;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const cookieHeader = request.headers.get(\"Cookie\");\n  if (!checkAuthCookie(request)) return redirect(\"/login\");\n  const res = await fetch(`${process.env.BACKEND_URL}/api/v1/admin/reviews`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Cookie: cookieHeader?.toString() ?? \"\",\n    },\n  });\n  if (!res.ok) throw new Error(\"Oh no! Something went wrong!\");\n  const data = await res.json();\n  return json({\n    items: data as ReviewSchema,\n    success: true,\n  });\n};\n\nexport default function FlaggedReviewsPage() {\n  const reviews = useLoaderData<typeof loader>();\n\n  const flagCounts = useMemo(() => {\n    return (reviews.items as ReviewSchema[]).reduce(\n      (acc, review) => {\n        acc[review.flag] = (acc[review.flag] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n  }, [reviews.items]);\n\n  const highPriorityReviews = useMemo(() => {\n    return (reviews.items as ReviewSchema[]).filter(\n      (review) =>\n        review.flag === \"HARASSMENT\" || review.flag === \"FALSE_INFORMATION\",\n    );\n  }, [reviews.items]);\n\n  return (\n    <div className=\"flex flex-col space-y-8 p-8\">\n      <Header />\n      <div className=\"grid grid-cols-3 gap-4\">\n        <FlagDistributionChart flagCounts={flagCounts} />\n        <InfoPanel\n          totalReviews={reviews.items.length}\n          flagCounts={flagCounts}\n          highPriorityCount={highPriorityReviews.length}\n        />\n      </div>\n      <ClientOnly fallback={<LoadingComponent />}>\n        {() => (\n          <DataTable\n            data={reviews.items ?? []}\n            columns={columns}\n            filters={filters}\n            search=\"content\"\n          />\n        )}\n      </ClientOnly>\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"space-y-1\">\n        <h2 className=\"text-2xl font-semibold tracking-tight\">\n          Flagged Reviews\n        </h2>\n        <p className=\"text-sm text-muted-foreground\">\n          Manage and moderate flagged reviews from users.\n        </p>\n      </div>\n    </div>\n  );\n}\n\ninterface StatCardProps {\n  title: string;\n  value: number;\n  Icon: React.ElementType;\n}\n\nfunction StatCard({ title, value, Icon }: StatCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 py-2 px-3\">\n        <CardTitle className=\"text-xs font-medium\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent className=\"py-2 px-3\">\n        <div className=\"text-xl font-bold\">{value}</div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface FlagDistributionChartProps {\n  flagCounts: Record<string, number>;\n}\n\ninterface FlagCount {\n  name: string;\n  value: number;\n  key: string;\n}\n\n// Define a fixed set of colors for each flag type\nconst FLAG_COLORS = {\n  FALSE_INFORMATION: \"#FF6384\",\n  OTHER: \"#36A2EB\",\n  HARASSMENT: \"#FFCE56\",\n  OFF_TOPIC: \"#4BC0C0\",\n  INAPPROPRIATE_LANGUAGE: \"#9966FF\",\n  SPAM: \"#FF9F40\",\n  // Add more colors for other flag types if needed\n};\n\nconst FlagDistributionChart: React.FC<FlagDistributionChartProps> = ({\n  flagCounts,\n}) => {\n  const data: FlagCount[] = Object.entries(flagCounts)\n    .map(([key, value]) => ({\n      name: flagOptions.find((option) => option.value === key)?.label || key,\n      value: value,\n      key: key, // Keep the original key for color mapping\n    }))\n    .sort((a, b) => b.value - a.value); // Sort data by value in descending order\n\n  const chartConfig: ChartConfig = data.reduce((config, item) => {\n    config[item.key] = {\n      label: item.name,\n      color: FLAG_COLORS[item.key as keyof typeof FLAG_COLORS] || \"#000000\",\n    };\n    return config;\n  }, {} as ChartConfig);\n\n  const renderCustomizedLabel = ({\n    cx,\n    cy,\n    midAngle,\n    innerRadius,\n    outerRadius,\n    percent,\n    index,\n  }: any) => {\n    const RADIAN = Math.PI / 180;\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        fill=\"white\"\n        textAnchor={x > cx ? \"start\" : \"end\"}\n        dominantBaseline=\"central\"\n      >\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    );\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Flag Distribution</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} className=\"min-h-[300px] w-full\">\n          <PieChart>\n            <Pie\n              data={data}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={false}\n              label={renderCustomizedLabel}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n            >\n              {data.map((entry, index) => (\n                <Cell\n                  key={`cell-${index}`}\n                  fill={chartConfig[entry.key].color}\n                />\n              ))}\n            </Pie>\n            <Tooltip\n              formatter={(value: number, name: string, props: any) => {\n                const total = data.reduce((sum, item) => sum + item.value, 0);\n                const percent = ((value / total) * 100).toFixed(1);\n                return [`${value} (${percent}%)`, name];\n              }}\n            />\n            <Legend layout=\"vertical\" align=\"right\" verticalAlign=\"middle\" />\n          </PieChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\ninterface InfoPanelProps {\n  flagCounts: Record<string, number>;\n  totalReviews: number;\n  highPriorityCount: number;\n}\n\nexport function InfoPanel({\n  flagCounts,\n  totalReviews,\n  highPriorityCount,\n}: InfoPanelProps) {\n  return (\n    <Card className=\"col-span-2\">\n      <CardHeader>\n        <CardTitle>Review Statistics</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <StatCard title=\"Total Flagged\" value={totalReviews} Icon={Flag} />\n          <StatCard\n            title=\"Spam\"\n            value={flagCounts[\"SPAM\"] || 0}\n            Icon={MessageCircle}\n          />\n          <StatCard\n            title=\"Inappropriate\"\n            value={flagCounts[\"INAPPROPRIATE_LANGUAGE\"] || 0}\n            Icon={Flame}\n          />\n          <StatCard\n            title=\"Harassment\"\n            value={flagCounts[\"HARASSMENT\"] || 0}\n            Icon={AlertTriangle}\n          />\n          <StatCard\n            title=\"False Information\"\n            value={flagCounts[\"FALSE_INFORMATION\"] || 0}\n            Icon={XCircle}\n          />\n          <StatCard\n            title=\"Other\"\n            value={flagCounts[\"OTHER\"] || 0}\n            Icon={HelpCircle}\n          />\n        </div>\n        <div className=\"mt-4 flex items-center space-x-4\">\n          <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n            <Flag className=\"h-4 w-4\" />\n            <span>{totalReviews} Flagged</span>\n          </Badge>\n          <Badge variant=\"destructive\" className=\"flex items-center space-x-1\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <span>{highPriorityCount} High Priority</span>\n          </Badge>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.mod.reviews._index\table.tsx</source>
<document_content>import React from \"react\";\nimport { z } from \"zod\";\nimport { ColumnDef, Row } from \"@tanstack/react-table\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DataTableColumnHeader } from \"@/components/data-table/data-table-column-header\";\nimport { Button } from \"@/components/custom/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { DotsHorizontalIcon } from \"@radix-ui/react-icons\";\nimport type { ZodSchema } from \"zod\";\nimport {\n  AlertDialog,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogCancel,\n  AlertDialogAction,\n} from \"@/components/ui/alert-dialog\";\nimport { ContextMenuContent } from \"@/components/ui/context-menu\";\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport { toast } from \"sonner\";\n\n// Review schema\nexport const reviewSchema = z.object({\n  id: z.string(),\n  content: z.string(),\n  userId: z.string(),\n  flag: z.string(),\n  upvotes: z.number(),\n  downvotes: z.number(),\n});\n\nexport type ReviewSchema = z.infer<typeof reviewSchema>;\n\n// Flag options for filter\nexport const flagOptions = [\n  { label: \"No Flag\", value: \"NONE\" },\n  { label: \"Spam\", value: \"SPAM\" },\n  { label: \"Inappropriate Language\", value: \"INAPPROPRIATE_LANGUAGE\" },\n  { label: \"Harassment\", value: \"HARASSMENT\" },\n  { label: \"Off-topic\", value: \"OFF_TOPIC\" },\n  { label: \"False Information\", value: \"FALSE_INFORMATION\" },\n  { label: \"Plagiarism\", value: \"PLAGIARISM\" },\n  { label: \"Other\", value: \"OTHER\" },\n];\n\n// Vote count options for filter\nexport const voteCountOptions = [\n  { label: \"Low (0-10)\", value: \"low\" },\n  { label: \"Medium (11-50)\", value: \"medium\" },\n  { label: \"High (>50)\", value: \"high\" },\n];\n\ninterface DialogProps {\n  review: ReviewSchema;\n  onClose: () => void;\n  onAction: () => Promise<void>;\n}\n\nconst RemoveFlagDialog: React.FC<DialogProps> = ({\n  review,\n  onClose,\n  onAction,\n}) => (\n  <>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Remove Flag</AlertDialogTitle>\n      <AlertDialogDescription>\n        Are you sure you want to remove the flag from this review? This action\n        will mark the review as reviewed.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel onClick={onClose}>Cancel</AlertDialogCancel>\n      <AlertDialogAction onClick={onAction}>Remove Flag</AlertDialogAction>\n    </AlertDialogFooter>\n  </>\n);\n\nconst DeleteReviewDialog: React.FC<DialogProps> = ({\n  review,\n  onClose,\n  onAction,\n}) => (\n  <>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Delete Review</AlertDialogTitle>\n      <AlertDialogDescription>\n        Are you sure you want to delete this review? This action cannot be\n        undone.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel onClick={onClose}>Cancel</AlertDialogCancel>\n      <AlertDialogAction onClick={onAction}>Delete Review</AlertDialogAction>\n    </AlertDialogFooter>\n  </>\n);\n\ninterface DataTableRowActionsProps<TData> {\n  row: Row<TData>;\n  tableSchema: ZodSchema<ReviewSchema>;\n}\n\nexport function ReviewTableRowActions<TData>({\n  row,\n  tableSchema,\n}: DataTableRowActionsProps<TData>) {\n  const review = tableSchema.parse(row.original);\n  const [activeDialog, setActiveDialog] = React.useState<string | null>(null);\n\n  const handleAction = async (action: string) => {\n    try {\n      // eslint-disable-next-line\n      let url = `${window.ENV.BACKEND_URL}/api/v1/reviews/${review.id}`;\n      let method = \"PUT\";\n\n      switch (action) {\n        case \"removeFlag\":\n          url += \"/revert\";\n          method = \"PUT\";\n          break;\n        case \"delete\":\n          method = \"DELETE\";\n          break;\n        default:\n          throw new Error(\"Invalid action\");\n      }\n\n      const res = await fetch(url, {\n        method: method,\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(action === \"removeFlag\" ? { flag: \"NONE\" } : {}),\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Oh no! Something went wrong!\");\n      }\n\n      toast.success(\n        `Review ${action === \"removeFlag\" ? \"updated\" : \"deleted\"} successfully`,\n      );\n      window.location.reload();\n    } catch (e) {\n      showErrorToast(e);\n    }\n  };\n\n  const renderDialogContent = () => {\n    switch (activeDialog) {\n      case \"removeFlag\":\n        return (\n          <RemoveFlagDialog\n            review={review}\n            onClose={() => setActiveDialog(null)}\n            onAction={() => handleAction(\"removeFlag\")}\n          />\n        );\n      case \"delete\":\n        return (\n          <DeleteReviewDialog\n            review={review}\n            onClose={() => setActiveDialog(null)}\n            onAction={() => handleAction(\"delete\")}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <AlertDialog\n      open={!!activeDialog}\n      onOpenChange={() => setActiveDialog(null)}\n    >\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            className=\"flex h-8 w-8 p-0 data-[state=open]:bg-muted\"\n          >\n            <DotsHorizontalIcon className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Open menu</span>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-[160px]\">\n          <DropdownMenuItem onClick={() => setActiveDialog(\"removeFlag\")}>\n            Remove Flag\n          </DropdownMenuItem>\n          <DropdownMenuItem\n            onClick={() => setActiveDialog(\"delete\")}\n            className=\"text-red-500\"\n          >\n            Delete Review\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      <AlertDialogContent>{renderDialogContent()}</AlertDialogContent>\n    </AlertDialog>\n  );\n}\n\nexport const toolbar = {};\n\nexport const columns: ColumnDef<ReviewSchema>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"user\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"User Email\" />\n    ),\n    cell: ({ row }) => (\n      <div className=\"w-[80px] max-w-[80px]\">\n        {(row.getValue(\"user\") as BackendUser).email}\n      </div>\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"content\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Content\" />\n    ),\n    cell: ({ row }) => {\n      const content: string = row.getValue(\"content\");\n      return (\n        <div className=\"max-w-[300px] truncate\" title={content}>\n          {content}\n        </div>\n      );\n    },\n  },\n  {\n    accessorKey: \"upvotes\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Upvotes\" />\n    ),\n    cell: ({ row }) => {\n      const upvotes: number = row.getValue(\"upvotes\");\n      return <div className=\"text-green-500\">{upvotes}</div>;\n    },\n  },\n  {\n    accessorKey: \"downvotes\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Downvotes\" />\n    ),\n    cell: ({ row }) => {\n      const downvotes: number = row.getValue(\"downvotes\");\n      return <div className=\"text-red-500\">{downvotes}</div>;\n    },\n  },\n  {\n    accessorKey: \"flag\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Flag\" />\n    ),\n    cell: ({ row }) => {\n      const flagValue: number = row.getValue(\"flag\");\n      return (\n        <div className=\"\">\n          {flagOptions.find((option) => option.value === flagValue.toString())\n            ?.label || flagValue}\n        </div>\n      );\n    },\n    filterFn: (row, id, value) => {\n      return value.includes((row.getValue(id) as string).toString());\n    },\n  },\n  {\n    id: \"actions\",\n    cell: ({ row }) => (\n      <ReviewTableRowActions row={row} tableSchema={reviewSchema} />\n    ),\n  },\n];\n\n// Export filters for use in the main component\nexport const filters = [\n  {\n    columnId: \"flag\",\n    title: \"Flag\",\n    options: flagOptions,\n  },\n  {\n    columnId: \"upvotes\",\n    title: \"Upvotes\",\n    options: voteCountOptions,\n  },\n  {\n    columnId: \"downvotes\",\n    title: \"Downvotes\",\n    options: voteCountOptions,\n  },\n];\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.mod.tickets._index\route.tsx</source>
<document_content>import React, { useMemo } from \"react\";\nimport { DataTable } from \"@/components/data-table/data-table\";\nimport {\n  SupportTicketSchema,\n  columns,\n  filters,\n  supportTicketSchema,\n} from \"./table\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { LoaderFunction, json, redirect } from \"@remix-run/node\";\nimport { useLoaderData, useRouteError } from \"@remix-run/react\";\nimport ErrorComponent from \"@/components/error/500\";\nimport { checkAuthCookie } from \"@/lib/router-guard\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Cell,\n} from \"recharts\";\nimport { ChartConfig, ChartContainer } from \"@/components/ui/chart\";\nimport {\n  AlertCircle,\n  CheckCircle,\n  Clock,\n  HelpCircle,\n  Users,\n  XCircle,\n} from \"lucide-react\";\nimport LoadingComponent from \"@/components/custom/loading\";\n\nexport const ErrorBoundary = () => {\n  return <ErrorComponent />;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const cookieHeader = request.headers.get(\"Cookie\");\n  if (!checkAuthCookie(request)) return redirect(\"/login\");\n  const res = await fetch(`${process.env.BACKEND_URL}/api/v1/support/tickets`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Cookie: cookieHeader?.toString() ?? \"\",\n    },\n  });\n  if (!res.ok) throw new Error(\"Oh no! Something went wrong!\");\n  const data = await res.json();\n  return json({\n    items: data.tickets,\n    success: true,\n  });\n};\n\nexport default function SupportTicketsPage() {\n  const { items } = useLoaderData<typeof loader>();\n\n  const supportTickets = useMemo(() => {\n    return items.map((item: unknown) => supportTicketSchema.parse(item));\n  }, [items]);\n\n  const statusCounts = useMemo(() => {\n    return supportTickets.reduce(\n      (acc: Record<string, number>, ticket: SupportTicketSchema) => {\n        acc[ticket.status] = (acc[ticket.status] || 0) + 1;\n        return acc;\n      },\n      {},\n    );\n  }, [supportTickets]);\n\n  const typeCounts = useMemo(() => {\n    return supportTickets.reduce(\n      (acc: Record<string, number>, ticket: SupportTicketSchema) => {\n        acc[ticket.type] = (acc[ticket.type] || 0) + 1;\n        return acc;\n      },\n      {},\n    );\n  }, [supportTickets]);\n\n  return (\n    <div className=\"flex flex-col space-y-8 p-8\">\n      <Header />\n      <div className=\"grid grid-cols-3 gap-4\">\n        <TypeDistributionChart typeCounts={typeCounts} />\n        <InfoPanel\n          totalTickets={supportTickets.length}\n          statusCounts={statusCounts}\n          typeCounts={typeCounts}\n        />\n      </div>\n      <ClientOnly fallback={<LoadingComponent />}>\n        {() => (\n          <DataTable\n            data={supportTickets}\n            columns={columns}\n            filters={filters}\n            search=\"email\"\n          />\n        )}\n      </ClientOnly>\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"space-y-1\">\n        <h2 className=\"text-2xl font-semibold tracking-tight\">\n          Support Tickets\n        </h2>\n        <p className=\"text-sm text-muted-foreground\">\n          Manage and respond to customer support tickets.\n        </p>\n      </div>\n    </div>\n  );\n}\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  Icon: React.ElementType;\n}\n\nfunction StatCard({ title, value, Icon }: StatCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 py-2 px-3\">\n        <CardTitle className=\"text-xs font-medium\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent className=\"py-2 px-3\">\n        <div className=\"text-xl font-bold\">{value}</div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface TypeDistributionChartProps {\n  typeCounts: Record<string, number>;\n}\n\nconst TYPE_COLORS = {\n  general: \"#FFCE56\",\n  technical: \"#FF6384\",\n  payment: \"#36A2EB\",\n};\n\nconst TypeDistributionChart: React.FC<TypeDistributionChartProps> = ({\n  typeCounts,\n}) => {\n  const data = Object.entries(typeCounts).map(([type, count]) => ({\n    name: type,\n    count: count,\n  }));\n\n  const chartConfig: ChartConfig = {\n    general: { label: \"General\", color: TYPE_COLORS.general },\n    technical: { label: \"Technical\", color: TYPE_COLORS.technical },\n    payment: { label: \"Payment\", color: TYPE_COLORS.payment },\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Ticket Type Distribution</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} className=\"min-h-[300px] w-full\">\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={data}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"count\" fill=\"#8884d8\">\n                {data.map((entry, index) => (\n                  <Cell\n                    key={`cell-${index}`}\n                    fill={TYPE_COLORS[entry.name as keyof typeof TYPE_COLORS]}\n                  />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\ninterface InfoPanelProps {\n  totalTickets: number;\n  statusCounts: Record<string, number>;\n  typeCounts: Record<string, number>;\n}\n\nfunction InfoPanel({ totalTickets, statusCounts, typeCounts }: InfoPanelProps) {\n  return (\n    <Card className=\"col-span-2\">\n      <CardHeader>\n        <CardTitle>Support Ticket Statistics</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-3 gap-4\">\n          <StatCard title=\"Total Tickets\" value={totalTickets} Icon={Users} />\n          <StatCard\n            title=\"In Progress\"\n            value={statusCounts[\"inProgress\"] || 0}\n            Icon={Clock}\n          />\n          <StatCard\n            title=\"Done\"\n            value={statusCounts[\"done\"] || 0}\n            Icon={CheckCircle}\n          />\n          <StatCard\n            title=\"To Do\"\n            value={statusCounts[\"todo\"] || 0}\n            Icon={AlertCircle}\n          />\n          <StatCard\n            title=\"Backlog\"\n            value={statusCounts[\"backlog\"] || 0}\n            Icon={XCircle}\n          />\n          <StatCard\n            title=\"General\"\n            value={typeCounts[\"general\"] || 0}\n            Icon={HelpCircle}\n          />\n        </div>\n        <div className=\"mt-4 flex items-center space-x-4\">\n          <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n            <Users className=\"h-4 w-4\" />\n            <span>{totalTickets} Total Tickets</span>\n          </Badge>\n          <Badge variant=\"warning\" className=\"flex items-center space-x-1\">\n            <Clock className=\"h-4 w-4\" />\n            <span>{statusCounts[\"inProgress\"] || 0} In Progress</span>\n          </Badge>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.mod.tickets._index\table.tsx</source>
<document_content>import React, { useState } from \"react\";\nimport { z } from \"zod\";\nimport { ColumnDef, Row } from \"@tanstack/react-table\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DataTableColumnHeader } from \"@/components/data-table/data-table-column-header\";\nimport { Button } from \"@/components/custom/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { DotsHorizontalIcon } from \"@radix-ui/react-icons\";\nimport type { ZodSchema } from \"zod\";\nimport {\n  AlertDialog,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogCancel,\n  AlertDialogAction,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport { toast } from \"sonner\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\n// Define the schema for the support ticket\nexport const supportTicketSchema = z.object({\n  id: z.string(),\n  email: z.string().email(),\n  title: z.string(),\n  content: z.string(),\n  status: z.enum([\"inProgress\", \"todo\", \"backlog\", \"done\"]),\n  type: z.enum([\"general\", \"technical\", \"payment\"]),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\nexport type SupportTicketSchema = z.infer<typeof supportTicketSchema>;\n\n// Status options for filter\nexport const statusOptions = [\n  { label: \"In Progress\", value: \"inProgress\" },\n  { label: \"To Do\", value: \"todo\" },\n  { label: \"Backlog\", value: \"backlog\" },\n  { label: \"Done\", value: \"done\" },\n];\n\n// Type options for filter\nexport const typeOptions = [\n  { label: \"General\", value: \"general\" },\n  { label: \"Technical\", value: \"technical\" },\n  { label: \"Payment\", value: \"payment\" },\n];\n\ninterface DialogProps {\n  supportTicket: SupportTicketSchema;\n  onClose: () => void;\n  onAction: (action: string) => Promise<void>;\n}\n\nconst UpdateSupportTicketDialog: React.FC<DialogProps> = ({\n  supportTicket,\n  onClose,\n  onAction,\n}) => {\n  const [selectedStatus, setSelectedStatus] = useState(supportTicket.status);\n\n  const statusOptions = [\n    { label: \"In Progress\", value: \"inProgress\" },\n    { label: \"To Do\", value: \"todo\" },\n    { label: \"Backlog\", value: \"backlog\" },\n    { label: \"Done\", value: \"done\" },\n  ];\n\n  const handleStatusChange = (value: string) => {\n    setSelectedStatus(value);\n  };\n\n  const handleSubmit = () => {\n    onAction(selectedStatus);\n  };\n  return (\n    <>\n      <AlertDialogHeader>\n        <AlertDialogTitle>Update Support Ticket</AlertDialogTitle>\n        <AlertDialogDescription>\n          Please review the following information before updating the support\n          ticket.\n        </AlertDialogDescription>\n      </AlertDialogHeader>\n      <div className=\"grid gap-4 py-4\">\n        <div className=\"grid grid-cols-4 items-center gap-4\">\n          <Label className=\"text-right\">Title:</Label>\n          <span className=\"col-span-3\">{supportTicket.title}</span>\n        </div>\n        <div className=\"grid grid-cols-4 items-center gap-4\">\n          <Label className=\"text-right\">Email:</Label>\n          <span className=\"col-span-3\">{supportTicket.email}</span>\n        </div>\n        <div className=\"grid grid-cols-4 items-center gap-4\">\n          <Label className=\"text-right\">Type:</Label>\n          <span className=\"col-span-3\">{supportTicket.type}</span>\n        </div>\n        <div className=\"grid grid-cols-4 items-center gap-4\">\n          <Label className=\"text-right\">Status:</Label>\n          <Select\n            onValueChange={handleStatusChange}\n            defaultValue={supportTicket.status}\n          >\n            <SelectTrigger className=\"col-span-3\">\n              <SelectValue placeholder=\"Select status\" />\n            </SelectTrigger>\n            <SelectContent>\n              {statusOptions.map((option) => (\n                <SelectItem key={option.value} value={option.value}>\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"grid grid-cols-4 items-start gap-4\">\n          <Label className=\"text-right\">Content:</Label>\n          <ScrollArea className=\"col-span-3 h-[100px] w-full rounded-md border p-2\">\n            <p>{supportTicket.content}</p>\n          </ScrollArea>\n        </div>\n      </div>\n      <AlertDialogFooter>\n        <AlertDialogCancel onClick={onClose}>Cancel</AlertDialogCancel>\n        <AlertDialogAction onClick={handleSubmit}>\n          Update Status\n        </AlertDialogAction>\n      </AlertDialogFooter>\n    </>\n  );\n};\n\ninterface DataTableRowActionsProps<TData> {\n  row: Row<TData>;\n  tableSchema: ZodSchema<SupportTicketSchema>;\n}\n\nexport function SupportTicketTableRowActions<TData>({\n  row,\n  tableSchema,\n}: DataTableRowActionsProps<TData>) {\n  const supportTicket = tableSchema.parse(row.original);\n  const [activeDialog, setActiveDialog] = useState<string | null>(null);\n\n  const handleAction = async (status: string) => {\n    try {\n      const url = `${window.ENV.BACKEND_URL}/api/v1/support/ticket/${supportTicket.id}`;\n      const res = await fetch(url, {\n        method: \"PUT\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ status }),\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Oh no! Something went wrong!\");\n      }\n\n      toast.success(`Support ticket updated successfully`);\n      window.location.reload();\n    } catch (e) {\n      showErrorToast(e);\n    }\n  };\n\n  const renderDialogContent = () => {\n    switch (activeDialog) {\n      case \"update\":\n        return (\n          <UpdateSupportTicketDialog\n            supportTicket={supportTicket}\n            onClose={() => setActiveDialog(null)}\n            onAction={handleAction}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <AlertDialog\n      open={!!activeDialog}\n      onOpenChange={() => setActiveDialog(null)}\n    >\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            className=\"flex h-8 w-8 p-0 data-[state=open]:bg-muted\"\n          >\n            <DotsHorizontalIcon className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Open menu</span>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-[160px]\">\n          <DropdownMenuItem onClick={() => setActiveDialog(\"update\")}>\n            Update Status\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      <AlertDialogContent>{renderDialogContent()}</AlertDialogContent>\n    </AlertDialog>\n  );\n}\n\nexport const columns: ColumnDef<SupportTicketSchema>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"User Email\" />\n    ),\n    cell: ({ row }) => (\n      <div className=\"max-w-[200px] truncate\">{row.getValue(\"email\")}</div>\n    ),\n    enableSorting: true,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"title\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Title\" />\n    ),\n    cell: ({ row }) => <div className=\"\">{row.getValue(\"title\")}</div>,\n  },\n  {\n    accessorKey: \"type\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Type\" />\n    ),\n    cell: ({ row }) => <div className=\"\">{row.getValue(\"type\")}</div>,\n    filterFn: (row, id, value) => {\n      return value.includes(row.getValue(id));\n    },\n  },\n  {\n    accessorKey: \"status\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Status\" />\n    ),\n    cell: ({ row }) => <div className=\"\">{row.getValue(\"status\")}</div>,\n    filterFn: (row, id, value) => {\n      return value.includes(row.getValue(id));\n    },\n  },\n  {\n    accessorKey: \"createdAt\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Created At\" />\n    ),\n    cell: ({ row }) => (\n      <div>{new Date(row.getValue<string>(\"createdAt\")).toLocaleString()}</div>\n    ),\n  },\n  {\n    accessorKey: \"updatedAt\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Updated At\" />\n    ),\n    cell: ({ row }) => (\n      <div>{new Date(row.getValue<string>(\"updatedAt\")).toLocaleString()}</div>\n    ),\n  },\n  {\n    id: \"actions\",\n    cell: ({ row }) => (\n      <SupportTicketTableRowActions\n        row={row}\n        tableSchema={supportTicketSchema}\n      />\n    ),\n  },\n];\n\n// Export filters for use in the main component\nexport const filters = [\n  {\n    columnId: \"status\",\n    title: \"Status\",\n    options: statusOptions,\n  },\n  {\n    columnId: \"type\",\n    title: \"Type\",\n    options: typeOptions,\n  },\n];\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.mod._index\route.tsx</source>
<document_content>import React from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { DataTable } from \"@/components/data-table/data-table\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { LoaderFunction, json, redirect } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport ErrorComponent from \"@/components/error/500\";\nimport { checkAuthCookie } from \"@/lib/router-guard\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Bar, BarChart, ResponsiveContainer, XAxis, YAxis } from \"recharts\";\nimport { z } from \"zod\";\nimport { ColumnDef } from \"@tanstack/react-table\";\nimport { DataTableColumnHeader } from \"@/components/data-table/data-table-column-header\";\n\n// Updated schema to match the moderator dashboard structure\nconst moderatorDashboardDataSchema = z.object({\n  contentModerationOverview: z.object({\n    totalFlaggedContent: z.number(),\n    awaitingModeration: z.number(),\n    recentFlaggedContent: z.array(\n      z.object({\n        id: z.string(),\n        content: z.string(),\n        flag: z.enum([\n          \"SPAM\",\n          \"INAPPROPRIATE_LANGUAGE\",\n          \"HARASSMENT\",\n          \"OFF_TOPIC\",\n          \"FALSE_INFORMATION\",\n          \"OTHER\",\n        ]),\n        user: z.object({ email: z.string() }),\n      }),\n    ),\n  }),\n  moderationActivity: z.object({\n    moderatedLast24Hours: z.number(),\n    moderatedLast7Days: z.number(),\n    moderatedLast30Days: z.number(),\n  }),\n  userReportManagement: z.object({\n    recentReports: z.array(\n      z.object({\n        id: z.string(),\n        reason: z.string(),\n        status: z.enum([\"OPEN\", \"CLOSED\", \"IN_PROGRESS\"]),\n        reporter: z.object({ email: z.string() }),\n        reportedUser: z.object({ email: z.string() }),\n        createdAt: z.string(),\n      }),\n    ),\n    openReports: z.number(),\n  }),\n  contentAnalytics: z.object({\n    activeDiscussions: z.array(\n      z.object({\n        id: z.string(),\n        name: z.string(),\n        _count: z.object({ comments: z.number() }),\n      }),\n    ),\n    trendingTopics: z.array(z.string()),\n  }),\n  userManagement: z.object({\n    recentBans: z.array(\n      z.object({\n        id: z.string(),\n        email: z.string(),\n        bannedUntil: z.string(),\n      }),\n    ),\n    usersWithMultipleFlags: z.array(\n      z.object({\n        id: z.string(),\n        email: z.string(),\n        _count: z.object({\n          reviews: z.number(),\n          comments: z.number(),\n        }),\n      }),\n    ),\n  }),\n  reviewAndCommentMetrics: z.object({\n    totalReviews: z.number(),\n    totalComments: z.number(),\n    averageRating: z.number(),\n    ratingDistribution: z.record(z.number()),\n  }),\n  moderationQueue: z.object({\n    pendingReviews: z.array(\n      z.object({\n        id: z.string(),\n        content: z.string(),\n        user: z.object({ email: z.string() }),\n        createdAt: z.string(),\n      }),\n    ),\n    pendingComments: z.array(\n      z.object({\n        id: z.string(),\n        content: z.string(),\n        user: z.object({ email: z.string() }),\n        createdAt: z.string(),\n      }),\n    ),\n  }),\n  moderatorPerformance: z.object({\n    totalModeratedItems: z.number(),\n    averageResponseTime: z.number(),\n  }),\n});\n\ntype ModeratorDashboardData = z.infer<typeof moderatorDashboardDataSchema>;\n\nexport const ErrorBoundary = () => {\n  return <ErrorComponent />;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const cookieHeader = request.headers.get(\"Cookie\");\n  if (!checkAuthCookie(request)) return redirect(\"/login\");\n  const res = await fetch(\n    `${process.env.BACKEND_URL}/api/v1/moderator/dashboard`,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Cookie: cookieHeader?.toString() ?? \"\",\n      },\n    },\n  );\n  if (!res.ok) throw new Error(\"Failed to fetch moderator dashboard data\");\n  const data = await res.json();\n  return json(moderatorDashboardDataSchema.parse(data));\n};\n\nconst recentFlaggedContentColumns: ColumnDef<\n  ModeratorDashboardData[\"contentModerationOverview\"][\"recentFlaggedContent\"][number]\n>[] = [\n  {\n    accessorKey: \"user.email\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"User Email\" />\n    ),\n  },\n  {\n    accessorKey: \"content\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Content\" />\n    ),\n    cell: ({ row }) => row.getValue<string>(\"content\").substring(0, 50) + \"...\",\n  },\n  {\n    accessorKey: \"flag\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Flag\" />\n    ),\n  },\n];\n\nconst flaggedContentFilters = [\n  {\n    columnId: \"flag\",\n    title: \"Flag Type\",\n    options: [\n      { label: \"Spam\", value: \"SPAM\" },\n      { label: \"Inappropriate Language\", value: \"INAPPROPRIATE_LANGUAGE\" },\n      { label: \"Harassment\", value: \"HARASSMENT\" },\n      { label: \"Off Topic\", value: \"OFF_TOPIC\" },\n      { label: \"False Information\", value: \"FALSE_INFORMATION\" },\n      { label: \"Other\", value: \"OTHER\" },\n    ],\n  },\n];\n\nexport default function ModeratorDashboard() {\n  const dashboardData = useLoaderData<ModeratorDashboardData>();\n\n  return (\n    <div className=\"space-y-4 p-8\">\n      <h1 className=\"text-2xl font-bold\">Moderator Dashboard</h1>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <MetricCard\n          title=\"Total Flagged Content\"\n          value={dashboardData.contentModerationOverview.totalFlaggedContent}\n        />\n        <MetricCard\n          title=\"Awaiting Moderation\"\n          value={dashboardData.contentModerationOverview.awaitingModeration}\n        />\n        <MetricCard\n          title=\"Moderated (24h)\"\n          value={dashboardData.moderationActivity.moderatedLast24Hours}\n        />\n        <MetricCard\n          title=\"Open Reports\"\n          value={dashboardData.userReportManagement.openReports}\n        />\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Moderation Activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={350}>\n              <BarChart\n                data={[\n                  {\n                    name: \"Last 24h\",\n                    value:\n                      dashboardData.moderationActivity.moderatedLast24Hours,\n                  },\n                  {\n                    name: \"Last 7d\",\n                    value: dashboardData.moderationActivity.moderatedLast7Days,\n                  },\n                  {\n                    name: \"Last 30d\",\n                    value: dashboardData.moderationActivity.moderatedLast30Days,\n                  },\n                ]}\n              >\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Bar dataKey=\"value\" fill=\"#8884d8\" name=\"Moderated Items\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Review Ratings Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={350}>\n              <BarChart\n                data={Object.entries(\n                  dashboardData.reviewAndCommentMetrics.ratingDistribution,\n                ).map(([rating, count]) => ({ rating: Number(rating), count }))}\n              >\n                <XAxis dataKey=\"rating\" />\n                <YAxis />\n                <Bar dataKey=\"count\" fill=\"#82ca9d\" name=\"Number of Reviews\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Flagged Content</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ClientOnly fallback={<LoadingComponent />}>\n            {() => (\n              <DataTable\n                data={\n                  dashboardData.contentModerationOverview.recentFlaggedContent\n                }\n                columns={recentFlaggedContentColumns}\n                filters={flaggedContentFilters}\n                search=\"user.email\"\n              />\n            )}\n          </ClientOnly>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Moderation Queue</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <h3 className=\"text-lg font-semibold mb-2\">Pending Reviews</h3>\n            <ul className=\"space-y-2\">\n              {dashboardData.moderationQueue.pendingReviews\n                .slice(0, 5)\n                .map((review) => (\n                  <li key={review.id} className=\"text-sm\">\n                    <span className=\"font-medium\">{review.user.email}</span>:{\" \"}\n                    {review.content.substring(0, 50)}...\n                  </li>\n                ))}\n            </ul>\n            <h3 className=\"text-lg font-semibold mt-4 mb-2\">\n              Pending Comments\n            </h3>\n            <ul className=\"space-y-2\">\n              {dashboardData.moderationQueue.pendingComments\n                .slice(0, 5)\n                .map((comment) => (\n                  <li key={comment.id} className=\"text-sm\">\n                    <span className=\"font-medium\">{comment.user.email}</span>:{\" \"}\n                    {comment.content.substring(0, 50)}...\n                  </li>\n                ))}\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>User Management</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <h3 className=\"text-lg font-semibold mb-2\">Recent Bans</h3>\n            <ul className=\"space-y-2\">\n              {dashboardData.userManagement.recentBans.map((ban) => (\n                <li key={ban.id} className=\"text-sm\">\n                  <span className=\"font-medium\">{ban.email}</span> - Banned\n                  until: {new Date(ban.bannedUntil).toLocaleDateString()}\n                </li>\n              ))}\n            </ul>\n            <h3 className=\"text-lg font-semibold mt-4 mb-2\">\n              Users with Multiple Flags\n            </h3>\n            <ul className=\"space-y-2\">\n              {dashboardData.userManagement.usersWithMultipleFlags.map(\n                (user) => (\n                  <li key={user.id} className=\"text-sm\">\n                    <span className=\"font-medium\">{user.email}</span> - Flags:{\" \"}\n                    {user._count.reviews + user._count.comments}\n                  </li>\n                ),\n              )}\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <MetricCard\n          title=\"Average Rating\"\n          value={dashboardData.reviewAndCommentMetrics.averageRating.toFixed(2)}\n        />\n        <MetricCard\n          title=\"Avg. Response Time\"\n          value={`${dashboardData.moderatorPerformance.averageResponseTime.toFixed(2)}h`}\n        />\n      </div>\n    </div>\n  );\n}\n\ninterface MetricCardProps {\n  title: string;\n  value: number | string;\n}\n\nfunction MetricCard({ title, value }: MetricCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction LoadingComponent() {\n  return (\n    <div className=\"flex h-screen w-screen items-center justify-center\">\n      <div className=\"flex flex-col items-center space-y-4\">\n        <p className=\"text-gray-500 dark:text-gray-400\">\n          Please wait while we are preparing the content\n        </p>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-4 w-[250px]\" />\n            <Skeleton className=\"h-4 w-[200px]\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.seller.payouts._index\route.tsx</source>
<document_content>import React, { useState, useEffect } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { DataTable } from \"@/components/data-table/data-table\";\nimport { columns, filters, sellerPayoutRequestSchema } from \"./table\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { LoaderFunction, json, redirect } from \"@remix-run/node\";\nimport { useLoaderData, useRouteError } from \"@remix-run/react\";\nimport ErrorComponent from \"@/components/error/500\";\nimport { checkAuthCookie } from \"@/lib/router-guard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { toast } from \"sonner\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { showErrorToast } from \"@/lib/handle-error\";\n\n// Define a schema for the seller's balance\nconst sellerBalanceSchema = z.object({\n  balance: z.number(),\n  lastPayoutRequestDate: z.string(),\n});\n\ntype SellerBalance = z.infer<typeof sellerBalanceSchema>;\n\n// Hard-coded minimum payout amount\nconst MINIMUM_PAYOUT_AMOUNT = 50;\n\nexport const ErrorBoundary = () => {\n  const error = useRouteError();\n  return <ErrorComponent />;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const cookieHeader = request.headers.get(\"Cookie\");\n  if (!checkAuthCookie(request)) return redirect(\"/login\");\n\n  const res = await fetch(\n    `${process.env.BACKEND_URL}/api/v1/seller/payout-requests`,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Cookie: cookieHeader?.toString() ?? \"\",\n      },\n    },\n  );\n\n  if (!res.ok) throw new Error(\"Oh no! Something went wrong!\");\n\n  const data = await res.json();\n  const validatedData = z.array(sellerPayoutRequestSchema).parse(data);\n\n  return json({\n    items: validatedData,\n    success: true,\n  });\n};\n\nexport default function SellerPayoutRequestsPage() {\n  const { items } = useLoaderData<typeof loader>();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [sellerBalance, setSellerBalance] = useState<SellerBalance | null>(\n    null,\n  );\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const payoutRequestFormSchema = z.object({\n    amount: z\n      .number()\n      .min(\n        MINIMUM_PAYOUT_AMOUNT,\n        `Minimum payout amount is $${MINIMUM_PAYOUT_AMOUNT}`,\n      )\n      .refine((val) => val <= (sellerBalance?.balance || 0), {\n        message: \"Amount cannot exceed your available balance\",\n      }),\n  });\n  type PayoutRequestFormData = z.infer<typeof payoutRequestFormSchema>;\n\n  const form = useForm<PayoutRequestFormData>({\n    resolver: zodResolver(payoutRequestFormSchema),\n    defaultValues: {\n      amount: MINIMUM_PAYOUT_AMOUNT,\n    },\n  });\n\n  useEffect(() => {\n    fetchSellerBalance();\n  }, []);\n\n  const fetchSellerBalance = async () => {\n    try {\n      const res = await fetch(\n        `${window.ENV.BACKEND_URL}/api/v1/seller/balance`,\n        {\n          credentials: \"include\",\n        },\n      );\n      if (!res.ok) throw new Error(\"Failed to fetch seller balance\");\n      const data = await res.json();\n      const validatedData = sellerBalanceSchema.parse(data);\n      setSellerBalance(validatedData);\n    } catch (error) {\n      showErrorToast(error);\n    }\n  };\n\n  const handlePayoutRequest = async (data: PayoutRequestFormData) => {\n    if (isSubmitting) return;\n\n    setIsSubmitting(true);\n    try {\n      const res = await fetch(\n        `${window.ENV.BACKEND_URL}/api/v1/seller/payout-requests`,\n        {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ totalAmount: data.amount }),\n        },\n      );\n\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || \"Failed to submit payout request\");\n      }\n\n      toast.success(\"Payout request submitted successfully\");\n      setIsDialogOpen(false);\n      form.reset();\n      await fetchSellerBalance();\n      // Refetch the payout requests here if needed\n    } catch (error) {\n      showErrorToast(error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const isEligibleForPayout =\n    sellerBalance && sellerBalance.balance >= MINIMUM_PAYOUT_AMOUNT;\n\n  const isWithinCooldownPeriod = sellerBalance?.lastPayoutRequestDate\n    ? new Date().getTime() -\n        new Date(sellerBalance.lastPayoutRequestDate).getTime() <\n      7 * 24 * 60 * 60 * 1000\n    : false;\n\n  const getEligibilityStatus = () => {\n    if (isWithinCooldownPeriod) return { status: \"Cooldown\", color: \"yellow\" };\n    if (!isEligibleForPayout) return { status: \"Not Eligible\", color: \"red\" };\n    return { status: \"Eligible\", color: \"green\" };\n  };\n\n  const { status, color } = getEligibilityStatus();\n\n  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    // Remove leading zeros and non-numeric characters\n    const sanitizedValue = value.replace(/^0+/, \"\").replace(/[^0-9.]/g, \"\");\n\n    // Ensure there's only one decimal point\n    const parts = sanitizedValue.split(\".\");\n    const formattedValue =\n      parts[0] + (parts.length > 1 ? \".\" + parts[1].slice(0, 2) : \"\");\n\n    // Update the form\n    form.setValue(\n      \"amount\",\n      formattedValue === \"\" ? 0 : parseFloat(formattedValue),\n    );\n  };\n\n  return (\n    <div className=\"-mx-4 flex-1 overflow-auto px-4 py-1 lg:flex-row lg:space-x-12 lg:space-y-0\">\n      <ClientOnly fallback={<LoadingComponent />}>\n        {() => (\n          <>\n            <div className=\"flex justify-between items-center mb-4\">\n              <div className=\"flex items-center space-x-4\">\n                <h2 className=\"text-2xl font-bold\">Your Payout Requests</h2>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Badge\n                  variant={color as \"default\" | \"secondary\" | \"destructive\"}\n                >\n                  {status}\n                </Badge>\n                <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button\n                      disabled={!isEligibleForPayout || isWithinCooldownPeriod}\n                    >\n                      Request Payout\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Request Payout</DialogTitle>\n                      <DialogDescription>\n                        Enter the amount you want to request for payout. Your\n                        current balance: ${sellerBalance?.balance.toFixed(2)}\n                        <br />\n                        <br />\n                        You will not be eligible for another payout request\n                        within 7 days once you submit this request.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...form}>\n                      <form\n                        onSubmit={form.handleSubmit(handlePayoutRequest)}\n                        className=\"space-y-8\"\n                      >\n                        <FormField\n                          control={form.control}\n                          name=\"amount\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Amount</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"text\"\n                                  inputMode=\"decimal\"\n                                  {...field}\n                                  onChange={handleAmountChange}\n                                  value={field.value === 0 ? \"\" : field.value}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <DialogFooter>\n                          <Button type=\"submit\" disabled={isSubmitting}>\n                            {isSubmitting ? \"Submitting...\" : \"Submit Request\"}\n                          </Button>\n                        </DialogFooter>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n            <DataTable\n              data={items ?? []}\n              columns={columns}\n              filters={filters}\n              search=\"id\"\n            />\n          </>\n        )}\n      </ClientOnly>\n    </div>\n  );\n}\n\nfunction LoadingComponent() {\n  return (\n    <div className=\"flex h-screen w-screen items-center justify-center\">\n      <div className=\"flex flex-col items-center space-y-4\">\n        <p className=\"text-gray-500 dark:text-gray-400\">\n          Please wait while we are preparing the content\n        </p>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-4 w-[250px]\" />\n            <Skeleton className=\"h-4 w-[200px]\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.seller.payouts._index\table.tsx</source>
<document_content>import { z } from \"zod\";\nimport { ColumnDef } from \"@tanstack/react-table\";\nimport { DataTableColumnHeader } from \"@/components/data-table/data-table-column-header\";\n\n// Define the schema for the seller's payout request\nexport const sellerPayoutRequestSchema = z.object({\n  id: z.string(),\n  totalAmount: z.number(),\n  status: z.enum([\"PENDING\", \"REJECTED\", \"PROCESSED\"]),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  processedAt: z.string().nullable(),\n});\n\nexport type SellerPayoutRequestSchema = z.infer<\n  typeof sellerPayoutRequestSchema\n>;\n\n// Status options for filter\nexport const statusOptions = [\n  { label: \"Pending\", value: \"PENDING\" },\n  { label: \"Rejected\", value: \"REJECTED\" },\n  { label: \"Processed\", value: \"PROCESSED\" },\n];\n\n// Define the columns for the seller's payout request table\nexport const columns: ColumnDef<SellerPayoutRequestSchema>[] = [\n  {\n    accessorKey: \"id\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Request ID\" />\n    ),\n    cell: ({ row }) => <div className=\"font-medium\">{row.getValue(\"id\")}</div>,\n  },\n  {\n    accessorKey: \"totalAmount\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Amount\" />\n    ),\n    cell: ({ row }) => (\n      <div className=\"\">\n        RM {row.getValue<number>(\"totalAmount\").toFixed(2)}\n      </div>\n    ),\n  },\n  {\n    accessorKey: \"status\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Status\" />\n    ),\n    cell: ({ row }) => <div>{row.getValue(\"status\")}</div>,\n    filterFn: (row, id, value) => {\n      return value.includes(row.getValue(id));\n    },\n  },\n  {\n    accessorKey: \"createdAt\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Requested At\" />\n    ),\n    cell: ({ row }) => (\n      <div>{new Date(row.getValue<string>(\"createdAt\")).toLocaleString()}</div>\n    ),\n  },\n  {\n    accessorKey: \"processedAt\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Processed At\" />\n    ),\n    cell: ({ row }) => {\n      const processedAt = row.getValue<string | null>(\"processedAt\");\n      return processedAt ? (\n        <div>{new Date(processedAt).toLocaleString()}</div>\n      ) : (\n        <div>Not processed</div>\n      );\n    },\n  },\n];\n\n// Define the filters for the table\nexport const filters = [\n  {\n    columnId: \"status\",\n    title: \"Status\",\n    options: statusOptions,\n  },\n];\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.seller.repos.$id.edit._index\route.tsx</source>
<document_content>import { useRef, useState, useEffect, useCallback } from \"react\";\nimport { injectCSS, injectTailwind } from \"@/integrations/monaco/inject-css\";\nimport { toast } from \"sonner\";\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@/components/ui/resizable\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useMonacoStore } from \"@/stores/monaco-store\";\nimport type { OnChange, OnMount } from \"@monaco-editor/react\";\nimport { LiveProvider, LiveError } from \"react-live\";\nimport Editor, { loader as monacoLoader } from \"@monaco-editor/react\";\nimport type {\n  IStandaloneCodeEditor,\n  Monaco,\n} from \"@/integrations/monaco/native.types\";\nimport { Layout, LayoutBody, LayoutHeader } from \"@/components/custom/layout\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { Link, json, useLoaderData, useParams } from \"@remix-run/react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { LoaderFunction } from \"@remix-run/node\";\nimport IframeRenderer from \"@/components/repo/editor-preview\";\nimport { EditorMenubar } from \"@/components/repo/editor-menubar\";\nimport { MonacoLoading } from \"@/components/repo/loading\";\nimport { useDebounce } from \"@/hooks/use-debounce\";\nimport type { Repo } from \"@/components/repo/card-repo-seller\";\nimport {\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { setupLanguageService } from \"@/integrations/monaco/native.utils\";\nimport { readStream } from \"@/lib/utils\";\nimport CodeAnalysis, {\n  PrivateCodeCheckResult,\n} from \"@/components/repo/code-analysis\";\nimport { CodeCheckProgressDialog } from \"@/components/repo/code-check-progress\";\n\nmonacoLoader.config({\n  paths: {\n    vs: \"https://cdn.jsdelivr.net/npm/monaco-editor@0.43.0/min/vs\",\n  },\n});\n\n// Add Remix loader\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  const { id } = params;\n  if (!id) {\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n  const cookieHeader = request.headers.get(\"Cookie\");\n\n  const response = await fetch(`${process.env.BACKEND_URL}/api/v1/repo/${id}`, {\n    credentials: \"include\",\n    headers: {\n      Cookie: cookieHeader?.toString() || \"\",\n    },\n  });\n\n  if (!response.ok) {\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n\n  const data = await response.json();\n\n  // Fetch code analysis data\n  const analysisResponse = await fetch(\n    `${process.env.BACKEND_URL}/api/v1/code-analysis/${id}`,\n    {\n      credentials: \"include\",\n      headers: {\n        Cookie: cookieHeader?.toString() || \"\",\n      },\n    },\n  );\n\n  let codeAnalysis = null;\n  if (analysisResponse.ok) {\n    codeAnalysis = await analysisResponse.json();\n  }\n\n  return json({\n    repo: data.repo,\n    codeAnalysis: codeAnalysis,\n  });\n};\n\n// Add Error Boundary\nexport function ErrorBoundary() {\n  return (\n    <div className=\"flex items-center justify-center h-screen\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404 - Repo Not Found</h1>\n        <p className=\"mb-4\">The repository you're looking for doesn't exist.</p>\n        <Link to=\"/app/seller/repos\">\n          <Button>Go Back to Repos</Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\n// PublishAlertDialog component\ntype PublishAlertDialogProps = {\n  isOpen: boolean;\n  isPublishing: boolean;\n  publishProgress: number;\n  onConfirm: () => void;\n  onCancel: () => void;\n};\n\nconst PublishAlertDialog: React.FC<PublishAlertDialogProps> = ({\n  isOpen,\n  isPublishing,\n  publishProgress,\n  onConfirm,\n  onCancel,\n}) => {\n  return (\n    <AlertDialog open={isOpen}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Publish Repository</AlertDialogTitle>\n          <AlertDialogDescription>\n            Are you sure you want to publish this repository? This action will\n            make the repository visible to all users and cannot be undone.\n          </AlertDialogDescription>\n          {isPublishing && (\n            <Progress value={publishProgress} className=\"w-full mt-4\" />\n          )}\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel onClick={onCancel} disabled={isPublishing}>\n            {isPublishing ? \"Cancel Upload\" : \"Cancel\"}\n          </AlertDialogCancel>\n          <AlertDialogAction onClick={onConfirm} disabled={isPublishing}>\n            Publish\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n};\n\nexport default function EditorLayout() {\n  const { repo, codeAnalysis } = useLoaderData<{\n    repo: Repo;\n    codeAnalysis: PrivateCodeCheckResult | null;\n  }>();\n  const { id: repoId } = useParams<{ id: string }>();\n  const [isSaving, setIsSaving] = useState<boolean>(false);\n  const [isPublishing, setIsPublishing] = useState<boolean>(false);\n  const [isCheckingCode, setIsCheckingCode] = useState<boolean>(false);\n  const [publishProgress, setPublishProgress] = useState<number>(0);\n  const [codeCheckProgress, setCodeCheckProgress] = useState<number>(0);\n  const [showPublishDialog, setShowPublishDialog] = useState<boolean>(false);\n  const [showCodeCheckDialog, setShowCodeCheckDialog] =\n    useState<boolean>(false);\n  const [showCodeAnalysis, setShowCodeAnalysis] = useState<boolean>(false);\n  const [activeTab, setActiveTab] = useState<string>(\"main\");\n  const {\n    editorValue,\n    cssValue,\n    editorOptions,\n    setEditorValue,\n    setCssValue,\n    setEditorOptions,\n  } = useMonacoStore();\n\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  useEffect(() => {\n    const initializeEditor = () => {\n      setEditorValue(repo.sourceJs);\n      setCssValue(repo.sourceCss);\n      setEditorOptions({\n        language: repo.language === \"JSX\" ? \"javascript\" : \"typescript\",\n      });\n    };\n\n    initializeEditor();\n\n    // Clean up function to reset store when unmounting\n  }, [repoId, repo, setEditorValue, setCssValue, setEditorOptions]);\n\n  const handleSave = async () => {\n    setIsSaving(true);\n    try {\n      const response = await fetch(\n        `${window.ENV.BACKEND_URL}/api/v1/repo/${repo.id}`,\n        {\n          method: \"PUT\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            sourceJs: editorValue,\n            sourceCss: cssValue,\n            language: editorOptions.language === \"javascript\" ? \"JSX\" : \"TSX\",\n          }),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to save changes\");\n      }\n\n      toast.success(\"Changes saved successfully\");\n    } catch (error) {\n      console.error(\"Error saving changes:\", error);\n      toast.error(\"Failed to save changes. Please try again.\");\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handlePublish = async (): Promise<void> => {\n    setIsPublishing(true);\n    setPublishProgress(0);\n    abortControllerRef.current = new AbortController();\n\n    try {\n      const response = await fetch(\n        `${window.ENV.BACKEND_URL}/api/v1/repo/${repo.id}/publish`,\n        {\n          method: \"PUT\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          signal: abortControllerRef.current.signal,\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to publish repository\");\n      }\n\n      const reader = response.body!.getReader();\n      await readStream(reader, (progress) => {\n        setPublishProgress(progress);\n      });\n\n      toast.success(\"Repository published successfully\");\n      window.location.reload();\n      // Update local state or refetch data as needed\n    } catch (error) {\n      if ((error as any).name === \"AbortError\") {\n        toast.info(\"Upload cancelled\");\n      } else {\n        console.error(\"Error publishing repository:\", error);\n        toast.error(\"Failed to publish repository. Please try again.\");\n      }\n    } finally {\n      setIsPublishing(false);\n      setShowPublishDialog(false);\n      setPublishProgress(0);\n      abortControllerRef.current = null;\n    }\n  };\n\n  const handleCancelPublish = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    setShowPublishDialog(false);\n  };\n\n  const handleCodeCheck = async (): Promise<void> => {\n    setIsCheckingCode(true);\n    setCodeCheckProgress(0);\n    abortControllerRef.current = new AbortController();\n\n    try {\n      const response = await fetch(\n        `${window.ENV.BACKEND_URL}/api/v1/repo/${repo.id}/check`,\n        {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          signal: abortControllerRef.current.signal,\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to submit code check\");\n      }\n\n      const reader = response.body!.getReader();\n      await readStream(reader, (progress) => {\n        setCodeCheckProgress(progress);\n      });\n\n      toast.success(\"Code check completed successfully\");\n      window.location.reload();\n    } catch (error) {\n      if ((error as any).name === \"AbortError\") {\n        toast.info(\"Code check cancelled\");\n      } else {\n        console.error(\"Error submitting code check:\", error);\n        toast.error(\"Failed to submit code check. Please try again.\");\n      }\n    } finally {\n      setIsCheckingCode(false);\n      setShowCodeCheckDialog(false);\n      setCodeCheckProgress(0);\n      abortControllerRef.current = null;\n    }\n  };\n\n  const handleCancelCodeCheck = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    setShowCodeCheckDialog(false);\n  };\n\n  return (\n    <Layout>\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"\">\n        <LayoutHeader className=\"flex flex-col gap-4 justify-start items-start\">\n          <Link to=\"/app/seller/repos\">\n            <Button>Back</Button>\n          </Link>\n\n          <div className=\"flex flex-row gap-4\">\n            <TabsList className=\"grid w-[400px] grid-cols-2\">\n              <TabsTrigger value=\"main\">react</TabsTrigger>\n              <TabsTrigger value=\"css\">css</TabsTrigger>\n            </TabsList>\n            <EditorMenubar />\n\n            <Button\n              onClick={handleSave}\n              disabled={isSaving || isPublishing || isCheckingCode}\n            >\n              Save\n            </Button>\n            <Button\n              onClick={() => setShowPublishDialog(true)}\n              disabled={\n                isSaving ||\n                isPublishing ||\n                isCheckingCode ||\n                repo.status === \"active\"\n              }\n            >\n              Publish\n            </Button>\n            <Button\n              onClick={() => setShowCodeCheckDialog(true)}\n              disabled={isSaving || isPublishing || isCheckingCode}\n            >\n              Submit Code Check\n            </Button>\n            <Button\n              onClick={() => setShowCodeAnalysis(true)}\n              disabled={!codeAnalysis}\n            >\n              View Code Analysis\n            </Button>\n          </div>\n        </LayoutHeader>\n        <LayoutBody>\n          <CodeRepoEditorPreview\n            repoId={repoId}\n            initialCode={repo.sourceJs}\n            initialCss={repo.sourceCss}\n            activeTab={activeTab as \"main\" | \"css\"}\n          />\n        </LayoutBody>\n      </Tabs>\n      <PublishAlertDialog\n        isOpen={showPublishDialog}\n        isPublishing={isPublishing}\n        publishProgress={publishProgress}\n        onConfirm={handlePublish}\n        onCancel={handleCancelPublish}\n      />\n      <CodeCheckProgressDialog\n        isOpen={showCodeCheckDialog}\n        isChecking={isCheckingCode}\n        checkProgress={codeCheckProgress}\n        onConfirm={handleCodeCheck}\n        onCancel={handleCancelCodeCheck}\n      />\n      {codeAnalysis && (\n        <CodeAnalysis\n          isOpen={showCodeAnalysis}\n          onClose={() => setShowCodeAnalysis(false)}\n          codeCheckResult={codeAnalysis}\n          repoName={repo.name}\n          repoLanguage={repo.language}\n          isPublicView={false}\n        />\n      )}\n    </Layout>\n  );\n}\n\nfunction CodeRepoEditorPreview({\n  repoId,\n  initialCode,\n  initialCss,\n  activeTab,\n}: {\n  repoId: string | undefined;\n  initialCode: string;\n  initialCss: string;\n  activeTab: string;\n}) {\n  const {\n    editorValue,\n    cssValue,\n    editorOptions,\n    handleEditorChange: storeHandleEditorChange,\n    setEditorValue,\n    setCssValue,\n  } = useMonacoStore();\n\n  const [renderValue, setRenderValue] = useState(\"\");\n  const jsEditorRef = useRef<IStandaloneCodeEditor | null>(null);\n  const cssEditorRef = useRef<IStandaloneCodeEditor | null>(null);\n  const monacoRef = useRef<Monaco | null>(null);\n  const debouncedJsValue = useDebounce(editorValue, 500);\n  const debouncedCssValue = useDebounce(cssValue, 500);\n\n  // Refs to hold the latest values\n  const latestEditorValueRef = useRef(editorValue);\n  const latestCssValueRef = useRef(cssValue);\n\n  // Update refs when values change\n  useEffect(() => {\n    latestEditorValueRef.current = editorValue;\n    latestCssValueRef.current = cssValue;\n  }, [editorValue, cssValue]);\n\n  // Set initial values and update when they change\n  useEffect(() => {\n    setEditorValue(initialCode);\n    setCssValue(initialCss);\n  }, [initialCode, initialCss, setEditorValue, setCssValue]);\n\n  // Update renderValue when editorValue or cssValue changes\n  useEffect(() => {\n    const importRegex = /^import\s.+?;?\s*$/gm;\n    const value = editorValue.replace(importRegex, \"\").trim();\n    setRenderValue(`\n      injectCSS(${JSON.stringify(cssValue)});\n      ${value}\n    `);\n  }, [editorValue, cssValue]);\n\n  const handleEditorBeforeMount = useCallback(async (monaco: Monaco) => {\n    await setupLanguageService(monaco);\n  }, []);\n\n  const updateEditorContent = useCallback(() => {\n    if (jsEditorRef.current && monacoRef.current) {\n      const model = jsEditorRef.current.getModel();\n      if (model && model.getValue() !== latestEditorValueRef.current) {\n        model.setValue(latestEditorValueRef.current);\n      }\n    }\n    if (cssEditorRef.current && monacoRef.current) {\n      const model = cssEditorRef.current.getModel();\n      if (model && model.getValue() !== latestCssValueRef.current) {\n        model.setValue(latestCssValueRef.current);\n      }\n    }\n  }, []);\n\n  const handleJsEditorDidMount: OnMount = useCallback(\n    (editor, monaco) => {\n      jsEditorRef.current = editor;\n      monacoRef.current = monaco;\n\n      const uri = monaco.Uri.file(\n        editorOptions.language === \"javascript\" ? \"index.jsx\" : \"index.tsx\",\n      );\n      let model = monaco.editor.getModel(uri);\n      if (!model) {\n        model = monaco.editor.createModel(\n          latestEditorValueRef.current,\n          editorOptions.language,\n          uri,\n        );\n      }\n      editor.setModel(model);\n      updateEditorContent();\n    },\n    [editorOptions.language, updateEditorContent],\n  );\n\n  const handleCssEditorDidMount: OnMount = useCallback(\n    (editor, monaco) => {\n      cssEditorRef.current = editor;\n      if (!monacoRef.current) monacoRef.current = monaco;\n\n      const uri = monaco.Uri.file(\"index.css\");\n      let model = monaco.editor.getModel(uri);\n      if (!model) {\n        model = monaco.editor.createModel(\n          latestCssValueRef.current,\n          \"css\",\n          uri,\n        );\n      }\n      editor.setModel(model);\n      updateEditorContent();\n    },\n    [updateEditorContent],\n  );\n\n  // Update editor content whenever activeTab changes\n  useEffect(() => {\n    updateEditorContent();\n  }, [activeTab, updateEditorContent]);\n\n  const handleEditorContentChange: OnChange = useCallback(\n    (value, event) => {\n      const language = activeTab === \"main\" ? editorOptions.language : \"css\";\n      storeHandleEditorChange(value ?? \"\", language);\n    },\n    [activeTab, editorOptions.language, storeHandleEditorChange],\n  );\n\n  return (\n    <div className=\"w-full h-full\">\n      <LiveProvider\n        code={renderValue}\n        noInline\n        scope={{ injectCSS, cssValue, injectTailwind }}\n      >\n        <ClientOnly fallback={<MonacoLoading />}>\n          {() => (\n            <ResizablePanelGroup\n              direction=\"horizontal\"\n              className=\"rounded-lg border\"\n            >\n              <ResizablePanel defaultSize={50}>\n                <ScrollArea className=\"flex min-h-screen h-full items-center justify-center\">\n                  <div\n                    className=\"w-full h-full\"\n                    style={{ display: activeTab === \"main\" ? \"block\" : \"none\" }}\n                  >\n                    <Editor\n                      height=\"100vh\"\n                      language={editorOptions.language}\n                      value={editorValue}\n                      beforeMount={handleEditorBeforeMount}\n                      onChange={handleEditorContentChange}\n                      theme={editorOptions.theme}\n                      options={{\n                        fontSize: editorOptions.fontSize,\n                        wordWrap: editorOptions.wordWrap,\n                        minimap: editorOptions.minimap,\n                        lineNumbers: editorOptions.lineNumbers,\n                      }}\n                      onMount={handleJsEditorDidMount}\n                      key={`js-editor-${repoId}`} // Add key to force remount\n                    />\n                  </div>\n                  <div\n                    className=\"w-full h-full\"\n                    style={{ display: activeTab === \"css\" ? \"block\" : \"none\" }}\n                  >\n                    <Editor\n                      height=\"100vh\"\n                      language=\"css\"\n                      value={cssValue}\n                      beforeMount={handleEditorBeforeMount}\n                      onChange={handleEditorContentChange}\n                      theme={editorOptions.theme}\n                      options={{\n                        fontSize: editorOptions.fontSize,\n                        wordWrap: editorOptions.wordWrap,\n                        minimap: editorOptions.minimap,\n                        lineNumbers: editorOptions.lineNumbers,\n                      }}\n                      onMount={handleCssEditorDidMount}\n                      key={`css-editor-${repoId}`} // Add key to force remount\n                    />\n                  </div>\n                </ScrollArea>\n              </ResizablePanel>\n              <ResizableHandle withHandle />\n              <ResizablePanel defaultSize={50}>\n                <div className=\"bg-slate-950 min-h-screen relative\">\n                  <div className=\"absolute bottom-0 left-0 right-0 top-0 bg-[linear-gradient(to_right,#4f4f4f2e_1px,transparent_1px),linear-gradient(to_bottom,#4f4f4f2e_1px,transparent_1px)] bg-[size:14px_24px]\">\n                    <IframeRenderer\n                      sourceJs={debouncedJsValue}\n                      sourceCss={debouncedCssValue}\n                      language={\n                        editorOptions.language === \"javascript\" ? \"JSX\" : \"TSX\"\n                      }\n                      name=\"preview\"\n                      className=\"h-full z-50\"\n                    />\n                    <LiveError className=\"text-red-800 bg-red-100 mt-2\" />\n                  </div>\n                </div>\n              </ResizablePanel>\n            </ResizablePanelGroup>\n          )}\n        </ClientOnly>\n      </LiveProvider>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.seller.repos._index\route.tsx</source>
<document_content>import React, { useState } from \"react\";\nimport { useLoaderData, useRouteError } from \"@remix-run/react\";\nimport { json, LoaderFunction, redirect } from \"@remix-run/node\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { PlusIcon, SearchIcon } from \"lucide-react\";\nimport { Shell } from \"@/components/landing/shell\";\nimport { RepoForm } from \"@/components/repo/new-repo-form\";\nimport ErrorComponent from \"@/components/error/500\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { checkAuthCookie } from \"@/lib/router-guard\";\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport RepoCard from \"@/components/repo/card-repo-seller\";\n\nexport const repoSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  sourceJs: z.string(),\n  sourceCss: z.string(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  deletedAt: z.string().nullable(),\n  visibility: z.enum([\"public\", \"private\"]),\n  status: z.enum([\"pending\", \"active\", \"rejected\"]),\n  name: z.string(),\n  description: z.string().nullable(),\n  language: z.enum([\"JSX\", \"TSX\"]),\n  price: z.number(),\n});\n\ntype Repo = z.infer<typeof repoSchema>;\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  if (!checkAuthCookie(request)) return redirect(\"/login\");\n\n  const cookieHeader = request.headers.get(\"Cookie\");\n  const res = await fetch(`${process.env.BACKEND_URL}/api/v1/repos/user`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Cookie: cookieHeader?.toString() ?? \"\",\n    },\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch repositories\");\n\n  const data = await res.json();\n  console.log(data);\n  const validatedData = z.array(repoSchema).parse(data);\n\n  return json({\n    repos: validatedData,\n    success: true,\n  });\n};\n\nexport const ErrorBoundary = () => {\n  const error = useRouteError();\n  return <ErrorComponent />;\n};\n\nexport default function RepoDashboard() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { repos } = useLoaderData<{ repos: Repo[] }>();\n\n  const filteredRepos = repos.filter(\n    (repo) =>\n      repo.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      repo.description?.toLowerCase().includes(searchTerm.toLowerCase()),\n  );\n\n  const handleDelete = async (id: string) => {\n    try {\n      const res = await fetch(`${window.ENV.BACKEND_URL}/api/v1/repo/${id}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || \"Failed to delete repository\");\n      }\n\n      // Refresh the page to reflect the deletion\n      window.location.reload();\n    } catch (error) {\n      showErrorToast(error);\n    }\n  };\n\n  return (\n    <ClientOnly fallback={<LoadingComponent />}>\n      {() => (\n        <div className=\"w-full min-h-screen bg-gray-100 dark:bg-gray-900 flex flex-col\">\n          <main className=\"flex-1 py-8 px-6\">\n            <div className=\"max-w-7xl mx-auto\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                  Your Codebase\n                </h1>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"relative\">\n                    <SearchIcon className=\"absolute left-2.5 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400\" />\n                    <Input\n                      type=\"search\"\n                      placeholder=\"Search projects...\"\n                      className=\"pl-8 w-[200px] sm:w-[300px]\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                    />\n                  </div>\n                  <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <PlusIcon className=\"w-4 h-4 mr-2\" />\n                        New Repo\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"sm:max-w-[425px]\">\n                      <DialogHeader>\n                        <DialogTitle>Create New Repo</DialogTitle>\n                        <DialogDescription>\n                          Fill out the form below to create a new project.\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div className=\"grid gap-4 py-4\">\n                        <RepoForm />\n                      </div>\n                      <DialogFooter>\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => setDialogOpen(false)}\n                        >\n                          Cancel\n                        </Button>\n                      </DialogFooter>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </div>\n\n              {filteredRepos.length === 0 ? (\n                <Shell className=\"flex flex-col items-center justify-center gap-2\">\n                  <h3 className=\"scroll-m-20 text-2xl font-semibold tracking-tight\">\n                    No Repos Found\n                  </h3>\n                  <p>Create your first repository</p>\n                  <Button onClick={() => setDialogOpen(true)}>Create</Button>\n                </Shell>\n              ) : (\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {filteredRepos.map((repo) => (\n                    <RepoCard\n                      key={repo.id}\n                      repo={repo}\n                      onDelete={handleDelete}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          </main>\n        </div>\n      )}\n    </ClientOnly>\n  );\n}\n\nfunction LoadingComponent() {\n  return (\n    <div className=\"flex h-screen w-screen items-center justify-center\">\n      <div className=\"flex flex-col items-center space-y-4\">\n        <p className=\"text-gray-500 dark:text-gray-400\">\n          Please wait while we are preparing the content\n        </p>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-4 w-[250px]\" />\n            <Skeleton className=\"h-4 w-[200px]\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.seller._index\route.tsx</source>
<document_content>import React, { useEffect, useState } from \"react\";\nimport { toast } from \"sonner\";\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useNavigate } from \"@remix-run/react\";\nimport {\n  SellerProfileFormData,\n  SellerProfileEditComponent,\n} from \"@/components/user/seller-form\";\nimport { Shell } from \"@/components/landing/shell\";\nimport { useUserStore } from \"@/stores/user-store\";\nimport PendingSellerComponent from \"@/components/user/seller-pending\";\nimport { DataTableLoadingComponent } from \"@/components/dashboard/loading\";\nimport { Alert, AlertTitle, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2 } from \"lucide-react\";\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartLegend,\n  ChartLegendContent,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/components/ui/chart\";\nimport {\n  ResponsiveContainer,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Line,\n  LineChart,\n} from \"recharts\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n//import { ClientOnly } from \"remix-utils/client-only\";\n\ninterface SalesDataPoint {\n  date: string;\n  revenue: number;\n  salesCount: number;\n}\n\ninterface RecentReview {\n  id: string;\n  content: string;\n  rating: number;\n  createdAt: string;\n  repoName: string;\n  userName: string;\n}\n\ninterface DashboardData {\n  salesData: SalesDataPoint[];\n  recentReviews: RecentReview[];\n}\n\n// Component for idle status\nconst IdleSellerComponent: React.FC<{\n  onSubmit: (data: SellerProfileFormData) => Promise<void>;\n}> = ({ onSubmit }) => (\n  <>\n    <Card className=\"mb-8 bg-muted/40\">\n      <CardContent className=\"pt-6\">\n        <h2 className=\"text-2xl font-semibold mb-4\">Become a Kortex Seller</h2>\n        <p className=\"mb-4\">\n          Welcome to Kortex! We're excited that you're interested in becoming a\n          seller on our platform. As a Kortex seller, you'll have the\n          opportunity to monetize your coding skills and share your expertise\n          with developers worldwide.\n        </p>\n        <p className=\"mb-4\">\n          To get started, please fill out the application form below. We'll need\n          some information about your business and a bank account for payments.\n        </p>\n        <p>\n          Once you submit your application, our team will review it carefully.\n          This process typically takes 1-3 business days. We'll notify you via\n          email as soon as a decision has been made.\n        </p>\n      </CardContent>\n    </Card>\n    <h2 className=\"text-2xl font-semibold mb-6\">Seller Application Form</h2>\n    <SellerProfileEditComponent onSubmit={onSubmit} />\n  </>\n);\n\n// Component for rejected status\nconst RejectedSellerComponent: React.FC<{\n  onSubmit: (data: SellerProfileFormData) => Promise<void>;\n}> = ({ onSubmit }) => (\n  <>\n    <Card className=\"mb-8 bg-muted/40\">\n      <CardContent className=\"pt-6\">\n        <h2 className=\"text-2xl font-semibold mb-4 text-red-600\">\n          Application Status: Rejected\n        </h2>\n        <p className=\"mb-4\">\n          We regret to inform you that your previous seller application was not\n          approved. However, we encourage you to address the issues noted and\n          reapply.\n        </p>\n        <p className=\"mb-4\">\n          Common reasons for rejection include:\n          <ul className=\"list-disc list-inside\">\n            <li>Incomplete or inaccurate business information</li>\n            <li>Unverifiable identity documents</li>\n            <li>Issues with the provided bank account details</li>\n          </ul>\n        </p>\n        <p>\n          Please review your information carefully and submit a new application\n          below. If you have any questions about the rejection or need\n          assistance, please contact our support team.\n        </p>\n      </CardContent>\n    </Card>\n    <h2 className=\"text-2xl font-semibold mb-6\">Reapply as a Seller</h2>\n    <SellerProfileEditComponent onSubmit={onSubmit} />\n  </>\n);\n\nconst ActiveSellerComponent: React.FC = () => {\n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchDashboardData = async () => {\n      try {\n        const response = await fetch(\n          `${window.ENV.BACKEND_URL}/api/v1/seller/dashboard`,\n          {\n            credentials: \"include\",\n          }\n        );\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch dashboard data\");\n        }\n        const data: DashboardData = await response.json();\n        setDashboardData(data);\n      } catch (err) {\n        setError(\"An error occurred while fetching dashboard data\");\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchDashboardData();\n  }, []);\n\n  if (isLoading) {\n    return (\n      <Card className=\"mb-6 bg-muted/40 h-[90vh] flex items-center justify-center\">\n        <Loader2 className=\"h-12 w-12 animate-spin\" />\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert variant=\"destructive\" className=\"h-[90vh] flex items-center justify-center\">\n        <AlertTitle>Error</AlertTitle>\n        <AlertDescription>{error}</AlertDescription>\n      </Alert>\n    );\n  }\n\n  const chartConfig: ChartConfig = {\n    revenue: {\n      label: \"Revenue\",\n      color: \"#8884d8\",\n    },\n    salesCount: {\n      label: \"Sales Count\",\n      color: \"#82ca9d\",\n    },\n  };\n\n  return (\n    <div className=\"space-y-6 h-[80vh] overflow-y-hidden\">\n      <Card className=\"mb-6 bg-muted/40\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">Welcome, Verified Seller!</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p>\n            Your seller account is active. Start listing your code snippets and track your earnings here.\n            Use the navigation menu to manage your listings and monitor your performance.\n          </p>\n        </CardContent>\n      </Card>\n\n      {dashboardData && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 h-full\">\n          <Card className=\"h-[calc(90vh-20rem)]\">\n            <CardHeader>\n              <CardTitle className=\"text-xl\">Sales Overview</CardTitle>\n            </CardHeader>\n            <CardContent className=\"h-full\">\n              <ChartContainer\n                config={chartConfig}\n                className=\"w-full h-full\"\n              >\n                <LineChart data={dashboardData.salesData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis\n                    dataKey=\"date\"\n                    tickLine={false}\n                    tickMargin={10}\n                    axisLine={false}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString()}\n                    height={50}\n                    interval=\"preserveStartEnd\"\n                    tick={{ fontSize: 12 }}\n                  />\n                  <YAxis\n                    yAxisId=\"left\"\n                    width={60}\n                    tickFormatter={(value) => `$${value}`}\n                    tick={{ fontSize: 12 }}\n                  />\n                  <YAxis\n                    yAxisId=\"right\"\n                    orientation=\"right\"\n                    width={60}\n                    tickFormatter={(value) => value.toString()}\n                    tick={{ fontSize: 12 }}\n                  />\n                  <ChartTooltip content={<ChartTooltipContent />} />\n                  <ChartLegend content={<ChartLegendContent />} />\n                  <Line\n                    yAxisId=\"left\"\n                    type=\"monotone\"\n                    dataKey=\"revenue\"\n                    stroke=\"var(--color-revenue)\"\n                    strokeWidth={2}\n                  />\n                  <Line\n                    yAxisId=\"right\"\n                    type=\"monotone\"\n                    dataKey=\"salesCount\"\n                    stroke=\"var(--color-salesCount)\"\n                    strokeWidth={2}\n                  />\n                </LineChart>\n              </ChartContainer>\n            </CardContent>\n          </Card>\n\n          <Card className=\"h-[calc(90vh-20rem)] overflow-hidden\">\n              <ScrollArea className=\"h-full\">\n            <CardHeader>\n              <CardTitle className=\"text-xl\">Recent Reviews</CardTitle>\n            </CardHeader>\n            <CardContent className=\"h-full overflow-hidden\">\n                <div>\n              {dashboardData.recentReviews.map((review) => (\n                <div key={review.id} className=\"mb-4 p-4 border rounded\">\n                  <h4 className=\"font-semibold\">{review.repoName}</h4>\n                  <p className=\"text-sm text-gray-500\">\n                    By {review.userName} on {new Date(review.createdAt).toLocaleDateString()}\n                  </p>\n                  <p className=\"mt-2\">{review.content}</p>\n                  <p className=\"mt-1 text-yellow-500\">\n                    Rating: {review.rating}/5\n                  </p>\n                </div>\n              ))}\n                </div>\n            </CardContent>\n              </ScrollArea>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst SellerDashboardComponent: React.FC = () => {\n  const navigate = useNavigate();\n  const { user } = useUserStore();\n\n  const handleSubmit = async (data: SellerProfileFormData) => {\n    try {\n      const response = await fetch(\n        `${window.ENV.BACKEND_URL}/api/v1/seller/apply`,\n        {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(data),\n        },\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to submit seller application\");\n      }\n      const result = await response.json();\n      if (result.profile) {\n        toast.success(\"Seller profile application submitted successfully\");\n        navigate(\"/app/seller\");\n      } else {\n        throw new Error(\"Unexpected response format\");\n      }\n    } catch (error) {\n      showErrorToast(error);\n      console.error(\"Error applying for seller profile:\", error);\n    }\n  };\n\n  const renderContent = () => {\n    const status = user?.sellerProfile?.verificationStatus || \"\";\n    switch (status) {\n      case \"APPROVED\":\n        return <ActiveSellerComponent />;\n      case \"PENDING\":\n        return <PendingSellerComponent />;\n      case \"REJECTED\":\n        return <RejectedSellerComponent onSubmit={handleSubmit} />;\n      case \"IDLE\":\n        return <IdleSellerComponent onSubmit={handleSubmit} />;\n      default:\n        return (\n          <div className=\"flex justify-center\">\n            <DataTableLoadingComponent />\n          </div>\n        );\n    }\n  };\n\n  return (\n    <Shell className=\"container mx-auto px-4 py-8 bg-muted/40\">\n      <h1 className=\"text-3xl font-bold mb-6\">Kortex Seller Dashboard</h1>\n      {renderContent()}\n    </Shell>\n  );\n};\n\nexport default SellerDashboardComponent;\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.settings\route.tsx</source>
<document_content>import { useState } from \"react\";\nimport { Link, useLocation, useNavigate, Outlet } from \"@remix-run/react\";\nimport { buttonVariants } from \"@/components/custom/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { IconTool, IconUser } from \"@tabler/icons-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function SettingsLayout() {\n  return (\n    <div>\n      <div className=\"space-y-0.5\">\n        <h1 className=\"text-2xl font-bold tracking-tight md:text-3xl\">\n          Settings\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Manage your account settings and set e-mail preferences.\n        </p>\n      </div>\n      <Separator className=\"my-6\" />\n      <div className=\"flex flex-1 flex-col space-y-8 overflow-auto lg:flex-row lg:space-x-12 lg:space-y-0\">\n        <aside className=\"sticky top-0 lg:w-1/5\">\n          <SidebarNav items={sidebarNavItems} />\n        </aside>\n        <div className=\"w-full p-1 pr-4 lg:max-w-xl\">\n          <div className=\"pb-16\">\n            <Outlet />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst sidebarNavItems = [\n  {\n    title: \"Profile\",\n    icon: <IconUser size={18} />,\n    href: \"/app/settings/profile\",\n  },\n  {\n    title: \"Account\",\n    icon: <IconTool size={18} />,\n    href: \"/app/settings/account\",\n  },\n  // {\n  //   title: \"Appearance\",\n  //   icon: <IconPalette size={18} />,\n  //   href: \"/settings/appearance\",\n  // },\n  // {\n  //   ttle: \"Notifications\",\n  //   icon: <IconNotification size={18} />,\n  //   href: \"/settings/notifications\",\n  // },\n  // {\n  //   title: \"Display\",\n  //   icon: <IconBrowserCheck size={18} />,\n  //   href: \"/settings/display\",\n  // },\n  // {\n  //   title: \"Error Example\",\n  //   icon: <IconExclamationCircle size={18} />,\n  //   href: \"/settings/error-example\",\n  // },\n];\n\ninterface SidebarNavProps extends React.HTMLAttributes<HTMLElement> {\n  items: {\n    href: string;\n    title: string;\n    icon: JSX.Element;\n  }[];\n}\n\nexport function SidebarNav({ className, items, ...props }: SidebarNavProps) {\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n  const [val, setVal] = useState(pathname ?? \"/settings\");\n\n  const handleSelect = (e: string) => {\n    setVal(e);\n    navigate(e);\n  };\n\n  return (\n    <>\n      <div className=\"p-1 md:hidden\">\n        <Select value={val} onValueChange={handleSelect}>\n          <SelectTrigger className=\"h-12 sm:w-48\">\n            <SelectValue placeholder=\"settings\">Settings</SelectValue>\n          </SelectTrigger>\n          <SelectContent>\n            {items.map((item) => (\n              <SelectItem key={item.href} value={item.href}>\n                <div className=\"flex gap-x-4 px-2 py-1\">\n                  <span className=\"scale-125\">{item.icon}</span>\n                  <span className=\"text-md\">{item.title}</span>\n                </div>\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"hidden w-full overflow-x-auto bg-background px-1 py-2 md:block\">\n        <nav\n          className={cn(\n            \"flex space-x-2 lg:flex-col lg:space-x-0 lg:space-y-1\",\n            className,\n          )}\n          {...props}\n        >\n          {items.map((item) => (\n            <Link\n              key={item.href}\n              to={item.href}\n              className={cn(\n                buttonVariants({ variant: \"ghost\" }),\n                pathname === item.href\n                  ? \"bg-muted hover:bg-muted\"\n                  : \"hover:bg-transparent hover:underline\",\n                \"justify-start\",\n              )}\n            >\n              <span className=\"mr-2\">{item.icon}</span>\n              {item.title}\n            </Link>\n          ))}\n        </nav>\n      </div>\n    </>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.settings.account\route.tsx</source>
<document_content>import { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormControl,\n  Form,\n} from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\n// Define the validation schema\nconst schema = z\n  .object({\n    currentPassword: z.string().min(6, \"Current password is required\"),\n    newPassword: z\n      .string()\n      .min(6, \"New password must be at least 6 characters\"),\n    confirmPassword: z\n      .string()\n      .min(6, \"Confirm password must be at least 6 characters\"),\n  })\n  .refine((data) => data.newPassword === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: [\"confirmPassword\"],\n  });\n\ntype FormData = z.infer<typeof schema>;\n\nexport default function AccountEditComponent() {\n  const form = useForm<FormData>({\n    resolver: zodResolver(schema),\n  });\n\n  const onSubmit = (data: FormData) => {\n    console.log(data);\n    // Handle form submission, e.g., API call to update account email and password\n  };\n\n  return (\n    <div>\n      <div className=\"py-5\">\n        <div className=\"px-4 md:px-6 py-3 space-y-6\">\n          <header className=\"space-y-1.5\">\n            <h1 className=\"text-2xl font-bold\">Edit Account</h1>\n          </header>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n              <FormField\n                control={form.control}\n                name=\"currentPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Current Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Current password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"newPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>New Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"New password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirm Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Confirm new password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button type=\"submit\">Update Account</Button>\n            </form>\n          </Form>\n        </div>\n      </div>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.settings.profile\route.tsx</source>
<document_content>import { Input } from \"@/components/ui/input\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogClose,\n} from \"@/components/ui/dialog\";\nimport { Avatar, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { z } from \"zod\";\nimport {\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormControl,\n  Form,\n} from \"@/components/ui/form\";\nimport { useState, useEffect } from \"react\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { createAvatar } from \"@dicebear/core\";\nimport { notionists } from \"@dicebear/collection\";\nimport { useUserStore } from \"@/stores/user-store\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { PhoneInput } from \"@/components/custom/phone-input.client\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport { toast } from \"sonner\";\nimport { isValidPhoneNumber } from \"react-phone-number-input\";\n\nconst schema = z.object({\n  name: z.string().optional(),\n  phoneNumber: z\n    .string()\n    .refine(isValidPhoneNumber, { message: \"Invalid phone number\" })\n    .or(z.literal(\"\")),\n});\n\ntype FormData = z.infer<typeof schema>;\n\nexport { schema, type FormData };\n\nexport default function ProfileEditComponent() {\n  const { user, isLoading, checkLoginStatus } = useUserStore();\n  const [userAvatar, setUserAvatar] = useState<string | null>(null);\n  const [formKey, setFormKey] = useState(0);\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(schema),\n    defaultValues: {\n      name: \"\",\n      phoneNumber: \"\",\n    },\n  });\n\n  const generateAvatar = () => {\n    const size = 128;\n    const avatar = createAvatar(notionists, {\n      seed: Math.random().toString(16).substring(2, 18),\n      radius: 20,\n    }).toDataUriSync();\n    if (!window) return;\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = size;\n    canvas.height = size;\n\n    const context = canvas.getContext(\"2d\");\n\n    const img = document.createElement(\"img\");\n    img.width = size;\n    img.height = size;\n\n    img.setAttribute(\"src\", avatar);\n\n    img.onload = function () {\n      context?.drawImage(img, 0, 0, size, size);\n      const png = canvas.toDataURL(\"image/png\");\n      setUserAvatar(png);\n    };\n    return avatar;\n  };\n\n  useEffect(() => {\n    const initializeUser = async () => {\n      await checkLoginStatus();\n      //setUserAvatar(user?.profile.profileImg ?? '');\n      setInitialLoading(false);\n    };\n    initializeUser();\n  }, []);\n\n  useEffect(() => {\n    if (user) {\n      setUserAvatar(user.profile.profileImg ?? \"\");\n      form.reset({\n        name: user.profile.name ?? \"\",\n        phoneNumber: user.profile.phoneNumber ?? \"\",\n      });\n      setFormKey((prevKey) => prevKey + 1);\n    }\n  }, [user, form]);\n\n  const onSubmit = async (data: FormData) => {\n    if (!user || isSubmitting) return;\n\n    setIsSubmitting(true);\n\n    try {\n      let body;\n      const fetchOptions: RequestInit = {\n        method: \"PUT\",\n        credentials: \"include\",\n      };\n\n      if (userAvatar && userAvatar !== user.profile.profileImg) {\n        const formData = new FormData();\n        if (data.name) formData.append(\"name\", data.name);\n        if (data.phoneNumber) formData.append(\"phoneNumber\", data.phoneNumber);\n\n        const response = await fetch(userAvatar);\n        const blob = await response.blob();\n        formData.append(\"profileImg\", blob, \"avatar.png\");\n\n        body = formData;\n      } else {\n        body = JSON.stringify({\n          name: data.name,\n          phoneNumber: data.phoneNumber,\n        });\n        fetchOptions.headers = {\n          \"Content-Type\": \"application/json\",\n        };\n      }\n\n      fetchOptions.body = body;\n\n      const response = await fetch(\n        `${window.ENV.BACKEND_URL}/api/v1/profile`,\n        fetchOptions,\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update profile\");\n      }\n\n      await checkLoginStatus();\n      toast.success(\"Profile updated successfully\");\n    } catch (error) {\n      showErrorToast(error);\n      console.error(\"Error updating profile:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (initialLoading || isLoading) {\n    return (\n      <div className=\"py-5 px-4 md:px-6 space-y-6\">\n        <Skeleton className=\"h-8 w-1/3\" />\n        <div className=\"flex items-center space-x-4\">\n          <Skeleton className=\"w-24 h-24 rounded-full\" />\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-6 w-32\" />\n            <Skeleton className=\"h-10 w-28\" />\n          </div>\n        </div>\n        <div className=\"space-y-4\">\n          <Skeleton className=\"h-10 w-full\" />\n          <Skeleton className=\"h-10 w-full\" />\n          <Skeleton className=\"h-10 w-24\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <div>Error: Unable to load user data</div>;\n  }\n\n  return (\n    <ClientOnly>\n      {() => (\n        <div className=\"py-5\">\n          <div className=\"px-4 md:px-6 py-3 space-y-6\">\n            <header className=\"space-y-1.5\">\n              <h1 className=\"text-2xl font-bold\">Edit Account</h1>\n            </header>\n            <div className=\"flex items-center space-x-4\">\n              <Avatar className=\"w-24 h-24 border-2 border-white/[0.1]\">\n                <AvatarImage\n                  src={userAvatar ?? \"/placeholder.svg\"}\n                  alt=\"User avatar\"\n                />\n              </Avatar>\n              <div className=\"space-y-1.5\">\n                <h1 className=\"text-2xl font-bold\">{user.profile.name}</h1>\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\">Change Avatar</Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"sm:max-w-[425px] bg-background\">\n                    <DialogHeader>\n                      <DialogTitle>Change avatar</DialogTitle>\n                      <DialogDescription>\n                        Change your avatar by generating a new one. Once you are\n                        done, click on the close button.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"flex flex-col justify-center mx-auto w-full p-2 items-center gap-4\">\n                      <div className=\"flex flex-row items-center gap-4\">\n                        <Avatar className=\"w-24 h-24 border-2 border-white/[0.1]\">\n                          <AvatarImage\n                            src={userAvatar ?? \"\"}\n                            alt=\"User avatar\"\n                          />\n                        </Avatar>\n                      </div>\n                      <div className=\"flex flex-row items-center gap-4\">\n                        <Button onClick={generateAvatar} variant=\"outline\">\n                          Generate New Avatar\n                        </Button>\n                      </div>\n                    </div>\n                    <DialogFooter>\n                      <DialogClose asChild>\n                        <Button type=\"button\" variant=\"secondary\">\n                          Close\n                        </Button>\n                      </DialogClose>\n                    </DialogFooter>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n            <Form {...form} key={formKey}>\n              <form\n                onSubmit={form.handleSubmit(onSubmit)}\n                className=\"space-y-8\"\n              >\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Your name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"phoneNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number</FormLabel>\n                      <FormControl>\n                        <PhoneInput {...field} placeholder=\"Phone number\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting ? \"Updating...\" : \"Update profile\"}\n                </Button>\n              </form>\n            </Form>\n          </div>\n        </div>\n      )}\n    </ClientOnly>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.settings.seller-profile\route.tsx</source>
<document_content>import React, { useState } from \"react\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { LoaderFunction, json } from \"@remix-run/node\";\nimport { SellerProfileEditComponent } from \"@/components/user/seller-form\";\nimport type { SellerProfileFormData } from \"@/components/user/seller-form\";\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport { toast } from \"sonner\";\n\n// Define the type for the loader data\ntype LoaderData = {\n  sellerProfile: SellerProfileFormData | null;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const response = await fetch(\n    `${process.env.BACKEND_URL}/api/v1/seller-profile`,\n    {\n      headers: {\n        Cookie: request.headers.get(\"Cookie\") || \"\",\n      },\n    },\n  );\n\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch seller profile\");\n  }\n\n  const sellerProfile = await response.json();\n\n  const loaderData: LoaderData = {\n    sellerProfile: sellerProfile\n      ? {\n          businessName: sellerProfile.businessName,\n          businessAddress: sellerProfile.businessAddress,\n          businessPhone: sellerProfile.businessPhone,\n          businessEmail: sellerProfile.businessEmail,\n          accountHolderName: sellerProfile.bankAccount?.accountHolderName || \"\",\n          accountNumber: sellerProfile.bankAccount?.accountNumber || \"\",\n          bankName: sellerProfile.bankAccount?.bankName || \"\",\n          swiftCode: sellerProfile.bankAccount?.swiftCode || \"\",\n          iban: sellerProfile.bankAccount?.iban || \"\",\n          routingNumber: sellerProfile.bankAccount?.routingNumber || \"\",\n        }\n      : null,\n  };\n\n  return json(loaderData);\n};\n\nconst SellerProfileEditPage: React.FC = () => {\n  const { sellerProfile } = useLoaderData<LoaderData>();\n\n  const handleSubmit = async (data: SellerProfileFormData) => {\n    try {\n      const response = await fetch(\n        `${window.ENV.BACKEND_URL}/api/v1/seller-profile`,\n        {\n          method: \"PUT\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(data),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update seller profile\");\n      }\n\n      toast.success(\"Seller profile updated successfully\");\n    } catch (error) {\n      showErrorToast(error);\n      console.error(\"Error updating seller profile:\", error);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-6\">Edit Your Seller Profile</h1>\n      <SellerProfileEditComponent\n        initialData={sellerProfile || undefined}\n        onSubmit={handleSubmit}\n      />\n    </div>\n  );\n};\n\nexport default SellerProfileEditPage;\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.user.orders._index\route.tsx</source>
<document_content>import React, { useMemo } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { DataTable } from \"@/components/data-table/data-table\";\nimport { columns, filters } from \"./table\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { LoaderFunction, json, redirect } from \"@remix-run/node\";\nimport { useLoaderData, useRouteError } from \"@remix-run/react\";\nimport ErrorComponent from \"@/components/error/500\";\nimport { checkAuthCookie } from \"@/lib/router-guard\";\nimport LoadingComponent from \"@/components/custom/loading\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  Legend,\n} from \"recharts\";\nimport { ChartConfig, ChartContainer } from \"@/components/ui/chart\";\nimport {\n  DollarSign,\n  ShoppingCart,\n  Clock,\n  CheckCircle,\n  XCircle,\n} from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst orderSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  codeRepoId: z.string(),\n  status: z.enum([\n    \"REQUIRESPAYMENTMETHOD\",\n    \"REQUIRESCONFIRMATION\",\n    \"REQUIRESACTION\",\n    \"PROCESSING\",\n    \"REQUIRESCAPTURE\",\n    \"CANCELLED\",\n    \"SUCCEEDED\",\n  ]),\n  totalAmount: z.number(),\n  stripePaymentIntentId: z.string().nullable(),\n  stripePaymentMethodId: z.string().nullable(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  deletedAt: z.string().nullable(),\n  user: z.object({\n    email: z.string(),\n  }),\n  codeRepo: z.object({\n    name: z.string(),\n  }),\n});\n\ntype OrderSchema = z.infer<typeof orderSchema>;\n\nexport const ErrorBoundary = () => {\n  const error = useRouteError();\n  return <ErrorComponent />;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const cookieHeader = request.headers.get(\"Cookie\");\n  if (!checkAuthCookie(request)) return redirect(\"/login\");\n  const res = await fetch(`${process.env.BACKEND_URL}/api/v1/orders`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Cookie: cookieHeader?.toString() ?? \"\",\n    },\n  });\n  if (!res.ok) throw new Error(\"Oh no! Something went wrong!\");\n  const data = await res.json();\n  const validatedData = z.array(orderSchema).parse(data.data);\n  return json({\n    items: validatedData,\n    meta: data.meta,\n    success: true,\n  });\n};\n\nexport default function OrdersPage() {\n  const { items, meta } = useLoaderData<typeof loader>();\n\n  const orderStats = useMemo(() => {\n    const statusCounts = items.reduce(\n      (acc, order) => {\n        acc[order.status] = (acc[order.status] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    const totalRevenue = items.reduce(\n      (sum, order) => sum + order.totalAmount,\n      0,\n    );\n    const successfulOrders = items.filter(\n      (order) => order.status === \"SUCCEEDED\",\n    );\n    const totalSuccessfulRevenue = successfulOrders.reduce(\n      (sum, order) => sum + order.totalAmount,\n      0,\n    );\n\n    return {\n      statusCounts,\n      totalRevenue,\n      totalSuccessfulRevenue,\n      successfulOrdersCount: successfulOrders.length,\n    };\n  }, [items]);\n\n  return (\n    <div className=\"flex flex-col space-y-8 p-8\">\n      <Header\n        totalOrders={items.length}\n        totalRevenue={orderStats.totalRevenue}\n      />\n      <div className=\"grid grid-cols-3 gap-4\">\n        <OrderStatusChart statusCounts={orderStats.statusCounts} />\n        <InfoPanel\n          totalOrders={items.length}\n          statusCounts={orderStats.statusCounts}\n          totalRevenue={orderStats.totalRevenue}\n          totalSuccessfulRevenue={orderStats.totalSuccessfulRevenue}\n          successfulOrdersCount={orderStats.successfulOrdersCount}\n        />\n      </div>\n      <ClientOnly fallback={<LoadingComponent />}>\n        {() => (\n          <DataTable\n            data={items ?? []}\n            columns={columns}\n            filters={filters}\n            search=\"email\"\n          />\n        )}\n      </ClientOnly>\n    </div>\n  );\n}\n\nfunction Header({ totalOrders, totalRevenue }) {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"space-y-1\">\n        <h2 className=\"text-2xl font-semibold tracking-tight\">\n          Order Management\n        </h2>\n        <p className=\"text-sm text-muted-foreground\">\n          Overview and details of all orders\n        </p>\n      </div>\n      <div className=\"flex items-center space-x-4\">\n        <Badge variant=\"secondary\" className=\"text-lg\">\n          Total Orders: {totalOrders}\n        </Badge>\n        <Badge variant=\"secondary\" className=\"text-lg\">\n          Total Revenue: ${totalRevenue.toFixed(2)}\n        </Badge>\n      </div>\n    </div>\n  );\n}\n\nfunction OrderStatusChart({ statusCounts }) {\n  const data = Object.entries(statusCounts).map(([status, count]) => ({\n    name: status,\n    value: count,\n  }));\n\n  const COLORS = {\n    SUCCEEDED: \"#4CAF50\",\n    CANCELLED: \"#F44336\",\n    PROCESSING: \"#2196F3\",\n    REQUIRESPAYMENTMETHOD: \"#FFC107\",\n    REQUIRESCONFIRMATION: \"#FF9800\",\n    REQUIRESACTION: \"#9C27B0\",\n    REQUIRESCAPTURE: \"#00BCD4\",\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Order Status Distribution</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <PieChart>\n            <Pie\n              data={data}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={false}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n              label={({ name, percent }) =>\n                `${name} ${(percent * 100).toFixed(0)}%`\n              }\n            >\n              {data.map((entry, index) => (\n                <Cell\n                  key={`cell-${index}`}\n                  fill={COLORS[entry.name] || \"#000000\"}\n                />\n              ))}\n            </Pie>\n            <Tooltip />\n            <Legend />\n          </PieChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction InfoPanel({\n  totalOrders,\n  statusCounts,\n  totalRevenue,\n  totalSuccessfulRevenue,\n  successfulOrdersCount,\n}) {\n  return (\n    <Card className=\"col-span-2\">\n      <CardHeader>\n        <CardTitle>Order Statistics</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-3 gap-4\">\n          <StatCard\n            title=\"Total Orders\"\n            value={totalOrders}\n            Icon={ShoppingCart}\n          />\n          <StatCard\n            title=\"Successful Orders\"\n            value={successfulOrdersCount}\n            Icon={CheckCircle}\n          />\n          <StatCard\n            title=\"Pending Orders\"\n            value={statusCounts[\"PROCESSING\"] || 0}\n            Icon={Clock}\n          />\n          <StatCard\n            title=\"Cancelled Orders\"\n            value={statusCounts[\"CANCELLED\"] || 0}\n            Icon={XCircle}\n          />\n          <StatCard\n            title=\"Total Revenue\"\n            value={`$${totalRevenue.toFixed(2)}`}\n            Icon={DollarSign}\n          />\n          <StatCard\n            title=\"Successful Revenue\"\n            value={`$${totalSuccessfulRevenue.toFixed(2)}`}\n            Icon={DollarSign}\n          />\n        </div>\n        <div className=\"mt-4\">\n          <h3 className=\"text-lg font-semibold mb-2\">Conversion Rate</h3>\n          <div className=\"text-3xl font-bold\">\n            {((successfulOrdersCount / totalOrders) * 100).toFixed(2)}%\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction StatCard({ title, value, Icon }) {\n  return (\n    <div className=\"flex flex-col items-center p-4 bg-secondary rounded-lg\">\n      <Icon className=\"h-8 w-8 mb-2\" />\n      <div className=\"text-sm font-medium text-muted-foreground\">{title}</div>\n      <div className=\"text-2xl font-bold\">{value}</div>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.user.orders._index\table.tsx</source>
<document_content>import React, { useState } from \"react\";\nimport { z } from \"zod\";\nimport { ColumnDef, Row } from \"@tanstack/react-table\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DataTableColumnHeader } from \"@/components/data-table/data-table-column-header\";\nimport { Button } from \"@/components/custom/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { DotsHorizontalIcon } from \"@radix-ui/react-icons\";\nimport type { ZodSchema } from \"zod\";\nimport {\n  AlertDialog,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogCancel,\n  AlertDialogAction,\n} from \"@/components/ui/alert-dialog\";\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport { toast } from \"sonner\";\nimport { useNavigate } from \"@remix-run/react\";\n\n// Define the schema for the order\nconst orderSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  codeRepoId: z.string(),\n  status: z.enum([\n    \"REQUIRESPAYMENTMETHOD\",\n    \"REQUIRESCONFIRMATION\",\n    \"REQUIRESACTION\",\n    \"PROCESSING\",\n    \"REQUIRESCAPTURE\",\n    \"CANCELLED\",\n    \"SUCCEEDED\",\n  ]),\n  totalAmount: z.number(),\n  stripePaymentIntentId: z.string().nullable(),\n  stripePaymentMethodId: z.string().nullable(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  deletedAt: z.string().nullable(),\n  user: z.object({\n    email: z.string(),\n  }),\n  codeRepo: z.object({\n    name: z.string(),\n  }),\n});\n\nexport type OrderSchema = z.infer<typeof orderSchema>;\n\n// Status options for filter\nexport const statusOptions = [\n  { label: \"Requires Payment Method\", value: \"REQUIRESPAYMENTMETHOD\" },\n  { label: \"Requires Confirmation\", value: \"REQUIRESCONFIRMATION\" },\n  { label: \"Requires Action\", value: \"REQUIRESACTION\" },\n  { label: \"Processing\", value: \"PROCESSING\" },\n  { label: \"Requires Capture\", value: \"REQUIRESCAPTURE\" },\n  { label: \"Cancelled\", value: \"CANCELLED\" },\n  { label: \"Succeeded\", value: \"SUCCEEDED\" },\n];\n\ninterface DialogProps {\n  order: OrderSchema;\n  onClose: () => void;\n  onAction: (action: string) => Promise<void>;\n}\n\nconst ViewOrderDialog: React.FC<DialogProps> = ({\n  order,\n  onClose,\n  onAction,\n}) => {\n  const { codeRepo, totalAmount, status, createdAt } = order;\n\n  return (\n    <>\n      <AlertDialogHeader>\n        <AlertDialogTitle>Order Details</AlertDialogTitle>\n        <AlertDialogDescription>\n          View the details of your order.\n        </AlertDialogDescription>\n      </AlertDialogHeader>\n      <div className=\"my-4\">\n        <h3 className=\"font-semibold mb-2\">Order Information:</h3>\n        <p>Code Repository: {codeRepo.name}</p>\n        <p>Total Amount: ${totalAmount.toFixed(2)}</p>\n        <p>Status: {status}</p>\n        <p>Order Date: {new Date(createdAt).toLocaleString()}</p>\n      </div>\n      <AlertDialogFooter>\n        <AlertDialogCancel onClick={onClose}>Close</AlertDialogCancel>\n        {status === \"REQUIRESPAYMENTMETHOD\" && (\n          <AlertDialogAction onClick={() => onAction(\"pay\")}>\n            Complete Payment\n          </AlertDialogAction>\n        )}\n        {[\n          \"REQUIRESPAYMENTMETHOD\",\n          \"REQUIRESCONFIRMATION\",\n          \"REQUIRESACTION\",\n        ].includes(status) && (\n          <AlertDialogAction\n            onClick={() => onAction(\"cancel\")}\n            className=\"bg-red-600 hover:bg-red-700\"\n          >\n            Cancel Order\n          </AlertDialogAction>\n        )}\n      </AlertDialogFooter>\n    </>\n  );\n};\n\ninterface DataTableRowActionsProps<TData> {\n  row: Row<TData>;\n  tableSchema: ZodSchema<OrderSchema>;\n}\n\nexport function OrderTableRowActions<TData>({\n  row,\n  tableSchema,\n}: DataTableRowActionsProps<TData>) {\n  const order = tableSchema.parse(row.original);\n  const nav = useNavigate();\n  const [activeDialog, setActiveDialog] = useState<string | null>(null);\n\n  const handleAction = async (action: string) => {\n    try {\n      /* eslint-disable */\n      let url = `${window.ENV.BACKEND_URL}/api/v1/orders/${order.id}`;\n      let method = \"PUT\";\n      let body: { status?: string } = {};\n      /* eslint-enable */\n\n      if (action === \"pay\") {\n        nav(`/checkout/${order.stripePaymentIntentId}`);\n        // Redirect to payment page or open payment modal\n        // This is a placeholder and should be replaced with actual payment logic\n        toast.info(\"Redirecting to payment page...\");\n        return;\n      } else if (action === \"cancel\") {\n        body.status = \"CANCELLED\";\n      }\n\n      const res = await fetch(url, {\n        method,\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body),\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Oh no! Something went wrong!\");\n      }\n\n      toast.success(\n        `Order ${action === \"cancel\" ? \"cancelled\" : \"updated\"} successfully`,\n      );\n      window.location.reload();\n    } catch (e) {\n      showErrorToast(e);\n    }\n  };\n\n  const renderDialogContent = () => {\n    switch (activeDialog) {\n      case \"view\":\n        return (\n          <ViewOrderDialog\n            order={order}\n            onClose={() => setActiveDialog(null)}\n            onAction={handleAction}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <AlertDialog\n      open={!!activeDialog}\n      onOpenChange={() => setActiveDialog(null)}\n    >\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            className=\"flex h-8 w-8 p-0 data-[state=open]:bg-muted\"\n          >\n            <DotsHorizontalIcon className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Open menu</span>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-[160px]\">\n          <DropdownMenuItem onClick={() => setActiveDialog(\"view\")}>\n            View Order\n          </DropdownMenuItem>\n          {order.status === \"REQUIRESACTION\" && (\n            <DropdownMenuItem onClick={() => handleAction(\"pay\")}>\n              Complete Payment\n            </DropdownMenuItem>\n          )}\n          {[\"REQUIRESPAYMENTMETHOD\", \"REQUIRESCONFIRMATION\"].includes(\n            order.status,\n          ) && (\n            <DropdownMenuItem onClick={() => handleAction(\"cancel\")}>\n              Cancel Order\n            </DropdownMenuItem>\n          )}\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      <AlertDialogContent>{renderDialogContent()}</AlertDialogContent>\n    </AlertDialog>\n  );\n}\n\nexport const columns: ColumnDef<OrderSchema>[] = [\n  {\n    id: \"email\",\n    accessorKey: \"user.email\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"User Email\" />\n    ),\n    cell: ({ row }) => (\n      <div className=\"max-w-[200px] truncate\">{row.original.user.email}</div>\n    ),\n    enableSorting: true,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"codeRepo.name\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Code Repo\" />\n    ),\n    cell: ({ row }) => (\n      <div className=\"max-w-[200px] truncate\">{row.original.codeRepo.name}</div>\n    ),\n  },\n  {\n    accessorKey: \"totalAmount\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Amount\" />\n    ),\n    cell: ({ row }) => (\n      <div className=\"\">${row.getValue<number>(\"totalAmount\").toFixed(2)}</div>\n    ),\n  },\n  {\n    accessorKey: \"status\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Status\" />\n    ),\n    cell: ({ row }) => <div className=\"\">{row.getValue(\"status\")}</div>,\n    filterFn: (row, id, value) => {\n      return value.includes(row.getValue(id));\n    },\n  },\n  {\n    accessorKey: \"createdAt\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Created At\" />\n    ),\n    cell: ({ row }) => (\n      <div>{new Date(row.getValue<string>(\"createdAt\")).toLocaleString()}</div>\n    ),\n  },\n  {\n    accessorKey: \"updatedAt\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Updated At\" />\n    ),\n    cell: ({ row }) => (\n      <div>{new Date(row.getValue<string>(\"updatedAt\")).toLocaleString()}</div>\n    ),\n  },\n  {\n    id: \"actions\",\n    cell: ({ row }) => (\n      <OrderTableRowActions row={row} tableSchema={orderSchema} />\n    ),\n  },\n];\n\n// Export filters for use in the main component\nexport const filters = [\n  {\n    columnId: \"status\",\n    title: \"Status\",\n    options: statusOptions,\n  },\n];\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.user.purchases.$id.edit._index\route.tsx</source>
<document_content>import { useRef, useState, useEffect, useCallback } from \"react\";\nimport { injectCSS, injectTailwind } from \"@/integrations/monaco/inject-css\";\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@/components/ui/resizable\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useMonacoStore } from \"@/stores/monaco-store\";\nimport type { OnChange, OnMount } from \"@monaco-editor/react\";\nimport { LiveProvider, LiveError } from \"react-live\";\nimport Editor, { loader as monacoLoader } from \"@monaco-editor/react\";\nimport type {\n  IStandaloneCodeEditor,\n  Monaco,\n} from \"@/integrations/monaco/native.types\";\nimport { Layout, LayoutBody, LayoutHeader } from \"@/components/custom/layout\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { Link, json, useLoaderData, useParams } from \"@remix-run/react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { LoaderFunction } from \"@remix-run/node\";\nimport IframeRenderer from \"@/components/repo/editor-preview\";\nimport { EditorMenubar } from \"@/components/repo/editor-menubar\";\nimport { MonacoLoading } from \"@/components/repo/loading\";\nimport { useDebounce } from \"@/hooks/use-debounce\";\nimport type { Repo } from \"@/components/repo/card-repo-seller\";\nimport { setupLanguageService } from \"@/integrations/monaco/native.utils\";\nimport CodeAnalysis, {\n  PrivateCodeCheckResult,\n} from \"@/components/repo/code-analysis\";\n\nmonacoLoader.config({\n  paths: {\n    vs: \"https://cdn.jsdelivr.net/npm/monaco-editor@0.43.0/min/vs\",\n  },\n});\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  const { id } = params;\n  if (!id) {\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n  const cookieHeader = request.headers.get(\"Cookie\");\n\n  const response = await fetch(`${process.env.BACKEND_URL}/api/v1/repo/${id}`, {\n    credentials: \"include\",\n    headers: {\n      Cookie: cookieHeader?.toString() || \"\",\n    },\n  });\n\n  if (!response.ok) {\n    console.log(await response.json());\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n\n  const data = await response.json();\n\n  const analysisResponse = await fetch(\n    `${process.env.BACKEND_URL}/api/v1/code-analysis/${id}`,\n    {\n      credentials: \"include\",\n      headers: {\n        Cookie: cookieHeader?.toString() || \"\",\n      },\n    },\n  );\n\n  let codeAnalysis = null;\n  if (analysisResponse.ok) {\n    codeAnalysis = await analysisResponse.json();\n  }\n\n  return json({\n    repo: data.repo,\n    codeAnalysis: codeAnalysis,\n  });\n};\n\nexport function ErrorBoundary() {\n  return (\n    <div className=\"flex items-center justify-center h-screen\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404 - Repo Not Found</h1>\n        <p className=\"mb-4\">The repository you're looking for doesn't exist.</p>\n        <Link to=\"/app/user/purchases\">\n          <Button>Go Back to Repos</Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default function EditorLayout() {\n  const { repo, codeAnalysis } = useLoaderData<{\n    repo: Repo;\n    codeAnalysis: PrivateCodeCheckResult | null;\n  }>();\n  const { id: repoId } = useParams<{ id: string }>();\n  const [showCodeAnalysis, setShowCodeAnalysis] = useState<boolean>(false);\n  const [activeTab, setActiveTab] = useState<string>(\"main\");\n  const { setEditorValue, setCssValue, setEditorOptions } = useMonacoStore();\n\n  useEffect(() => {\n    const initializeEditor = () => {\n      setEditorValue(repo.sourceJs);\n      setCssValue(repo.sourceCss);\n      setEditorOptions({\n        language: repo.language === \"JSX\" ? \"javascript\" : \"typescript\",\n      });\n    };\n\n    initializeEditor();\n  }, [repoId, repo, setEditorValue, setCssValue, setEditorOptions]);\n\n  //const handleCodeCheck = async (): Promise<void> => {\n  //  setIsCheckingCode(true);\n  //  setCodeCheckProgress(0);\n  //  abortControllerRef.current = new AbortController();\n  //\n  //  try {\n  //    const response = await fetch(\n  //      `${window.ENV.BACKEND_URL}/api/v1/repo/${repo.id}/check`,\n  //      {\n  //        method: \"POST\",\n  //        credentials: \"include\",\n  //        headers: {\n  //          \"Content-Type\": \"application/json\",\n  //        },\n  //        signal: abortControllerRef.current.signal,\n  //      }\n  //    );\n  //\n  //    if (!response.ok) {\n  //      throw new Error(\"Failed to submit code check\");\n  //    }\n  //\n  //    const reader = response.body!.getReader();\n  //    await readStream(reader, (progress) => {\n  //      setCodeCheckProgress(progress);\n  //    });\n  //\n  //    toast.success(\"Code check completed successfully\");\n  //    window.location.reload();\n  //  } catch (error) {\n  //    if ((error as any).name === \"AbortError\") {\n  //      toast.info(\"Code check cancelled\");\n  //    } else {\n  //      console.error(\"Error submitting code check:\", error);\n  //      toast.error(\"Failed to submit code check. Please try again.\");\n  //    }\n  //  } finally {\n  //    setIsCheckingCode(false);\n  //    setShowCodeCheckDialog(false);\n  //    setCodeCheckProgress(0);\n  //    abortControllerRef.current = null;\n  //  }\n  //};\n  //\n  //const handleCancelCodeCheck = () => {\n  //  if (abortControllerRef.current) {\n  //    abortControllerRef.current.abort();\n  //  }\n  //  setShowCodeCheckDialog(false);\n  //};\n\n  return (\n    <Layout>\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"\">\n        <LayoutHeader className=\"flex flex-col gap-4 justify-start items-start\">\n          <Link to=\"/app/user/purchases\">\n            <Button>Back</Button>\n          </Link>\n\n          <div className=\"flex flex-row gap-4\">\n            <TabsList className=\"grid w-[400px] grid-cols-2\">\n              <TabsTrigger value=\"main\">react</TabsTrigger>\n              <TabsTrigger value=\"css\">css</TabsTrigger>\n            </TabsList>\n            <EditorMenubar />\n\n            <Button\n              onClick={() => setShowCodeAnalysis(true)}\n              disabled={!codeAnalysis}\n            >\n              View Code Analysis\n            </Button>\n          </div>\n        </LayoutHeader>\n        <LayoutBody>\n          <CodeRepoEditorPreview\n            repoId={repoId}\n            initialCode={repo.sourceJs}\n            initialCss={repo.sourceCss}\n            activeTab={activeTab as \"main\" | \"css\"}\n          />\n        </LayoutBody>\n      </Tabs>\n      {codeAnalysis && (\n        <CodeAnalysis\n          isOpen={showCodeAnalysis}\n          onClose={() => setShowCodeAnalysis(false)}\n          codeCheckResult={codeAnalysis}\n          repoName={repo.name}\n          repoLanguage={repo.language}\n          isPublicView={false}\n        />\n      )}\n    </Layout>\n  );\n}\n\nfunction CodeRepoEditorPreview({\n  repoId,\n  initialCode,\n  initialCss,\n  activeTab,\n}: {\n  repoId: string | undefined;\n  initialCode: string;\n  initialCss: string;\n  activeTab: string;\n}) {\n  const {\n    editorValue,\n    cssValue,\n    editorOptions,\n    handleEditorChange: storeHandleEditorChange,\n    setEditorValue,\n    setCssValue,\n  } = useMonacoStore();\n\n  const [renderValue, setRenderValue] = useState(\"\");\n  const jsEditorRef = useRef<IStandaloneCodeEditor | null>(null);\n  const cssEditorRef = useRef<IStandaloneCodeEditor | null>(null);\n  const monacoRef = useRef<Monaco | null>(null);\n  const debouncedJsValue = useDebounce(editorValue, 500);\n  const debouncedCssValue = useDebounce(cssValue, 500);\n\n  // Refs to hold the latest values\n  const latestEditorValueRef = useRef(editorValue);\n  const latestCssValueRef = useRef(cssValue);\n\n  // Update refs when values change\n  useEffect(() => {\n    latestEditorValueRef.current = editorValue;\n    latestCssValueRef.current = cssValue;\n  }, [editorValue, cssValue]);\n\n  // Set initial values and update when they change\n  useEffect(() => {\n    setEditorValue(initialCode);\n    setCssValue(initialCss);\n  }, [initialCode, initialCss, setEditorValue, setCssValue]);\n\n  // Update renderValue when editorValue or cssValue changes\n  useEffect(() => {\n    const importRegex = /^import\s.+?;?\s*$/gm;\n    const value = editorValue.replace(importRegex, \"\").trim();\n    setRenderValue(`\n      injectCSS(${JSON.stringify(cssValue)});\n      ${value}\n    `);\n  }, [editorValue, cssValue]);\n\n  const handleEditorBeforeMount = useCallback(async (monaco: Monaco) => {\n    await setupLanguageService(monaco);\n  }, []);\n\n  const updateEditorContent = useCallback(() => {\n    if (jsEditorRef.current && monacoRef.current) {\n      const model = jsEditorRef.current.getModel();\n      if (model && model.getValue() !== latestEditorValueRef.current) {\n        model.setValue(latestEditorValueRef.current);\n      }\n    }\n    if (cssEditorRef.current && monacoRef.current) {\n      const model = cssEditorRef.current.getModel();\n      if (model && model.getValue() !== latestCssValueRef.current) {\n        model.setValue(latestCssValueRef.current);\n      }\n    }\n  }, []);\n\n  const handleJsEditorDidMount: OnMount = useCallback(\n    (editor, monaco) => {\n      jsEditorRef.current = editor;\n      monacoRef.current = monaco;\n\n      const uri = monaco.Uri.file(\n        editorOptions.language === \"javascript\" ? \"index.jsx\" : \"index.tsx\",\n      );\n      let model = monaco.editor.getModel(uri);\n      if (!model) {\n        model = monaco.editor.createModel(\n          latestEditorValueRef.current,\n          editorOptions.language,\n          uri,\n        );\n      }\n      editor.setModel(model);\n      updateEditorContent();\n    },\n    [editorOptions.language, updateEditorContent],\n  );\n\n  const handleCssEditorDidMount: OnMount = useCallback(\n    (editor, monaco) => {\n      cssEditorRef.current = editor;\n      if (!monacoRef.current) monacoRef.current = monaco;\n\n      const uri = monaco.Uri.file(\"index.css\");\n      let model = monaco.editor.getModel(uri);\n      if (!model) {\n        model = monaco.editor.createModel(\n          latestCssValueRef.current,\n          \"css\",\n          uri,\n        );\n      }\n      editor.setModel(model);\n      updateEditorContent();\n    },\n    [updateEditorContent],\n  );\n\n  // Update editor content whenever activeTab changes\n  useEffect(() => {\n    updateEditorContent();\n  }, [activeTab, updateEditorContent]);\n\n  const handleEditorContentChange: OnChange = useCallback(\n    (value) => {\n      const language = activeTab === \"main\" ? editorOptions.language : \"css\";\n      storeHandleEditorChange(value ?? \"\", language);\n    },\n    [activeTab, editorOptions.language, storeHandleEditorChange],\n  );\n\n  return (\n    <div className=\"w-full h-full\">\n      <LiveProvider\n        code={renderValue}\n        noInline\n        scope={{ injectCSS, cssValue, injectTailwind }}\n      >\n        <ClientOnly fallback={<MonacoLoading />}>\n          {() => (\n            <ResizablePanelGroup\n              direction=\"horizontal\"\n              className=\"rounded-lg border\"\n            >\n              <ResizablePanel defaultSize={50}>\n                <ScrollArea className=\"flex min-h-screen h-full items-center justify-center\">\n                  <div\n                    className=\"w-full h-full\"\n                    style={{ display: activeTab === \"main\" ? \"block\" : \"none\" }}\n                  >\n                    <Editor\n                      height=\"100vh\"\n                      language={editorOptions.language}\n                      value={editorValue}\n                      beforeMount={handleEditorBeforeMount}\n                      onChange={handleEditorContentChange}\n                      theme={editorOptions.theme}\n                      options={{\n                        fontSize: editorOptions.fontSize,\n                        wordWrap: editorOptions.wordWrap,\n                        minimap: editorOptions.minimap,\n                        lineNumbers: editorOptions.lineNumbers,\n                      }}\n                      onMount={handleJsEditorDidMount}\n                      key={`js-editor-${repoId}`} // Add key to force remount\n                    />\n                  </div>\n                  <div\n                    className=\"w-full h-full\"\n                    style={{ display: activeTab === \"css\" ? \"block\" : \"none\" }}\n                  >\n                    <Editor\n                      height=\"100vh\"\n                      language=\"css\"\n                      value={cssValue}\n                      beforeMount={handleEditorBeforeMount}\n                      onChange={handleEditorContentChange}\n                      theme={editorOptions.theme}\n                      options={{\n                        fontSize: editorOptions.fontSize,\n                        wordWrap: editorOptions.wordWrap,\n                        minimap: editorOptions.minimap,\n                        lineNumbers: editorOptions.lineNumbers,\n                      }}\n                      onMount={handleCssEditorDidMount}\n                      key={`css-editor-${repoId}`} // Add key to force remount\n                    />\n                  </div>\n                </ScrollArea>\n              </ResizablePanel>\n              <ResizableHandle withHandle />\n              <ResizablePanel defaultSize={50}>\n                <div className=\"bg-slate-950 min-h-screen relative\">\n                  <div className=\"absolute bottom-0 left-0 right-0 top-0 bg-[linear-gradient(to_right,#4f4f4f2e_1px,transparent_1px),linear-gradient(to_bottom,#4f4f4f2e_1px,transparent_1px)] bg-[size:14px_24px]\">\n                    <IframeRenderer\n                      sourceJs={debouncedJsValue}\n                      sourceCss={debouncedCssValue}\n                      language={\n                        editorOptions.language === \"javascript\" ? \"JSX\" : \"TSX\"\n                      }\n                      name=\"preview\"\n                      className=\"h-full z-50\"\n                    />\n                    <LiveError className=\"text-red-800 bg-red-100 mt-2\" />\n                  </div>\n                </div>\n              </ResizablePanel>\n            </ResizablePanelGroup>\n          )}\n        </ClientOnly>\n      </LiveProvider>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.user.purchases._index\route.tsx</source>
<document_content>import React, { useState } from \"react\";\nimport { useLoaderData, useRouteError } from \"@remix-run/react\";\nimport { json, LoaderFunction, redirect } from \"@remix-run/node\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { z } from \"zod\";\nimport { Input } from \"@/components/ui/input\";\nimport { PlusIcon, SearchIcon } from \"lucide-react\";\nimport { Shell } from \"@/components/landing/shell\";\nimport ErrorComponent from \"@/components/error/500\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { checkAuthCookie } from \"@/lib/router-guard\";\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport RepoCard from \"@/components/repo/card-repo-user\";\n\nconst repoSchema = z.object({\n  id: z.string(),\n  sourceJs: z.string(),\n  sourceCss: z.string(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  name: z.string(),\n  description: z.string().nullable(),\n  language: z.enum([\"JSX\", \"TSX\"]),\n  price: z.number(),\n});\n\ntype Repo = z.infer<typeof repoSchema>;\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  if (!checkAuthCookie(request)) return redirect(\"/login\");\n\n  const cookieHeader = request.headers.get(\"Cookie\");\n  const res = await fetch(`${process.env.BACKEND_URL}/api/v1/repos/accessed`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Cookie: cookieHeader?.toString() ?? \"\",\n    },\n  });\n\n  if (!res.ok) throw new Error(\"Failed to fetch repositories\");\n\n  const data = await res.json();\n  const validatedData = z\n    .object({\n      accessibleRepos: z.array(repoSchema),\n    })\n    .parse(data);\n\n  return json({\n    repos: validatedData.accessibleRepos,\n    success: true,\n  });\n};\n\nexport const ErrorBoundary = () => {\n  const error = useRouteError();\n  return <ErrorComponent />;\n};\n\nexport default function RepoDashboard() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { repos } = useLoaderData<{ repos: Repo[] }>();\n\n  const filteredRepos = repos.filter(\n    (repo) =>\n      repo.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (repo.description &&\n        repo.description.toLowerCase().includes(searchTerm.toLowerCase())),\n  );\n\n  return (\n    <ClientOnly fallback={<LoadingComponent />}>\n      {() => (\n        <div className=\"w-full min-h-screen bg-gray-100 dark:bg-gray-900 flex flex-col\">\n          <main className=\"flex-1 py-8 px-6\">\n            <div className=\"max-w-7xl mx-auto\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                  Your Accessible Repos\n                </h1>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"relative\">\n                    <SearchIcon className=\"absolute left-2.5 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400\" />\n                    <Input\n                      type=\"search\"\n                      placeholder=\"Search repos...\"\n                      className=\"pl-8 w-[200px] sm:w-[300px]\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {filteredRepos.length === 0 ? (\n                <Shell className=\"flex flex-col items-center justify-center gap-2\">\n                  <h3 className=\"scroll-m-20 text-2xl font-semibold tracking-tight\">\n                    No Accessible Repos Found\n                  </h3>\n                  <p>You don't have access to any repositories yet.</p>\n                </Shell>\n              ) : (\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {filteredRepos.map((repo) => (\n                    <RepoCard key={repo.id} repo={repo} />\n                  ))}\n                </div>\n              )}\n            </div>\n          </main>\n        </div>\n      )}\n    </ClientOnly>\n  );\n}\n\nfunction LoadingComponent() {\n  return (\n    <div className=\"flex h-screen w-screen items-center justify-center\">\n      <div className=\"flex flex-col items-center space-y-4\">\n        <p className=\"text-gray-500 dark:text-gray-400\">\n          Please wait while we are preparing the content\n        </p>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-4 w-[250px]\" />\n            <Skeleton className=\"h-4 w-[200px]\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app.user._index\route.tsx</source>
<document_content>import { Skeleton } from \"@/components/ui/skeleton\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { LoaderFunction, json, redirect } from \"@remix-run/node\";\nimport { useLoaderData, useRouteError } from \"@remix-run/react\";\nimport ErrorComponent from \"@/components/error/500\";\nimport { checkAuthCookie } from \"@/lib/router-guard\";\n\nexport const ErrorBoundary = () => {\n  const error = useRouteError();\n  return <ErrorComponent />;\n};\n\n// Types (you may want to move these to a separate file)\ninterface DashboardData {\n  purchaseHistory: {\n    totalSpent: number;\n    componentsBought: number;\n    recentPurchases: Array<{\n      codeRepo: {\n        name: string;\n      };\n      createdAt: string;\n    }>;\n  };\n  accountInfo: {\n    email: string;\n    emailVerified: boolean;\n    profile?: {\n      profileImg?: string;\n      name?: string;\n    };\n  };\n  usageStatistics: {\n    mostUsedComponents: Array<{\n      name: string;\n      usageCount: number;\n    }>;\n  };\n  recommendations: {\n    recommendations: Array<{\n      name: string;\n    }>;\n  };\n}\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  if (!checkAuthCookie(request)) return redirect(\"/login\");\n\n  const cookieHeader = request.headers.get(\"Cookie\");\n  const res = await fetch(`${process.env.BACKEND_URL}/api/v1/user/dashboard`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Cookie: cookieHeader?.toString() ?? \"\",\n    },\n    credentials: \"include\",\n  });\n\n  if (!res.ok) throw new Error(\"Failed to load dashboard data\");\n\n  const data: DashboardData = await res.json();\n  return json({\n    dashboardData: data,\n    success: true,\n  });\n};\n\nexport default function UserDashboard() {\n  const { dashboardData } = useLoaderData<{ dashboardData: DashboardData }>();\n\n  return (\n    <div className=\"-mx-4 flex-1 overflow-auto px-4 py-1 lg:flex-row lg:space-x-12 lg:space-y-0\">\n      <ClientOnly fallback={<LoadingComponent />}>\n        {() => <DashboardContent data={dashboardData} />}\n      </ClientOnly>\n    </div>\n  );\n}\n\nfunction DashboardContent({ data }: { data: DashboardData }) {\n  const { purchaseHistory, accountInfo, usageStatistics, recommendations } =\n    data;\n\n  return (\n    <div className=\"space-y-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">User Dashboard</h1>\n\n      {/* Account Info */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Account Information</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center space-x-4\">\n            <Avatar>\n              <AvatarImage src={accountInfo.profile?.profileImg} />\n              <AvatarFallback>\n                {accountInfo.email[0].toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <p className=\"font-semibold\">\n                {accountInfo.profile?.name || \"N/A\"}\n              </p>\n              <p className=\"text-sm text-gray-500\">{accountInfo.email}</p>\n              <Badge\n                variant={accountInfo.emailVerified ? \"success\" : \"destructive\"}\n              >\n                {accountInfo.emailVerified ? \"Verified\" : \"Not Verified\"}\n              </Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Purchase History */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Purchase History</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p>Total Spent: ${purchaseHistory.totalSpent.toFixed(2)}</p>\n          <p>Components Bought: {purchaseHistory.componentsBought}</p>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Component</TableHead>\n                <TableHead>Date</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {purchaseHistory.recentPurchases.map((purchase, index) => (\n                <TableRow key={index}>\n                  <TableCell>{purchase.codeRepo.name}</TableCell>\n                  <TableCell>\n                    {new Date(purchase.createdAt).toLocaleDateString()}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Usage Statistics */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Usage Statistics</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={usageStatistics.mostUsedComponents}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip />\n              <Bar dataKey=\"usageCount\" fill=\"#8884d8\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n\n      {/* Recommendations */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recommended Components</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ul className=\"list-disc pl-5\">\n            {recommendations.recommendations.map((component, index) => (\n              <li key={index}>{component.name}</li>\n            ))}\n          </ul>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction LoadingComponent() {\n  return (\n    <div className=\"flex h-screen w-screen items-center justify-center\">\n      <div className=\"flex flex-col items-center space-y-4\">\n        <p className=\"text-gray-500 dark:text-gray-400\">\n          Please wait while we are preparing the dashboard\n        </p>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-4 w-[250px]\" />\n            <Skeleton className=\"h-4 w-[200px]\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\app._index\route.tsx</source>
<document_content>import { DataTableLoadingComponent } from \"@/components/dashboard/loading\";\nimport { withRoleBasedRedirect } from \"@/components/dashboard/role-redirect\";\n\nfunction Index() {\n  return (\n    <div>\n      <DataTableLoadingComponent />\n    </div>\n  );\n}\n\nexport default withRoleBasedRedirect(Index);\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\checkout.$id._index\route.tsx</source>
<document_content>import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"@remix-run/react\";\nimport { loadStripe, StripeElementsOptions } from \"@stripe/stripe-js\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { toast } from \"sonner\";\nimport { useCheckoutStore } from \"@/stores/checkout-store\";\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport CheckoutForm from \"@/components/checkout/payment-form\";\n\nconst stripePromise = loadStripe(\n  \"pk_test_51LAOCDBwwJRw41A69eBWMyPF0Vy1bWWJDmy3hjIRklMx8sgoJTw2NOi1Xp2yYnw68vxNhTmPZTklYaQ3DayxUnDI00yHqEAwld\",\n);\n\nexport default function Checkout() {\n  const navigate = useNavigate();\n  const {\n    clientSecret,\n    isLoading,\n    error,\n    repoId,\n    initializeCheckout,\n    setError,\n  } = useCheckoutStore();\n  const [isRecovering, setIsRecovering] = useState(false);\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\" && !stripePromise) {\n      console.log(\"Attempting to load Stripe...\");\n      if (!window.ENV || !window.ENV.STRIPE_PUBLISHABLE_KEY) {\n        console.error(\"Stripe publishable key is not set in window.ENV\");\n        setError(\"Stripe configuration is missing\");\n        return;\n      }\n    }\n  }, [setError]);\n\n  useEffect(() => {\n    if (repoId && !clientSecret) {\n      initializeCheckout(repoId).catch((err) => {\n        showErrorToast(err);\n        setError(\"Failed to initialize checkout. Please try again.\");\n      });\n    }\n  }, [repoId, clientSecret, initializeCheckout, setError]);\n\n  useEffect(() => {\n    if (clientSecret) {\n      checkPaymentIntentStatus(clientSecret);\n    }\n  }, [clientSecret]);\n\n  const checkPaymentIntentStatus = async (clientSecret: string) => {\n    try {\n      const stripe = await stripePromise;\n      if (!stripe) {\n        throw new Error(\"Stripe failed to load\");\n      }\n\n      const { paymentIntent } =\n        await stripe.retrievePaymentIntent(clientSecret);\n\n      if (paymentIntent && paymentIntent.status === \"succeeded\") {\n        setIsRecovering(true);\n        await processPaymentOnServer(paymentIntent.id);\n      }\n    } catch (error) {\n      console.error(\"Error checking payment intent status:\", error);\n      showErrorToast(error);\n    }\n  };\n\n  const processPaymentOnServer = async (paymentIntentId: string) => {\n    try {\n      if (!window.ENV || !window.ENV.BACKEND_URL) {\n        throw new Error(\"Backend URL is not configured\");\n      }\n\n      const response = await fetch(\n        `${window.ENV.BACKEND_URL}/api/v1/checkout/process-payment`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ paymentIntentId }),\n          credentials: \"include\",\n        },\n      );\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.message || \"Failed to process payment on server\",\n        );\n      }\n\n      const result = await response.json();\n      if (result.success) {\n        toast.success(\"Payment Successful\", {\n          description: \"Your payment has been processed successfully.\",\n        });\n        navigate(\"/checkout/success\", {\n          replace: true,\n          state: { orderId: result.orderId },\n        });\n      } else {\n        throw new Error(\"Failed to process payment on the server.\");\n      }\n    } catch (error) {\n      console.error(\"Error processing payment on server:\", error);\n      showErrorToast(error);\n      setIsRecovering(false);\n    }\n  };\n\n  console.log(\"Render state:\", {\n    repoId,\n    clientSecret,\n    isLoading,\n    error,\n    isRecovering,\n  });\n\n  if (error) {\n    return (\n      <Card className=\"w-full max-w-md mx-auto p-4\">\n        <CardHeader>\n          <CardTitle>Error</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-red-500\">{error}</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"w-full max-w-md mx-auto p-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Complete Your Purchase</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <p>Loading payment information...</p>\n          ) : isRecovering ? (\n            <p>Recovering previous payment. Please wait...</p>\n          ) : (\n            clientSecret && (\n              <Elements stripe={stripePromise} options={{ clientSecret }}>\n                <CheckoutForm />\n              </Elements>\n            )\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\checkout.success._index\route.tsx</source>
<document_content>export default function SuccessPayment() {\n  return (\n    <div>\n      <h1>Payment Success</h1>\n      <p>Thank you for your purchase!</p>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\dashboard.code\route.tsx</source>
<document_content>import { LazyImage } from \"@/components/custom/image\";\nimport { Link } from \"@remix-run/react\";\nimport {\n  File,\n  Home,\n  LineChart,\n  ListFilter,\n  MoreHorizontal,\n  Package,\n  Package2,\n  PanelLeft,\n  PlusCircle,\n  Search,\n  Settings,\n  ShoppingCart,\n  Users2,\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst Image = LazyImage;\n\nexport function Dashboard() {\n  return (\n    <div className=\"flex min-h-screen w-full flex-col bg-muted/40\">\n      <aside className=\"fixed inset-y-0 left-0 z-10 hidden w-14 flex-col border-r bg-background sm:flex\">\n        <nav className=\"flex flex-col items-center gap-4 px-2 sm:py-5\">\n          <Link\n            to=\"#\"\n            className=\"group flex h-9 w-9 shrink-0 items-center justify-center gap-2 rounded-full bg-primary text-lg font-semibold text-primary-foreground md:h-8 md:w-8 md:text-base\"\n          >\n            <Package2 className=\"h-4 w-4 transition-all group-hover:scale-110\" />\n            <span className=\"sr-only\">Acme Inc</span>\n          </Link>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Link\n                to=\"#\"\n                className=\"flex h-9 w-9 items-center justify-center rounded-lg text-muted-foreground transition-colors hover:text-foreground md:h-8 md:w-8\"\n              >\n                <Home className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Dashboard</span>\n              </Link>\n            </TooltipTrigger>\n            <TooltipContent side=\"right\">Dashboard</TooltipContent>\n          </Tooltip>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Link\n                to=\"#\"\n                className=\"flex h-9 w-9 items-center justify-center rounded-lg bg-accent text-accent-foreground transition-colors hover:text-foreground md:h-8 md:w-8\"\n              >\n                <ShoppingCart className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Orders</span>\n              </Link>\n            </TooltipTrigger>\n            <TooltipContent side=\"right\">Orders</TooltipContent>\n          </Tooltip>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Link\n                to=\"#\"\n                className=\"flex h-9 w-9 items-center justify-center rounded-lg text-muted-foreground transition-colors hover:text-foreground md:h-8 md:w-8\"\n              >\n                <Package className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Products</span>\n              </Link>\n            </TooltipTrigger>\n            <TooltipContent side=\"right\">Products</TooltipContent>\n          </Tooltip>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Link\n                to=\"#\"\n                className=\"flex h-9 w-9 items-center justify-center rounded-lg text-muted-foreground transition-colors hover:text-foreground md:h-8 md:w-8\"\n              >\n                <Users2 className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Customers</span>\n              </Link>\n            </TooltipTrigger>\n            <TooltipContent side=\"right\">Customers</TooltipContent>\n          </Tooltip>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Link\n                to=\"#\"\n                className=\"flex h-9 w-9 items-center justify-center rounded-lg text-muted-foreground transition-colors hover:text-foreground md:h-8 md:w-8\"\n              >\n                <LineChart className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Analytics</span>\n              </Link>\n            </TooltipTrigger>\n            <TooltipContent side=\"right\">Analytics</TooltipContent>\n          </Tooltip>\n        </nav>\n        <nav className=\"mt-auto flex flex-col items-center gap-4 px-2 sm:py-5\">\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Link\n                to=\"#\"\n                className=\"flex h-9 w-9 items-center justify-center rounded-lg text-muted-foreground transition-colors hover:text-foreground md:h-8 md:w-8\"\n              >\n                <Settings className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Settings</span>\n              </Link>\n            </TooltipTrigger>\n            <TooltipContent side=\"right\">Settings</TooltipContent>\n          </Tooltip>\n        </nav>\n      </aside>\n      <div className=\"flex flex-col sm:gap-4 sm:py-4 sm:pl-14\">\n        <header className=\"sticky top-0 z-30 flex h-14 items-center gap-4 border-b bg-background px-4 sm:static sm:h-auto sm:border-0 sm:bg-transparent sm:px-6\">\n          <Sheet>\n            <SheetTrigger asChild>\n              <Button size=\"icon\" variant=\"outline\" className=\"sm:hidden\">\n                <PanelLeft className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Toggle Menu</span>\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"left\" className=\"sm:max-w-xs\">\n              <nav className=\"grid gap-6 text-lg font-medium\">\n                <Link\n                  to=\"#\"\n                  className=\"group flex h-10 w-10 shrink-0 items-center justify-center gap-2 rounded-full bg-primary text-lg font-semibold text-primary-foreground md:text-base\"\n                >\n                  <Package2 className=\"h-5 w-5 transition-all group-hover:scale-110\" />\n                  <span className=\"sr-only\">Acme Inc</span>\n                </Link>\n                <Link\n                  to=\"#\"\n                  className=\"flex items-center gap-4 px-2.5 text-muted-foreground hover:text-foreground\"\n                >\n                  <Home className=\"h-5 w-5\" />\n                  Dashboard\n                </Link>\n                <Link\n                  to=\"#\"\n                  className=\"flex items-center gap-4 px-2.5 text-muted-foreground hover:text-foreground\"\n                >\n                  <ShoppingCart className=\"h-5 w-5\" />\n                  Orders\n                </Link>\n                <Link\n                  to=\"#\"\n                  className=\"flex items-center gap-4 px-2.5 text-foreground\"\n                >\n                  <Package className=\"h-5 w-5\" />\n                  Products\n                </Link>\n                <Link\n                  to=\"#\"\n                  className=\"flex items-center gap-4 px-2.5 text-muted-foreground hover:text-foreground\"\n                >\n                  <Users2 className=\"h-5 w-5\" />\n                  Customers\n                </Link>\n                <Link\n                  to=\"#\"\n                  className=\"flex items-center gap-4 px-2.5 text-muted-foreground hover:text-foreground\"\n                >\n                  <LineChart className=\"h-5 w-5\" />\n                  Settings\n                </Link>\n              </nav>\n            </SheetContent>\n          </Sheet>\n          <Breadcrumb className=\"hidden md:flex\">\n            <BreadcrumbList>\n              <BreadcrumbItem>\n                <BreadcrumbLink asChild>\n                  <Link to=\"#\">Dashboard</Link>\n                </BreadcrumbLink>\n              </BreadcrumbItem>\n              <BreadcrumbSeparator />\n              <BreadcrumbItem>\n                <BreadcrumbLink asChild>\n                  <Link to=\"#\">Products</Link>\n                </BreadcrumbLink>\n              </BreadcrumbItem>\n              <BreadcrumbSeparator />\n              <BreadcrumbItem>\n                <BreadcrumbPage>All Products</BreadcrumbPage>\n              </BreadcrumbItem>\n            </BreadcrumbList>\n          </Breadcrumb>\n          <div className=\"relative ml-auto flex-1 md:grow-0\">\n            <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n            <Input\n              type=\"search\"\n              placeholder=\"Search...\"\n              className=\"w-full rounded-lg bg-background pl-8 md:w-[200px] lg:w-[336px]\"\n            />\n          </div>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                className=\"overflow-hidden rounded-full\"\n              >\n                <Image\n                  src=\"/placeholder-user.jpg\"\n                  width={36}\n                  height={36}\n                  alt=\"Avatar\"\n                  className=\"overflow-hidden rounded-full\"\n                />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuLabel>My Account</DropdownMenuLabel>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem>Settings</DropdownMenuItem>\n              <DropdownMenuItem>Support</DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem>Logout</DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </header>\n        <main className=\"grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8\">\n          <Tabs defaultValue=\"all\">\n            <div className=\"flex items-center\">\n              <TabsList>\n                <TabsTrigger value=\"all\">All</TabsTrigger>\n                <TabsTrigger value=\"active\">Active</TabsTrigger>\n                <TabsTrigger value=\"draft\">Draft</TabsTrigger>\n                <TabsTrigger value=\"archived\" className=\"hidden sm:flex\">\n                  Archived\n                </TabsTrigger>\n              </TabsList>\n              <div className=\"ml-auto flex items-center gap-2\">\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\" className=\"h-8 gap-1\">\n                      <ListFilter className=\"h-3.5 w-3.5\" />\n                      <span className=\"sr-only sm:not-sr-only sm:whitespace-nowrap\">\n                        Filter\n                      </span>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuLabel>Filter by</DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuCheckboxItem checked>\n                      Active\n                    </DropdownMenuCheckboxItem>\n                    <DropdownMenuCheckboxItem>Draft</DropdownMenuCheckboxItem>\n                    <DropdownMenuCheckboxItem>\n                      Archived\n                    </DropdownMenuCheckboxItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n                <Button size=\"sm\" variant=\"outline\" className=\"h-8 gap-1\">\n                  <File className=\"h-3.5 w-3.5\" />\n                  <span className=\"sr-only sm:not-sr-only sm:whitespace-nowrap\">\n                    Export\n                  </span>\n                </Button>\n                <Button size=\"sm\" className=\"h-8 gap-1\">\n                  <PlusCircle className=\"h-3.5 w-3.5\" />\n                  <span className=\"sr-only sm:not-sr-only sm:whitespace-nowrap\">\n                    Add Product\n                  </span>\n                </Button>\n              </div>\n            </div>\n            <TabsContent value=\"all\">\n              <Card x-chunk=\"dashboard-06-chunk-0\">\n                <CardHeader>\n                  <CardTitle>Products</CardTitle>\n                  <CardDescription>\n                    Manage your products and view their sales performance.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead className=\"hidden w-[100px] sm:table-cell\">\n                          <span className=\"sr-only\">Image</span>\n                        </TableHead>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead className=\"hidden md:table-cell\">\n                          Price\n                        </TableHead>\n                        <TableHead className=\"hidden md:table-cell\">\n                          Total Sales\n                        </TableHead>\n                        <TableHead className=\"hidden md:table-cell\">\n                          Created at\n                        </TableHead>\n                        <TableHead>\n                          <span className=\"sr-only\">Actions</span>\n                        </TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      <TableRow>\n                        <TableCell className=\"hidden sm:table-cell\">\n                          <Image\n                            alt=\"Product image\"\n                            className=\"aspect-square rounded-md object-cover\"\n                            height={64}\n                            src=\"/placeholder.svg\"\n                            width={64}\n                          />\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          Laser Lemonade Machine\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">Draft</Badge>\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          $499.99\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          25\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          2023-07-12 10:42 AM\n                        </TableCell>\n                        <TableCell>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button\n                                aria-haspopup=\"true\"\n                                size=\"icon\"\n                                variant=\"ghost\"\n                              >\n                                <MoreHorizontal className=\"h-4 w-4\" />\n                                <span className=\"sr-only\">Toggle menu</span>\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                              <DropdownMenuItem>Edit</DropdownMenuItem>\n                              <DropdownMenuItem>Delete</DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell className=\"hidden sm:table-cell\">\n                          <Image\n                            alt=\"Product image\"\n                            className=\"aspect-square rounded-md object-cover\"\n                            height={64}\n                            src=\"/placeholder.svg\"\n                            width={64}\n                          />\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          Hypernova Headphones\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">Active</Badge>\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          $129.99\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          100\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          2023-10-18 03:21 PM\n                        </TableCell>\n                        <TableCell>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button\n                                aria-haspopup=\"true\"\n                                size=\"icon\"\n                                variant=\"ghost\"\n                              >\n                                <MoreHorizontal className=\"h-4 w-4\" />\n                                <span className=\"sr-only\">Toggle menu</span>\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                              <DropdownMenuItem>Edit</DropdownMenuItem>\n                              <DropdownMenuItem>Delete</DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell className=\"hidden sm:table-cell\">\n                          <Image\n                            alt=\"Product image\"\n                            className=\"aspect-square rounded-md object-cover\"\n                            height={64}\n                            src=\"/placeholder.svg\"\n                            width={64}\n                          />\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          AeroGlow Desk Lamp\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">Active</Badge>\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          $39.99\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          50\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          2023-11-29 08:15 AM\n                        </TableCell>\n                        <TableCell>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button\n                                aria-haspopup=\"true\"\n                                size=\"icon\"\n                                variant=\"ghost\"\n                              >\n                                <MoreHorizontal className=\"h-4 w-4\" />\n                                <span className=\"sr-only\">Toggle menu</span>\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                              <DropdownMenuItem>Edit</DropdownMenuItem>\n                              <DropdownMenuItem>Delete</DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell className=\"hidden sm:table-cell\">\n                          <Image\n                            alt=\"Product image\"\n                            className=\"aspect-square rounded-md object-cover\"\n                            height={64}\n                            src=\"/placeholder.svg\"\n                            width={64}\n                          />\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          TechTonic Energy Drink\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"secondary\">Draft</Badge>\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          $2.99\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          0\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          2023-12-25 11:59 PM\n                        </TableCell>\n                        <TableCell>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button\n                                aria-haspopup=\"true\"\n                                size=\"icon\"\n                                variant=\"ghost\"\n                              >\n                                <MoreHorizontal className=\"h-4 w-4\" />\n                                <span className=\"sr-only\">Toggle menu</span>\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                              <DropdownMenuItem>Edit</DropdownMenuItem>\n                              <DropdownMenuItem>Delete</DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell className=\"hidden sm:table-cell\">\n                          <Image\n                            alt=\"Product image\"\n                            className=\"aspect-square rounded-md object-cover\"\n                            height={64}\n                            src=\"/placeholder.svg\"\n                            width={64}\n                          />\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          Gamer Gear Pro Controller\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">Active</Badge>\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          $59.99\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          75\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          2024-01-01 12:00 AM\n                        </TableCell>\n                        <TableCell>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button\n                                aria-haspopup=\"true\"\n                                size=\"icon\"\n                                variant=\"ghost\"\n                              >\n                                <MoreHorizontal className=\"h-4 w-4\" />\n                                <span className=\"sr-only\">Toggle menu</span>\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                              <DropdownMenuItem>Edit</DropdownMenuItem>\n                              <DropdownMenuItem>Delete</DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell className=\"hidden sm:table-cell\">\n                          <Image\n                            alt=\"Product image\"\n                            className=\"aspect-square rounded-md object-cover\"\n                            height={64}\n                            src=\"/placeholder.svg\"\n                            width={64}\n                          />\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          Luminous VR Headset\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">Active</Badge>\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          $199.99\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          30\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          2024-02-14 02:14 PM\n                        </TableCell>\n                        <TableCell>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button\n                                aria-haspopup=\"true\"\n                                size=\"icon\"\n                                variant=\"ghost\"\n                              >\n                                <MoreHorizontal className=\"h-4 w-4\" />\n                                <span className=\"sr-only\">Toggle menu</span>\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                              <DropdownMenuItem>Edit</DropdownMenuItem>\n                              <DropdownMenuItem>Delete</DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </TableCell>\n                      </TableRow>\n                    </TableBody>\n                  </Table>\n                </CardContent>\n                <CardFooter>\n                  <div className=\"text-xs text-muted-foreground\">\n                    Showing <strong>1-10</strong> of <strong>32</strong>{\" \"}\n                    products\n                  </div>\n                </CardFooter>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </main>\n      </div>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\legal.privacy\route.tsx</source>
<document_content>import Navbar from \"@/components/landing/navbar\";\nimport Footer from \"@/components/landing/footer\";\nimport { Shell } from \"@/components/landing/shell\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"@remix-run/react\";\n\nexport function PrivacyPolicy() {\n  return (\n    <Shell className=\"lg:px-32\">\n      <h1 className=\"scroll-m-20 text-4xl font-extrabold tracking-tight lg:text-5xl\">\n        Privacy Policy\n      </h1>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        1. Introduction\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        We value your privacy and are committed to protecting your personal\n        information. This privacy policy outlines how we collect, use, and\n        protect your information when you use our application.\n      </p>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        2. Information We Collect\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        We collect various types of information in connection with the services\n        we provide, including:\n      </p>\n      <ul className=\"my-6 ml-6 list-disc [&>li]:mt-2\">\n        <li>\n          Personal Information: Information that can be used to identify you,\n          such as your name, email address, and contact details.\n        </li>\n        <li>\n          Usage Data: Information about how you use our application, such as\n          your browsing actions and patterns.\n        </li>\n        <li>\n          Technical Data: Information about your device, such as IP address,\n          browser type, and operating system.\n        </li>\n      </ul>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        3. How We Use Your Information\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        We use your information for the following purposes:\n      </p>\n      <ul className=\"my-6 ml-6 list-disc [&>li]:mt-2\">\n        <li>To provide and maintain our services.</li>\n        <li>To notify you about changes to our services.</li>\n        <li>\n          To allow you to participate in interactive features of our application\n          when you choose to do so.\n        </li>\n        <li>To provide customer support.</li>\n        <li>\n          To gather analysis or valuable information so that we can improve our\n          services.\n        </li>\n        <li>To monitor the usage of our application.</li>\n        <li>To detect, prevent, and address technical issues.</li>\n      </ul>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        4. Sharing Your Information\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        We do not sell, trade, or otherwise transfer to outside parties your\n        personally identifiable information except in the following\n        circumstances:\n      </p>\n      <ul className=\"my-6 ml-6 list-disc [&>li]:mt-2\">\n        <li>With your consent.</li>\n        <li>\n          For external processing with trusted partners who perform services on\n          our behalf.\n        </li>\n        <li>\n          For legal reasons, such as to comply with a subpoena or similar legal\n          process.\n        </li>\n      </ul>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        5. Security of Your Information\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        We take reasonable measures to protect your personal information from\n        unauthorized access, use, or disclosure. However, no method of\n        transmission over the internet, or method of electronic storage, is 100%\n        secure, and we cannot guarantee its absolute security.\n      </p>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        6. Your Data Protection Rights\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        Depending on your location, you may have the following rights regarding\n        your personal data:\n      </p>\n      <ul className=\"my-6 ml-6 list-disc [&>li]:mt-2\">\n        <li>\n          The right to access – You have the right to request copies of your\n          personal data.\n        </li>\n        <li>\n          The right to rectification – You have the right to request that we\n          correct any information you believe is inaccurate or complete\n          information you believe is incomplete.\n        </li>\n        <li>\n          The right to erasure – You have the right to request that we erase\n          your personal data, under certain conditions.\n        </li>\n        <li>\n          The right to restrict processing – You have the right to request that\n          we restrict the processing of your personal data, under certain\n          conditions.\n        </li>\n        <li>\n          The right to object to processing – You have the right to object to\n          our processing of your personal data, under certain conditions.\n        </li>\n        <li>\n          The right to data portability – You have the right to request that we\n          transfer the data that we have collected to another organization, or\n          directly to you, under certain conditions.\n        </li>\n      </ul>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        7. Changes to This Privacy Policy\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        We may update our privacy policy from time to time. We will notify you\n        of any changes by posting the new privacy policy on this page. You are\n        advised to review this privacy policy periodically for any changes.\n        Changes to this privacy policy are effective when they are posted on\n        this page.\n      </p>\n    </Shell>\n  );\n}\n\nexport default function Layout() {\n  return (\n    <>\n      <Navbar />\n      <div className=\"w-full bg-black dark:bg-grid-white/[0.1] bg-grid-black/[0.2] pb-20 pt-32\">\n        <div className=\"md:max-w-4xl mx-auto bg-transparent max-w-2xl lg:px-0 px-4\">\n          <Button className=\"\" variant=\"link\">\n            <Link to=\"/\">&larr; Back to Home</Link>\n          </Button>\n          <PrivacyPolicy />\n          <Footer className=\"pt-10\" />\n        </div>\n      </div>\n    </>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\legal.terms\route.tsx</source>
<document_content>// import React from 'react';\nimport Navbar from \"@/components/landing/navbar\";\nimport Footer from \"@/components/landing/footer\";\nimport { Shell } from \"@/components/landing/shell\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"@remix-run/react\";\n\nexport function TermsOfService() {\n  return (\n    <Shell className=\"lg:px-32\">\n      <h1 className=\"scroll-m-20 text-4xl font-extrabold tracking-tight lg:text-5xl\">\n        Terms of Service\n      </h1>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        1. Acceptance of Terms\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        By using our application, you agree to comply with and be bound by the\n        following terms and conditions. If you do not agree to these terms, you\n        should not use this application.\n      </p>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        2. Description of Service\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        Our application provides an e-commerce platform that includes AI code\n        analysis tools for code quality, functionality, and security\n        assessments. The platform enables users to buy, sell, and share code\n        snippets and other digital assets.\n      </p>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        3. User Responsibilities\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        Users are responsible for:\n      </p>\n      <ul className=\"my-6 ml-6 list-disc [&>li]:mt-2\">\n        <li>Maintaining the confidentiality of their account information.</li>\n        <li>All activities that occur under their account.</li>\n        <li>\n          Ensuring that any information provided is accurate and up to date.\n        </li>\n      </ul>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        4. Prohibited Activities\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        Users are prohibited from:\n      </p>\n      <ul className=\"my-6 ml-6 list-disc [&>li]:mt-2\">\n        <li>Using the application for any illegal or unauthorized purpose.</li>\n        <li>\n          Interfering with or disrupting the operation of the application.\n        </li>\n        <li>\n          Uploading or distributing any viruses, malware, or other harmful\n          software.\n        </li>\n      </ul>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        5. Intellectual Property\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        All content on the application, including but not limited to text,\n        graphics, logos, and software, is the property of the application owner\n        or its content suppliers and is protected by intellectual property laws.\n      </p>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        6. Code Submission and Use\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        Users submitting code to the platform must ensure that:\n      </p>\n      <ul className=\"my-6 ml-6 list-disc [&>li]:mt-2\">\n        <li>They have the right to upload and share the code.</li>\n        <li>The code does not infringe on any third-party rights.</li>\n        <li>\n          The code complies with industry standards and does not contain harmful\n          elements.\n        </li>\n      </ul>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        Users downloading or purchasing code from the platform must:\n      </p>\n      <ul className=\"my-6 ml-6 list-disc [&>li]:mt-2\">\n        <li>Respect the intellectual property rights of the code creators.</li>\n        <li>\n          Use the code in accordance with any licensing agreements or terms\n          specified by the creator.\n        </li>\n      </ul>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        7. Limitation of Liability\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        The application owner is not liable for any damages arising from:\n      </p>\n      <ul className=\"my-6 ml-6 list-disc [&>li]:mt-2\">\n        <li>The use or inability to use the application.</li>\n        <li>Any unauthorized access to or alteration of user data.</li>\n        <li>\n          Any third-party content or services accessed through the application.\n        </li>\n      </ul>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        8. Privacy Policy\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        Our privacy policy, which can be found{\" \"}\n        <Button variant=\"link\" className=\"p-0 leading-7 text-md underline\">\n          <Link to=\"/legal/privacy\">here</Link>\n        </Button>\n        , explains how we collect, use, and protect your personal information.\n        By using the application, you agree to the terms of the privacy policy.\n      </p>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        9. Changes to Terms\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        We reserve the right to modify these terms at any time. Changes will be\n        effective immediately upon posting to the application. Continued use of\n        the application following any changes indicates acceptance of the new\n        terms.\n      </p>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        10. Termination\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        We reserve the right to terminate or suspend your access to the\n        application at any time, without notice, for any reason, including\n        violation of these terms.\n      </p>\n\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        11. Governing Law\n      </h2>\n      <p className=\"leading-7 [&:not(:first-child)]:mt-6\">\n        These terms are governed by and construed in accordance with the laws of\n        Malaysia. Any disputes arising under these terms shall be subject to the\n        exclusive jurisdiction of the courts of Malaysia.\n      </p>\n    </Shell>\n  );\n}\n\nexport default function Layout() {\n  return (\n    <>\n      <Navbar />\n      <div className=\"w-full bg-black dark:bg-grid-white/[0.1] bg-grid-black/[0.2] pb-20 pt-32\">\n        <div className=\"md:max-w-4xl mx-auto bg-transparent max-w-2xl lg:px-0 px-4\">\n          <Button className=\"\" variant=\"link\">\n            <Link to=\"/\">&larr; Back to Home</Link>\n          </Button>\n\n          <TermsOfService />\n          <Footer className=\"pt-10\" />\n        </div>\n      </div>\n    </>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\payment._index\route.tsx</source>
<document_content>import { loadStripe } from \"@stripe/stripe-js\";\nimport { PaymentElement, Elements } from \"@stripe/react-stripe-js\";\n\n// Make sure to call `loadStripe` outside of a component’s render to avoid\n// recreating the `Stripe` object on every render.\nconst stripePromise = loadStripe(\"pk_test_iO0OmHJjHiksR0HjyoUOSMNS0017Q3B9xA\");\n\nexport default function App() {\n  const options = {\n    // passing the client secret obtained from the server\n    clientSecret: \"{{CLIENT_SECRET}}\",\n  };\n\n  return (\n    <Elements stripe={stripePromise} options={options}>\n      <CheckoutForm />\n    </Elements>\n  );\n}\n\nconst CheckoutForm = () => {\n  return (\n    <form>\n      <PaymentElement />\n      <button>Submit</button>\n    </form>\n  );\n};\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\preview.repo.$id\route.tsx</source>
<document_content>import { useState, useEffect } from \"react\";\nimport { injectCSS } from \"@/integrations/monaco/inject-css\";\nimport { LoaderFunction, json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { LiveProvider, LivePreview } from \"react-live\";\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  const id = params.id;\n  const response = await fetch(\n    `${process.env.BACKEND_URL}/api/v1/repo/${id}/server`,\n    {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    },\n  );\n  const data = await response.json();\n  return json({\n    repo: data.repo,\n  });\n};\n\nexport default function ViewRepo() {\n  const { repo } = useLoaderData<{ repo: BackendCodeRepo }>();\n  const [renderValue, setRenderValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (!repo) {\n      setIsLoading(false);\n      return;\n    }\n\n    const prepareCode = () => {\n      const importRegex = /^import\s.+?;?\s*$/gm;\n      const cleanedJs = (repo.sourceJs || \"\").replace(importRegex, \"\").trim();\n\n      setRenderValue(`\n        injectCSS(\`${repo.sourceCss || \"\"}\`);\n        ${cleanedJs}\n      `);\n      setIsLoading(false);\n    };\n\n    prepareCode();\n  }, [repo]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-screen\">\n        Loading...\n      </div>\n    );\n  }\n\n  if (!repo) {\n    return (\n      <div className=\"flex min-h-screen flex-col items-center justify-center bg-gray-100 px-4 dark:bg-gray-900\">\n        <div className=\"mx-auto max-w-md text-center\">\n          <h1 className=\"text-6xl font-bold text-gray-900 dark:text-gray-50\">\n            500\n          </h1>\n          <p className=\"mt-4 text-lg text-gray-500 dark:text-gray-400\">\n            Oops, something went wrong on our end.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"\">\n      <LiveProvider code={renderValue} noInline scope={{ injectCSS }}>\n        <LivePreview />\n      </LiveProvider>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\r.$id\route.tsx</source>
<document_content>import Navbar from \"@/components/landing/navbar\";\nimport Footer from \"@/components/landing/footer\";\nimport { Shell } from \"@/components/landing/shell\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link, Outlet } from \"@remix-run/react\";\n\nexport default function Layout() {\n  return (\n    <>\n      <Navbar />\n      <div className=\"w-full bg-black dark:bg-grid-white/[0.1] bg-grid-black/[0.2] pb-20 pt-32\">\n        <div className=\"max-w-7xl mx-auto bg-transparent lg:px-0 px-4\">\n          <Shell>\n            <Outlet />\n          </Shell>\n          <Footer className=\"pt-10\" />\n        </div>\n      </div>\n    </>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\r.$id.view\route.tsx</source>
<document_content>import { injectCSS } from \"@/integrations/monaco/inject-css\";\nimport { getRepoById } from \"@/lib/fetcher/repo\";\nimport { LoaderFunction, redirect, json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { useEffect } from \"react\";\nimport { LiveProvider, LiveEditor, LiveError, LivePreview } from \"react-live\";\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  const id = params.id;\n  const data = await getRepoById(id ?? \"\");\n  return json({\n    repo: data,\n  });\n};\n\nexport default function ViewRepo() {\n  const { repo } = useLoaderData<typeof loader>() as { repo: BackendCodeRepo };\n  useEffect(() => {\n    //console.log(\"test\");\n  }, [repo]);\n  return (\n    <LiveProvider\n      code={repo.sourceJs}\n      noInline\n      scope={{ injectCSS, sourceCss: repo.sourceCss }}\n    >\n      <LivePreview />\n      <LiveError />\n    </LiveProvider>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\r.$id._index\route.tsx</source>
<document_content>import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { json, useLoaderData, useNavigate } from \"@remix-run/react\";\nimport {\n  SmartphoneIcon,\n  StarIcon,\n  ComputerIcon,\n  CopyIcon,\n  FlipVerticalIcon,\n  MaximizeIcon,\n  DollarSignIcon,\n  TabletIcon,\n  Code2,\n  DollarSign,\n  Clock,\n  Download,\n  Star,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenuTrigger,\n  DropdownMenuItem,\n  DropdownMenuContent,\n  DropdownMenu,\n} from \"@/components/ui/dropdown-menu\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { LoaderFunction } from \"@remix-run/node\";\nimport type { RepoResponse } from \"@/lib/fetcher/repo\";\nimport { toast } from \"sonner\";\nimport ReviewComponent from \"@/components/repo/review\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardFooter,\n} from \"@/components/ui/card\";\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport { useCheckoutStore } from \"@/stores/checkout-store\";\nimport CodeAnalysis from \"@/components/repo/code-analysis\";\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  const id = params.id;\n  let data;\n  try {\n    const response = await fetch(\n      `${process.env.BACKEND_URL}/api/v1/repo/${id}/public`,\n      {\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      },\n    );\n    if (response.ok) {\n      data = await response.json();\n    }\n  } catch (error: unknown) {\n    console.log(error);\n  }\n  return json({\n    repo: data?.repo,\n    codeCheck: data?.repoCodeCheck,\n  });\n};\n\nexport default function RepoPreviewComponent() {\n  const { repo, codeCheck } = useLoaderData<{\n    repo: RepoResponse | null;\n    codeCheck: PublicCodeCheckResult | null;\n  }>();\n  const [showCodeAnalysis, setShowCodeAnalysis] = useState(false);\n\n  if (!repo) {\n    return <div>Repository not found</div>;\n  }\n\n  const copyRepoLink = () => {\n    const repoLink = `${window?.ENV.APP_URL}/repo/${repo.id}`;\n    navigator.clipboard\n      .writeText(repoLink)\n      .then(() => {\n        toast.success(\"Repository link copied to clipboard!\");\n      })\n      .catch(() => {\n        toast.error(\"Failed to copy repository link.\");\n      });\n  };\n\n  return (\n    <div className=\"container mx-auto py-8 px-4 md:px-6\">\n      <ClientOnly>\n        {() => (\n          <>\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h1 className=\"text-5xl font-bold mb-2\">{repo.name}</h1>\n                <div className=\"flex items-center mt-2\">\n                  <DollarSignIcon className=\"w-4 h-4 mr-1 text-green-500\" />\n                  <span className=\"font-semibold\">\n                    ${repo.price.toFixed(2)}\n                  </span>\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => setShowCodeAnalysis(true)}\n                >\n                  View Code Analysis\n                </Button>\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button size=\"sm\" variant=\"outline\">\n                      <FlipVerticalIcon className=\"w-4 h-4 mr-2\" />\n                      More\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem onSelect={copyRepoLink}>\n                      <CopyIcon className=\"w-4 h-4 mr-2\" />\n                      Copy repository link\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            </div>\n            <div className=\"bg-muted/40 rounded-lg\">\n              <ResizablePanel>\n                <div className=\"h-screen overflow-scroll\">\n                  <iframe\n                    title={repo.id}\n                    src={`${window?.ENV.APP_URL}/preview/repo/${repo.id}`}\n                    key={repo.id}\n                    className=\"w-full h-full\"\n                    loading=\"lazy\"\n                  />\n                </div>\n              </ResizablePanel>\n            </div>\n\n            <div>\n              <Price repo={repo} />\n            </div>\n\n            <div>\n              <ReviewComponent repoId={repo.id} />\n            </div>\n\n            {codeCheck && (\n              <CodeAnalysis\n                isOpen={showCodeAnalysis}\n                onClose={() => setShowCodeAnalysis(false)}\n                codeCheckResult={codeCheck}\n                repoName={repo.name}\n                repoLanguage={repo.language}\n                isPublicView={true}\n              />\n            )}\n          </>\n        )}\n      </ClientOnly>\n    </div>\n  );\n}\n\ninterface ResizablePanelProps {\n  children: React.ReactNode;\n  initialWidth?: number;\n  minWidth?: number;\n  maxWidth?: number;\n}\n\nconst ResizablePanel: React.FC<ResizablePanelProps> = ({\n  children,\n  initialWidth = 1080,\n  minWidth = 320,\n  maxWidth = 1920,\n}) => {\n  const [width, setWidth] = useState(initialWidth);\n  const [isResizing, setIsResizing] = useState(false);\n  const startXRef = useRef(0);\n  const startWidthRef = useRef(0);\n  const isLeftResizeRef = useRef(false);\n\n  const mobileWidth = 375;\n  const tabletWidth = 768;\n  const desktopWidth = 1080;\n\n  const startResize = useCallback(\n    (\n      e:\n        | React.MouseEvent<HTMLButtonElement>\n        | React.TouchEvent<HTMLButtonElement>,\n      isLeft: boolean,\n    ) => {\n      setIsResizing(true);\n      startXRef.current = \"touches\" in e ? e.touches[0].clientX : e.clientX;\n      startWidthRef.current = width;\n      isLeftResizeRef.current = isLeft;\n    },\n    [width],\n  );\n\n  const stopResize = useCallback(() => {\n    setIsResizing(false);\n  }, []);\n\n  const resize = useCallback(\n    (e: MouseEvent | TouchEvent) => {\n      if (!isResizing) return;\n\n      const currentX = \"touches\" in e ? e.touches[0].clientX : e.clientX;\n      const diff = currentX - startXRef.current;\n      const newWidth = isLeftResizeRef.current\n        ? Math.max(\n            minWidth,\n            Math.min(maxWidth, startWidthRef.current - diff * 2),\n          )\n        : Math.max(\n            minWidth,\n            Math.min(maxWidth, startWidthRef.current + diff * 2),\n          );\n\n      setWidth(newWidth);\n    },\n    [isResizing, minWidth, maxWidth],\n  );\n\n  useEffect(() => {\n    const handleResize = (e: MouseEvent | TouchEvent) => resize(e);\n    const handleStopResize = () => stopResize();\n\n    if (isResizing) {\n      document.addEventListener(\"mousemove\", handleResize);\n      document.addEventListener(\"touchmove\", handleResize);\n      document.addEventListener(\"mouseup\", handleStopResize);\n      document.addEventListener(\"touchend\", handleStopResize);\n    }\n\n    return () => {\n      document.removeEventListener(\"mousemove\", handleResize);\n      document.removeEventListener(\"touchmove\", handleResize);\n      document.removeEventListener(\"mouseup\", handleStopResize);\n      document.removeEventListener(\"touchend\", handleStopResize);\n    };\n  }, [isResizing, resize, stopResize]);\n\n  const handleKeyDown = (\n    e: React.KeyboardEvent<HTMLButtonElement>,\n    isLeft: boolean,\n  ) => {\n    const step = 10;\n    if (e.key === \"ArrowLeft\") {\n      setWidth((w) => Math.max(minWidth, isLeft ? w + step : w - step));\n    } else if (e.key === \"ArrowRight\") {\n      setWidth((w) => Math.min(maxWidth, isLeft ? w - step : w + step));\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center w-full justify-center\">\n      <div className=\"w-full justify-center\">\n        <div className=\"flex space-x-2 mb-4 mt-4 border border-gray-800 rounded-lg bg-black w-full py-3 justify-center items-center\">\n          <Button\n            onClick={() => setWidth(mobileWidth)}\n            className=\"text-slate-400 hover:text-white\"\n            size=\"icon\"\n            variant=\"ghost\"\n          >\n            <SmartphoneIcon className=\"w-4 h-4\" />\n            <span className=\"sr-only\">Mobile view</span>\n          </Button>\n          <Separator orientation=\"vertical\" className=\"border-white h-8\" />\n          <Button\n            onClick={() => setWidth(tabletWidth)}\n            className=\"text-slate-400 hover:text-white\"\n            size=\"icon\"\n            variant=\"ghost\"\n          >\n            <TabletIcon className=\"w-4 h-4\" />\n            <span className=\"sr-only\">Tablet view</span>\n          </Button>\n          <Separator orientation=\"vertical\" className=\"border-white h-8\" />\n          <Button\n            onClick={() => setWidth(desktopWidth)}\n            className=\"text-slate-400 hover:text-white\"\n            size=\"icon\"\n            variant=\"ghost\"\n          >\n            <ComputerIcon className=\"w-4 h-4\" />\n            <span className=\"sr-only\">Desktop view</span>\n          </Button>\n        </div>\n      </div>\n      <div\n        className=\"relative mx-auto h-full overflow-visible border border-slate-850\"\n        style={{ width: `${width}px` }}\n      >\n        <button\n          aria-label=\"Resize panel from left\"\n          onMouseDown={(e) => startResize(e, true)}\n          onTouchStart={(e) => startResize(e, true)}\n          onKeyDown={(e) => handleKeyDown(e, true)}\n          className=\"absolute top-[50%] -left-2.5 w-2.5 cursor-ew-resize bg-transparent bg-gray-700 transition-colors h-10 rounded-lg\"\n        />\n        <button\n          aria-label=\"Resize panel from right\"\n          onMouseDown={(e) => startResize(e, false)}\n          onTouchStart={(e) => startResize(e, false)}\n          onKeyDown={(e) => handleKeyDown(e, false)}\n          className=\"absolute top-[50%] -right-2.5 w-2.5 cursor-ew-resize bg-transparent bg-gray-700 transition-colors h-10 rounded-lg\"\n        />\n        {children}\n      </div>\n    </div>\n  );\n};\n\nfunction Price({ repo }: { repo: RepoResponse }) {\n  const navigate = useNavigate();\n  const { clientSecret, handlePurchase, isLoading } = useCheckoutStore();\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  const onPurchaseClick = async () => {\n    try {\n      const success = await handlePurchase(repo.id);\n      if (success) {\n        if (clientSecret) navigate(`/checkout/${clientSecret}`);\n      } else {\n        throw new Error(\"Failed to initialize checkout\");\n      }\n    } catch (error) {\n      showErrorToast(error);\n    }\n  };\n\n  return (\n    <div className=\"w-full mx-auto p-4\">\n      <Card className=\"w-full shadow-lg\">\n        <CardHeader className=\"pb-2\">\n          <div className=\"flex items-center space-x-2\">\n            <Code2 className=\"h-6 w-6 text-primary\" />\n            <CardTitle className=\"text-2xl font-bold\">{repo.name}</CardTitle>\n          </div>\n          <CardDescription className=\"mt-2 text-base\">\n            {repo.description}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"pb-2\">\n          <div className=\"flex flex-wrap justify-between items-center mb-4\">\n            <Badge variant=\"outline\" className=\"text-sm px-3 py-1\">\n              {repo.language}\n            </Badge>\n            <Badge className=\"text-sm px-3 py-1\">{repo.status}</Badge>\n          </div>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n            <div className=\"flex items-center\">\n              <Clock className=\"h-5 w-5 text-gray-500 mr-2\" />\n              <span>Created {formatDate(repo.createdAt)}</span>\n            </div>\n          </div>\n          <div className=\"flex items-center justify-center bg-primary/10 rounded-lg p-4\">\n            <DollarSign className=\"h-10 w-10 text-primary mr-2\" />\n            <span className=\"text-5xl font-bold text-primary\">\n              ${repo.price.toFixed(2)}\n            </span>\n          </div>\n        </CardContent>\n        <CardFooter className=\"flex justify-center pt-4\">\n          <Button\n            size=\"lg\"\n            className=\"w-full sm:w-auto\"\n            onClick={onPurchaseClick}\n            disabled={isLoading}\n          >\n            {isLoading ? \"Processing...\" : \"Purchase Now\"}\n          </Button>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\repo.new\route.tsx</source>
<document_content>import { useRef, useState, useEffect } from \"react\";\nimport { getHighlighter } from \"shiki\";\nimport { injectCSS } from \"@/integrations/monaco/inject-css\";\nimport {\n  Menubar,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarSeparator,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n} from \"@/components/ui/menubar\";\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@/components/ui/resizable\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nimport { useMonacoStore } from \"@/stores/monaco-store\";\nimport type { OnMount } from \"@monaco-editor/react\";\nimport { LiveProvider, LivePreview, LiveError } from \"react-live\";\nimport Editor from \"@monaco-editor/react\";\nimport type {\n  IStandaloneCodeEditor,\n  Monaco,\n} from \"@/integrations/monaco/native.types\";\nimport { Layout, LayoutBody, LayoutHeader } from \"@/components/custom/layout\";\nimport { Spinner } from \"@/components/custom/spinner\";\nimport { ClientOnly } from \"remix-utils/client-only\";\n\n// Reusable function to set up LSP for JSX and TSX\nconst setupLanguageService = async (\n  monaco: Monaco,\n  language: \"javascript\" | \"typescript\",\n) => {\n  const compilerOptions = {\n    allowJs: true,\n    allowNonTsExtensions: true,\n    esModuleInterop: true,\n    isolatedModules: true,\n    jsx: monaco.languages.typescript.JsxEmit.ReactJSX,\n    moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,\n    noEmit: true,\n    skipLibCheck: true,\n    target: monaco.languages.typescript.ScriptTarget.Latest,\n    typeRoots: [\"node_modules/@types\"],\n    jsxFactory: \"React.createElement\",\n    jsxFragmentFactory: \"React.Fragment\",\n  };\n\n  const defaults =\n    language === \"javascript\"\n      ? monaco.languages.typescript.javascriptDefaults\n      : monaco.languages.typescript.typescriptDefaults;\n\n  defaults.setCompilerOptions(compilerOptions);\n  defaults.setEagerModelSync(true);\n\n  if (language === \"javascript\") {\n    defaults.setDiagnosticsOptions({\n      noSemanticValidation: false,\n      noSyntaxValidation: false,\n    });\n  }\n\n  // Fetch and add React types\n  const response = await fetch(\"https://unpkg.com/@types/react/index.d.ts\");\n  const reactTypes = await response.text();\n  const reactLiveTypes = `declare module 'react-dom' {\n    export const render: (props: any) => any;\n  }`;\n  const reactJSXRuntime = `declare module 'react/jsx-runtime' {\n    export default any;\n  }`;\n\n  defaults.addExtraLib(\n    reactTypes,\n    \"file:///node_modules/@types/react/index.d.ts\",\n  );\n  defaults.addExtraLib(\n    reactLiveTypes,\n    \"file:///node_modules/@types/react-dom/index.d.ts\",\n  );\n  defaults.addExtraLib(\n    reactJSXRuntime,\n    \"file:///node_modules/@types/react/jsx-runtime/index.d.ts\",\n  );\n};\n\nexport default function EditorLayout() {\n  return (\n    <Layout>\n      <Tabs defaultValue=\"main\" className=\"\">\n        <LayoutHeader>\n          <TabsList className=\"grid w-[400px] grid-cols-2\">\n            <TabsTrigger value=\"main\">index</TabsTrigger>\n            <TabsTrigger value=\"css\">css</TabsTrigger>\n          </TabsList>\n          <EditorMenubar />\n        </LayoutHeader>\n        <LayoutBody>\n          <CodeRepoEditorPreview />\n        </LayoutBody>\n      </Tabs>\n    </Layout>\n  );\n}\n\nfunction CodeRepoEditorPreview() {\n  const [\n    editorValue,\n    handleEditorChange,\n    cssValue,\n    handleCssChange,\n    editorOptions,\n  ] = useMonacoStore((state) => [\n    state.editorValue,\n    state.handleEditorChange,\n    state.cssValue,\n    state.handleCssChange,\n    state.editorOptions,\n  ]);\n  const [renderValue, setRenderValue] = useState(editorValue);\n  const editorRef = useRef<IStandaloneCodeEditor | null>(null);\n  const monacoRef = useRef<Monaco | null>(null);\n\n  useEffect(() => {\n    // Remove react import statements\n    const importRegex = /^import\s.+?;?\s*$/gm;\n    const value = editorValue.replace(importRegex, \"\").trim();\n    // Add import css back\n    setRenderValue(`\n      injectCSS(cssValue);\n      ${value}\n    `);\n  }, [editorValue, cssValue]);\n\n  useEffect(() => {\n    if (editorRef.current && monacoRef.current) {\n      const monaco = monacoRef.current;\n      const currentValue = editorRef.current.getValue();\n      const newModel = monaco.editor.createModel(\n        currentValue,\n        editorOptions.language,\n        monaco.Uri.file(\n          editorOptions.language === \"javascript\" ? \"index.jsx\" : \"index.tsx\",\n        ),\n      );\n      editorRef.current.setModel(newModel);\n    }\n  }, [editorOptions.language]);\n\n  const handleEditorBeforeMount = async (monaco: Monaco) => {\n    const highlighter = await getHighlighter({\n      themes: [\"vitesse-dark\", \"vitesse-light\"],\n      langs: [\"typescript\", \"javascript\"],\n    });\n    console.log(highlighter);\n\n    // Set up language services for both JavaScript and TypeScript\n    await setupLanguageService(monaco, \"javascript\");\n    await setupLanguageService(monaco, \"typescript\");\n  };\n\n  const handleEditorDidMount: OnMount = (editor, monaco) => {\n    editorRef.current = editor;\n    monacoRef.current = monaco;\n    const newModel = monaco.editor.createModel(\n      editor.getValue(),\n      editorOptions.language,\n      monaco.Uri.file(\n        editorOptions.language === \"javascript\" ? \"index.jsx\" : \"index.tsx\",\n      ),\n    );\n    editor.setModel(newModel);\n  };\n\n  const handleEditorCssDidMount: OnMount = (editor, monaco) => {\n    const newModel = monaco.editor.createModel(\n      editor.getValue(),\n      \"css\",\n      monaco.Uri.file(\"index.css\"),\n    );\n    editor.setModel(newModel);\n  };\n\n  return (\n    <div className=\"w-full h-full\">\n      <LiveProvider code={renderValue} noInline scope={{ injectCSS, cssValue }}>\n        <ClientOnly fallback={<MonacoLoading />}>\n          {() => (\n            <ResizablePanelGroup\n              direction=\"horizontal\"\n              className=\"rounded-lg border\"\n            >\n              <ResizablePanel defaultSize={50}>\n                <div className=\"flex min-h-screen h-full items-center justify-center\">\n                  <TabsContent value=\"main\" className=\"w-full h-full\">\n                    <Editor\n                      height=\"100vh\"\n                      language={editorOptions.language}\n                      value={editorValue}\n                      beforeMount={handleEditorBeforeMount}\n                      onChange={(value) => handleEditorChange(value ?? \"\")}\n                      theme={editorOptions.theme}\n                      options={{\n                        fontSize: editorOptions.fontSize,\n                        wordWrap: editorOptions.wordWrap,\n                      }}\n                      onMount={handleEditorDidMount}\n                    />\n                  </TabsContent>\n                  <TabsContent value=\"css\" className=\"w-full h-full\">\n                    <Editor\n                      height=\"100vh\"\n                      language=\"css\"\n                      value={cssValue}\n                      beforeMount={handleEditorBeforeMount}\n                      onChange={(value) => handleCssChange(value ?? \"\")}\n                      theme={editorOptions.theme}\n                      options={{\n                        fontSize: editorOptions.fontSize,\n                        wordWrap: editorOptions.wordWrap,\n                      }}\n                      onMount={handleEditorCssDidMount}\n                    />\n                  </TabsContent>\n                </div>\n              </ResizablePanel>\n              <ResizableHandle withHandle />\n              <ResizablePanel defaultSize={50}>\n                <div className=\"bg-white min-h-screen\">\n                  <LivePreview className=\"w-full\" />\n                  <LiveError className=\"text-red-800 bg-red-100 mt-2\" />\n                </div>\n              </ResizablePanel>\n            </ResizablePanelGroup>\n          )}\n        </ClientOnly>\n      </LiveProvider>\n    </div>\n  );\n}\n\nfunction MonacoLoading() {\n  return (\n    <div className=\"flex items-center justify-center w-full h-full\">\n      <Spinner />\n    </div>\n  );\n}\n\nexport function EditorMenubar() {\n  const [editorOptions, setEditorOptions] = useMonacoStore((state) => [\n    state.editorOptions,\n    state.setEditorOptions,\n  ]);\n\n  const handleChangeTheme = (theme: string) => {\n    setEditorOptions({ theme });\n  };\n\n  const handleChangeFontSize = (fontSize: number) => {\n    setEditorOptions({ fontSize });\n  };\n\n  const handleChangeLanguage = (language: \"javascript\" | \"typescript\") => {\n    setEditorOptions({ language });\n  };\n\n  return (\n    <Menubar>\n      <MenubarMenu>\n        <MenubarTrigger>Editor Options</MenubarTrigger>\n        <MenubarContent>\n          <MenubarSub>\n            <MenubarSubTrigger>Themes</MenubarSubTrigger>\n            <MenubarSubContent>\n              <MenubarItem onClick={() => handleChangeTheme(\"vs-dark\")}>\n                Dark Theme\n              </MenubarItem>\n              <MenubarItem onClick={() => handleChangeTheme(\"vs-light\")}>\n                Light Theme\n              </MenubarItem>\n              <MenubarItem onClick={() => handleChangeTheme(\"hc-black\")}>\n                High Contrast Black\n              </MenubarItem>\n            </MenubarSubContent>\n          </MenubarSub>\n          <MenubarSeparator />\n          <MenubarSub>\n            <MenubarSubTrigger>Font Sizes</MenubarSubTrigger>\n            <MenubarSubContent>\n              {[12, 14, 16, 18, 20, 22].map((size) => (\n                <MenubarItem\n                  key={size}\n                  onClick={() => handleChangeFontSize(size)}\n                >\n                  {size}\n                </MenubarItem>\n              ))}\n            </MenubarSubContent>\n          </MenubarSub>\n          <MenubarSeparator />\n          <MenubarItem onClick={() => setEditorOptions({ wordWrap: \"on\" })}>\n            Enable Word Wrap\n          </MenubarItem>\n          <MenubarItem onClick={() => setEditorOptions({ wordWrap: \"off\" })}>\n            Disable Word Wrap\n          </MenubarItem>\n          <MenubarSeparator />\n          <MenubarSub>\n            <MenubarSubTrigger>Language</MenubarSubTrigger>\n            <MenubarSubContent>\n              <MenubarItem onClick={() => handleChangeLanguage(\"typescript\")}>\n                TSX\n              </MenubarItem>\n              <MenubarItem onClick={() => handleChangeLanguage(\"javascript\")}>\n                JSX\n              </MenubarItem>\n            </MenubarSubContent>\n          </MenubarSub>\n        </MenubarContent>\n      </MenubarMenu>\n    </Menubar>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\search\route.tsx</source>
<document_content>import Navbar from \"@/components/landing/navbar\";\nimport Footer from \"@/components/landing/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link, Outlet } from \"@remix-run/react\";\n\nexport default function Layout() {\n  return (\n    <>\n      <Navbar />\n      <div className=\"w-full bg-black dark:bg-grid-white/[0.1] bg-grid-black/[0.2] pb-20 pt-32\">\n        <div className=\"md:max-w-4xl mx-auto bg-transparent max-w-2xl lg:px-0 px-4\">\n          <Button className=\"\" variant=\"link\">\n            <Link to=\"/\">&larr; Back to Home</Link>\n          </Button>\n          <div className=\"mt-5\">\n            <Outlet />\n          </div>\n          <Footer className=\"pt-10\" />\n        </div>\n      </div>\n    </>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\search._index\route.tsx</source>
<document_content>import React, { useEffect, useRef, useCallback } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command.client\";\nimport { Check, ChevronsUpDown, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useSearchStore } from \"@/stores/search-store\";\nimport { showErrorToast } from \"@/lib/handle-error\";\nimport { z } from \"zod\";\nimport { RepoCard } from \"@/components/repo/card\";\nimport { Shell } from \"@/components/landing/shell\";\nimport { Spinner } from \"@/components/custom/spinner\";\n\nconst SearchFilterSchema = z.object({\n  searchQuery: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  language: z.string().optional(),\n});\n\ntype SearchFilterSchemaType = z.infer<typeof SearchFilterSchema>;\n\nconst SearchComponent: React.FC<{\n  onSearch: (data: SearchFilterSchemaType) => void;\n}> = ({ onSearch }) => {\n  const { searchCriteria, setSearchCriteria } = useSearchStore();\n  const [tagInput, setTagInput] = React.useState(\"\");\n\n  const form = useForm<SearchFilterSchemaType>({\n    resolver: zodResolver(SearchFilterSchema),\n    defaultValues: searchCriteria,\n  });\n\n  const handleSearch = (data: SearchFilterSchemaType) => {\n    setSearchCriteria(data);\n    onSearch(data);\n  };\n\n  const addTag = (tag: string) => {\n    const trimmedTag = tag.trim();\n    if (trimmedTag && !form.getValues(\"tags\")?.includes(trimmedTag)) {\n      const updatedTags = [...(form.getValues(\"tags\") || []), trimmedTag];\n      form.setValue(\"tags\", updatedTags);\n      setSearchCriteria({ ...searchCriteria, tags: updatedTags });\n    }\n    setTagInput(\"\");\n  };\n\n  const removeTag = (tag: string) => {\n    const newTags = form.getValues(\"tags\")?.filter((t) => t !== tag) || [];\n    form.setValue(\"tags\", newTags);\n    setSearchCriteria({ ...searchCriteria, tags: newTags });\n  };\n\n  return (\n    <Shell>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSearch)} className=\"space-y-4\">\n          <FormField\n            control={form.control}\n            name=\"searchQuery\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Search</FormLabel>\n                <FormControl>\n                  <Input {...field} placeholder=\"Search...\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"tags\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Tags</FormLabel>\n                <FormControl>\n                  <div className=\"flex items-center\">\n                    <Input\n                      value={tagInput}\n                      onChange={(e) => setTagInput(e.target.value)}\n                      onKeyDown={(e) => {\n                        if (e.key === \"Enter\" || e.key === \",\") {\n                          e.preventDefault();\n                          addTag(tagInput);\n                        }\n                      }}\n                      placeholder=\"Enter a tag and press Enter\"\n                    />\n                    <Button\n                      type=\"button\"\n                      onClick={() => addTag(tagInput)}\n                      className=\"ml-2\"\n                    >\n                      Add Tag\n                    </Button>\n                  </div>\n                </FormControl>\n                <div className=\"flex flex-wrap gap-2 mt-2\">\n                  {field.value?.map((tag, index) => (\n                    <Badge key={index} className=\"flex items-center gap-1\">\n                      {tag}\n                      <X\n                        size={16}\n                        className=\"cursor-pointer\"\n                        onClick={() => removeTag(tag)}\n                      />\n                    </Badge>\n                  ))}\n                </div>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"language\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Language</FormLabel>\n                <FormControl>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        role=\"combobox\"\n                        aria-expanded={form.formState.isValid}\n                        className=\"w-full justify-between\"\n                      >\n                        {field.value || \"Select language\"}\n                        <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-full p-0\">\n                      <Command>\n                        <CommandInput placeholder=\"Search language...\" />\n                        <CommandList>\n                          <CommandEmpty>No option found.</CommandEmpty>\n                          <CommandGroup>\n                            {[\n                              { value: \"JSX\", label: \"JavaScript\" },\n                              { value: \"TSX\", label: \"TypeScript\" },\n                            ].map((option) => (\n                              <CommandItem\n                                key={option.value}\n                                value={option.value}\n                                onSelect={(currentValue) => {\n                                  const value =\n                                    currentValue === field.value\n                                      ? \"\"\n                                      : currentValue;\n                                  field.onChange(value);\n                                  setSearchCriteria({\n                                    ...searchCriteria,\n                                    language: value,\n                                  });\n                                }}\n                              >\n                                <Check\n                                  className={cn(\n                                    \"mr-2 h-4 w-4\",\n                                    field.value === option.value\n                                      ? \"opacity-100\"\n                                      : \"opacity-0\",\n                                  )}\n                                />\n                                {option.label}\n                              </CommandItem>\n                            ))}\n                          </CommandGroup>\n                        </CommandList>\n                      </Command>\n                    </PopoverContent>\n                  </Popover>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={useSearchStore.getState().isLoading}\n          >\n            {useSearchStore.getState().isLoading ? \"Searching...\" : \"Search\"}\n          </Button>\n        </form>\n      </Form>\n    </Shell>\n  );\n};\n\nconst SearchAndFilter: React.FC = () => {\n  const {\n    setIsLoading,\n    setResults,\n    setTotalResults,\n    setHasMore,\n    setCurrentPage,\n    currentPage,\n    searchCriteria,\n    results,\n    appendResults,\n    isLoading,\n    hasMore,\n  } = useSearchStore();\n\n  const loadingRef = useRef(false);\n\n  const performSearch = useCallback(\n    async (data: SearchFilterSchemaType, page: number = 1) => {\n      if (loadingRef.current) return;\n      loadingRef.current = true;\n      setIsLoading(true);\n\n      try {\n        const queryParams = new URLSearchParams({\n          page: page.toString(),\n          limit: \"10\",\n        });\n        if (data.searchQuery) queryParams.append(\"query\", data.searchQuery);\n        data.tags?.forEach((tag) => queryParams.append(\"tags\", tag));\n        if (data.language) queryParams.append(\"language\", data.language);\n\n        const response = await fetch(\n          `${window.ENV.BACKEND_URL}/api/v1/repos/search?${queryParams.toString()}`,\n          { method: \"GET\" },\n        );\n\n        const res = await response.json();\n        if (!response.ok) {\n          throw new Error(res.message);\n        }\n\n        if (page === 1) {\n          setResults(res.data);\n          setCurrentPage(1);\n        } else {\n          appendResults(res.data);\n        }\n        setTotalResults(res.meta.total);\n        setHasMore(\n          res.meta.total >\n            (page === 1 ? res.data.length : results.length + res.data.length),\n        );\n        setCurrentPage(page);\n      } catch (error) {\n        showErrorToast(error);\n      } finally {\n        setIsLoading(false);\n        loadingRef.current = false;\n      }\n    },\n    [\n      setIsLoading,\n      setResults,\n      setTotalResults,\n      setHasMore,\n      setCurrentPage,\n      results.length,\n      appendResults,\n    ],\n  );\n\n  useEffect(() => {\n    if (results.length === 0) {\n      performSearch(searchCriteria);\n    }\n  }, []);\n\n  const loadMoreData = useCallback(() => {\n    if (!isLoading && hasMore && !loadingRef.current) {\n      performSearch(searchCriteria, currentPage + 1);\n    }\n  }, [isLoading, hasMore, searchCriteria, currentPage, performSearch]);\n\n  const ResultsComponentWithInfiniteScroll: React.FC = () => {\n    const observer = useRef<IntersectionObserver | null>(null);\n    const lastRepoElementRef = useCallback(\n      (node: HTMLElement | null) => {\n        if (isLoading) return;\n        if (observer.current) observer.current.disconnect();\n        observer.current = new IntersectionObserver((entries) => {\n          if (entries[0].isIntersecting && hasMore) {\n            loadMoreData();\n          }\n        });\n        if (node) observer.current.observe(node);\n      },\n      [isLoading, hasMore],\n    );\n\n    return (\n      <Shell className=\"mt-4\">\n        {isLoading && results.length === 0 ? (\n          <div className=\"flex items-center justify-center mt-4\">\n            <Spinner />\n          </div>\n        ) : results.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {results.map((item, index) => (\n              <RepoCard\n                repo={item}\n                key={item.id}\n                ref={index === results.length - 1 ? lastRepoElementRef : null}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"flex items-center justify-center mt-4\">\n            <p>No results found. Try adjusting your search criteria.</p>\n          </div>\n        )}\n        {isLoading && results.length > 0 && (\n          <div className=\"flex items-center justify-center mt-4\">\n            <Spinner />\n          </div>\n        )}\n      </Shell>\n    );\n  };\n\n  return (\n    <>\n      <SearchComponent onSearch={(data) => performSearch(data)} />\n      <ResultsComponentWithInfiniteScroll />\n    </>\n  );\n};\n\nexport default SearchAndFilter;\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\support\route.tsx</source>
<document_content>import Navbar from \"@/components/landing/navbar\";\nimport Footer from \"@/components/landing/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link, Outlet } from \"@remix-run/react\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport default function Layout() {\n  return (\n    <>\n      <Navbar />\n      <div className=\"w-full bg-black dark:bg-grid-white/[0.1] bg-grid-black/[0.2] pb-20 pt-32\">\n        <div className=\"md:max-w-4xl mx-auto bg-transparent max-w-2xl lg:px-0 px-4\">\n          <Button className=\"\" variant=\"link\">\n            <Link to=\"/\">&larr; Back to Home</Link>\n          </Button>\n          <div className=\"flex flex-row p-2 border-border border rounded-lg bg-gray-800/50 items-center text-sm h-full\">\n            <Link\n              to=\"/support/ticket\"\n              className=\"text-gray-500 dark:text-gray-400 underline\"\n            >\n              <Button\n                className=\"mr-2 text-white text-lg underline\"\n                variant=\"link\"\n              >\n                Submit a ticket\n              </Button>\n            </Link>\n            <Separator orientation=\"vertical\" className=\"bg-white h-5 mr-2\" />\n            <Link\n              to=\"/support/pricing\"\n              className=\"text-gray-500 dark:text-gray-400 underline\"\n            >\n              <Button\n                className=\"mr-2 text-white text-lg underline\"\n                variant=\"link\"\n              >\n                Pricing\n              </Button>\n            </Link>\n            <Separator orientation=\"vertical\" />\n          </div>\n          <div className=\"mt-5\">\n            <Outlet />\n          </div>\n          <Footer className=\"pt-10\" />\n        </div>\n      </div>\n    </>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\support.pricing\route.tsx</source>
<document_content>import Footer from \"@/components/landing/footer\";\nimport { Shell } from \"@/components/landing/shell\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"@remix-run/react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport React from \"react\";\nimport { CircleCheckBig } from \"lucide-react\";\n\nfunction Pricing() {\n  const benefits = [\n    {\n      title: \"Revenue Generation\",\n      description:\n        \"Sellers can monetize their coding expertise by selling high-quality React component code snippets, providing a direct financial incentive.\",\n    },\n    {\n      title: \"Quality Assurance\",\n      description:\n        \"The platform's AI code analysis tool ensures that all code snippets meet high standards of quality and security, reducing the risk of integrating flawed or vulnerable code into projects.\",\n    },\n    {\n      title: \"Community and Network Building\",\n      description:\n        \"Kortex fosters a sense of community, allowing developers to showcase their work, collaborate with others, and build a reputation within the developer community.\",\n    },\n    {\n      title: \"Continuous Learning and Innovation\",\n      description:\n        \"The platform encourages developers to stay ahead of industry trends and best practices, fostering an environment of continuous improvement and innovation.\",\n    },\n    {\n      title: \"Confidence and Trust\",\n      description:\n        \"By ensuring high-quality, vetted code snippets, Kortex builds trust among buyers, enhancing the overall development experience and increasing the likelihood of repeat purchases from reliable sellers.\",\n    },\n  ];\n  return (\n    <div className=\"mx-auto max-w-3xl py-12 px-4 sm:px-6 lg:py-16 lg:px-8\">\n      <div className=\"text-center\">\n        <h1 className=\"scroll-m-20 text-4xl font-extrabold tracking-tight lg:text-5xl\">\n          Pricing\n        </h1>\n      </div>\n      <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n        Marketplace Commission Rates\n      </h2>\n      <p className=\"mt-4 text-lg text-gray-500 dark:text-gray-400\">\n        Understand our transparent commission structure and plan your business\n        growth accordingly.\n      </p>\n\n      <div className=\"mt-8 flex flex-col w-full\">\n        <div className=\"\">\n          <Card className=\"\">\n            <CardContent className=\"sm:pt-6 p-0\">\n              <Table className=\"\">\n                <TableHeader className=\"bg-gray-50 dark:bg-gray-800\">\n                  <TableRow>\n                    <TableHead\n                      className=\"py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 dark:text-gray-50 sm:pl-6\"\n                      scope=\"col\"\n                    >\n                      User Account Age\n                    </TableHead>\n                    <TableHead\n                      className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-50\"\n                      scope=\"col\"\n                    >\n                      Revenue Share\n                    </TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody className=\"divide-y divide-gray-200 bg-white dark:divide-gray-700 dark:bg-gray-900\">\n                  <TableRow>\n                    <TableCell className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 dark:text-gray-50 sm:pl-6\">\n                      Before 90 days\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                      100%\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 dark:text-gray-50 sm:pl-6\">\n                      After 90 Days\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                      95%\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <div className=\"mt-8\">\n        <h2 className=\"mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors first:mt-0\">\n          Key Benefits of Kortex for Sellers\n        </h2>\n        <ul className=\"my-6 ml-6 [&>li]:mt-2\">\n          {benefits.map((benefit, index) => (\n            <li key={index} className=\"flex gap-4 py-2 \">\n              <CircleCheckBig className=\"mr-4\" />\n              <span>\n                <strong>{benefit.title}:</strong> {benefit.description}\n              </span>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default function Layout() {\n  return (\n    <>\n      <Shell>\n        <Pricing />\n      </Shell>\n    </>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\support.ticket\route.tsx</source>
<document_content>import { Shell } from \"@/components/landing/shell\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  SelectValue,\n  SelectTrigger,\n  SelectItem,\n  SelectContent,\n  Select,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Form,\n  FormControl,\n  // FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useState } from \"react\";\nimport { Spinner } from \"@/components/custom/spinner\";\nimport { NewTicketSchema, createTicket } from \"@/lib/fetcher/support\";\n\ntype SupportFormData = z.infer<typeof NewTicketSchema>;\n\nfunction SupportCard() {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<SupportFormData>({\n    resolver: zodResolver(NewTicketSchema),\n    defaultValues: {\n      name: \"\",\n      title: \"\",\n      email: \"\",\n      type: \"\",\n      message: \"\",\n    },\n  });\n\n  const onSubmit = async (data: SupportFormData) => {\n    setIsLoading(true);\n    await createTicket({\n      name: data.name,\n      email: data.email,\n      title: data.title,\n      message: data.message,\n      type: data.type,\n    });\n    setIsLoading(false);\n  };\n\n  return (\n    <Shell>\n      <div className=\"mx-auto max-w-3xl py-12 px-4 sm:px-6 lg:py-16 lg:px-8\">\n        <div className=\"text-center\">\n          <h1 className=\"scroll-m-20 text-4xl font-extrabold tracking-tight lg:text-5xl\">\n            Submit support ticket\n          </h1>\n        </div>\n        <p className=\"mt-4 text-lg text-gray-500 dark:text-gray-400\">\n          Fill out the form below to get help from our support team.\n        </p>\n        <Form {...form}>\n          <form\n            onSubmit={form.handleSubmit(onSubmit)}\n            className=\"space-y-4 mt-8\"\n          >\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      id=\"name\"\n                      placeholder=\"Enter your name\"\n                      required\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title</FormLabel>\n                  <FormControl>\n                    <Input\n                      id=\"title\"\n                      placeholder=\"Enter your title\"\n                      required\n                      type=\"text\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      id=\"email\"\n                      placeholder=\"Enter your email\"\n                      required\n                      type=\"email\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"type\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Ticket type</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a type\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"general\">General</SelectItem>\n                      <SelectItem value=\"technical\">Technical</SelectItem>\n                      <SelectItem value=\"payment\">Payment</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"message\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Message</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      id=\"message\"\n                      placeholder=\"Describe your issue\"\n                      required\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading ? <Spinner /> : \"Submit\"}\n            </Button>\n          </form>\n        </Form>\n      </div>\n    </Shell>\n  );\n}\n\nexport default function Index() {\n  return (\n    <>\n      <SupportCard />\n    </>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\tickets\route.tsx</source>
<document_content>import React from \"react\";\nimport { Link, Outlet } from \"@remix-run/react\";\nimport { Layout, LayoutHeader, LayoutBody } from \"@/components/custom/layout\";\nimport DashboardSidebar, { LinkProps } from \"@/components/dashboard/sidebar\";\nimport {\n  adminSidebarLinks,\n  moderatorSidebarLinks,\n  sellerSidebarLinks,\n  buyerSidebarLinks,\n} from \"@/components/dashboard/constants\";\nimport { Settings } from \"lucide-react\";\n\ntype UserRole = \"admin\" | \"moderator\" | \"seller\" | \"buyer\";\n\nexport default function DashboardLayout() {\n  const [sidebarLinks, setSidebarLinks] = React.useState<LinkProps[]>([]);\n  const userRole = \"admin\"; // Replace this with dynamic role determination\n  React.useEffect(() => {\n    switch (userRole as UserRole) {\n      case \"admin\":\n        setSidebarLinks(adminSidebarLinks);\n        break;\n      case \"moderator\":\n        setSidebarLinks(moderatorSidebarLinks);\n        break;\n      case \"seller\":\n        setSidebarLinks(sellerSidebarLinks);\n        break;\n      case \"buyer\":\n        setSidebarLinks(buyerSidebarLinks);\n        break;\n      default:\n        setSidebarLinks(buyerSidebarLinks);\n    }\n  }, []);\n\n  const settingsLink: LinkProps = {\n    to: \"/settings/profile\",\n    icon: <Settings className=\"h-5 w-5\" />,\n    tooltip: \"Settings\",\n  };\n\n  return (\n    <div>\n      <DashboardSidebar\n        sidebarLinks={sidebarLinks}\n        settingsLink={settingsLink}\n      />\n      <div className=\"flex flex-col sm:gap-4 sm:py-4 sm:pl-14\">\n        <Layout className=\"flex min-h-screen w-full flex-col relative\">\n          <LayoutBody>\n            <main className=\"\">\n              <Outlet />\n            </main>\n          </LayoutBody>\n        </Layout>\n      </div>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\tickets.$id\route.tsx</source>
<document_content>import { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useNavigate } from \"@remix-run/react\";\nimport TicketIndex from \"../tickets._index/route\";\n\nexport default function EditTickets() {\n  const nav = useNavigate();\n  const close = () => nav(-1);\n\n  return (\n    <TicketIndex>\n      <div>test</div>\n    </TicketIndex>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\tickets._index\modify-ticket-component.tsx</source>
<document_content>import { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Spinner } from \"@/components/custom/spinner\";\nimport {\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectContent,\n  SelectItem,\n} from \"@/components/ui/select\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport {\n  EditTicketSchema,\n  fetchTicketData,\n  updateTicketStatus,\n} from \"@/lib/fetcher/support\";\n\ntype SupportFormData = z.infer<typeof EditTicketSchema>;\n\nexport function SupportCard({ ticketId }: { ticketId: string }) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [initialData, setInitialData] = useState<SupportFormData | null>(null);\n\n  const form = useForm<SupportFormData>({\n    resolver: zodResolver(EditTicketSchema),\n    defaultValues: {\n      status: initialData?.status || \"todo\",\n    },\n  });\n\n  useEffect(() => {\n    const ticketData = async () => {\n      const data = await fetchTicketData(ticketId);\n      setInitialData(data);\n    };\n    ticketData();\n  }, [ticketId, form]);\n\n  const onSubmit = async (data: SupportFormData) => {\n    await updateTicketStatus(ticketId, data);\n  };\n\n  return (\n    <ClientOnly>\n      {() => (\n        <div className=\"mx-auto max-w-3xl py-12 px-4 sm:px-6 lg:py-16 lg:px-8\">\n          <div className=\"text-center\">\n            <h1 className=\"scroll-m-20 text-4xl font-extrabold tracking-tight lg:text-5xl\">\n              Edit Ticket Status\n            </h1>\n          </div>\n          <p className=\"mt-4 text-lg text-gray-500 dark:text-gray-400\">\n            Update the status of your support ticket below.\n          </p>\n          <Form {...form}>\n            <form\n              onSubmit={form.handleSubmit(onSubmit)}\n              className=\"space-y-4 mt-8\"\n            >\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select a status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"todo\">Open</SelectItem>\n                        <SelectItem value=\"inProgress\">In Progress</SelectItem>\n                        <SelectItem value=\"backlog\">In Progress</SelectItem>\n                        <SelectItem value=\"done\">Closed</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? <Spinner /> : \"Update Status\"}\n              </Button>\n            </form>\n          </Form>\n        </div>\n      )}\n    </ClientOnly>\n  );\n}\n\nexport default function Index() {\n  const ticketId = \"your_ticket_id\"; // Replace with the actual ticket ID\n  return (\n    <>\n      <SupportCard ticketId={ticketId} />\n    </>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\tickets._index\route.tsx</source>
<document_content>// import React, { useEffect } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { DataTable } from \"@/components/data-table/data-table\";\nimport { columns, statuses } from \"./table-schema\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nimport { LoaderFunction, json, redirect } from \"@remix-run/node\";\nimport { useLoaderData, useRouteError } from \"@remix-run/react\";\nimport ErrorComponent from \"@/components/error/500\";\nimport { checkAuthCookie } from \"@/lib/router-guard\";\n\n// import { Clie}\nexport const ErrorBoundary = () => {\n  const error = useRouteError();\n  return <ErrorComponent />;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const cookieHeader = request.headers.get(\"Cookie\");\n  if (!checkAuthCookie(request)) return redirect(\"/login\");\n\n  const data = await fetch(\n    `${process.env.BACKEND_URL}/api/v1/support/tickets`,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Cookie: cookieHeader?.toString() ?? \"\",\n      },\n    },\n  ).then((res) => res.json());\n  console.log(data);\n  if (data.status !== \"success\")\n    throw new Error(\"Oh no! Something went wrong!\");\n  return json({\n    items: data.tickets ?? [],\n    sucess: data.ok,\n  });\n};\n\nconst filters = [\n  {\n    columnId: \"status\",\n    title: \"Status\",\n    options: statuses,\n  },\n  // {\n  //   columnId: \"email\",\n  //   title: \"Priority\",\n  //   options: [\n  //     { label: \"High\", value: \"high\" },\n  //     { label: \"Medium\", value: \"medium\" },\n  //     { label: \"Low\", value: \"low\" },\n  //   ],\n  // },\n];\n\nexport default function TicketIndex() {\n  const tickets = useLoaderData<typeof loader>();\n\n  return (\n    <div className=\"-mx-4 flex-1 overflow-auto px-4 py-1 lg:flex-row lg:space-x-12 lg:space-y-0\">\n      <ClientOnly fallback={<LoadingComponent />}>\n        {() => (\n          <>\n            <DataTable\n              data={tickets.items ?? []}\n              columns={columns}\n              filters={filters}\n            />\n          </>\n        )}\n      </ClientOnly>\n    </div>\n  );\n}\n\nfunction LoadingComponent() {\n  return (\n    <div className=\"flex h-screen w-screen items-center justify-center\">\n      <div className=\"flex flex-col items-center space-y-4\">\n        <p className=\"text-gray-500 dark:text-gray-400\">\n          Please wait while we are preparing the content\n        </p>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-4 w-[250px]\" />\n            <Skeleton className=\"h-4 w-[200px]\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\routes\tickets._index\table-schema.tsx</source>
<document_content>import { ColumnDef, Row } from \"@tanstack/react-table\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DataTableColumnHeader } from \"@/components/data-table/data-table-column-header\";\nimport { z } from \"zod\";\nimport {\n  ArrowDownIcon,\n  ArrowRightIcon,\n  ArrowUpIcon,\n  CheckCircledIcon,\n  CircleIcon,\n  // CrossCircledIcon,\n  QuestionMarkCircledIcon,\n  StopwatchIcon,\n  DotsHorizontalIcon,\n} from \"@radix-ui/react-icons\";\nimport type { ZodSchema } from \"zod\";\nimport { Button } from \"@/components/custom/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  // DropdownMenuRadioGroup,\n  // DropdownMenuRadioItem,\n  // DropdownMenuSeparator,\n  // DropdownMenuShortcut,\n  // DropdownMenuSub,\n  // DropdownMenuSubContent,\n  // DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { convertTimestamp } from \"@/lib/utils\";\nimport {\n  Dialog,\n  DialogContent,\n  // DialogDescription,\n  // DialogFooter,\n  // DialogHeader,\n  // DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { SupportCard } from \"./modify-ticket-component\";\n\ntype TableData = {\n  [key: string]: any;\n};\n\n// interface LabelOption {\n//   label: string;\n//   value: string;\n// }\n\ninterface DataTableRowActionsProps<TData> {\n  row: Row<TData>;\n  tableSchema: ZodSchema<TableData>;\n}\n\nexport function TicketTableRowActions<TData>({\n  row,\n  tableSchema,\n}: DataTableRowActionsProps<TData>) {\n  const ticket = tableSchema.parse(row.original);\n  return (\n    <Dialog>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            className=\"flex h-8 w-8 p-0 data-[state=open]:bg-muted\"\n          >\n            <DotsHorizontalIcon className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Open menu</span>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-[160px]\">\n          <DropdownMenuItem>\n            <DialogTrigger>Edit Ticket</DialogTrigger>\n          </DropdownMenuItem>\n          <DropdownMenuItem>Delete</DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <SupportCard ticketId={ticket.id} />\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport const labels = [\n  {\n    value: \"bug\",\n    label: \"Bug\",\n  },\n  {\n    value: \"feature\",\n    label: \"Feature\",\n  },\n  {\n    value: \"documentation\",\n    label: \"Documentation\",\n  },\n];\n\nexport const statuses = [\n  {\n    value: \"backlog\",\n    label: \"Backlog\",\n    icon: QuestionMarkCircledIcon,\n  },\n  {\n    value: \"todo\",\n    label: \"Todo\",\n    icon: CircleIcon,\n  },\n  {\n    value: \"inProgress\",\n    label: \"In Progress\",\n    icon: StopwatchIcon,\n  },\n  {\n    value: \"done\",\n    label: \"Done\",\n    icon: CheckCircledIcon,\n  },\n  // {\n  //   value: \"canceled\",\n  //   label: \"Canceled\",\n  //   icon: CrossCircledIcon,\n  // },\n];\n\nexport const priorities = [\n  {\n    label: \"Low\",\n    value: \"low\",\n    icon: ArrowDownIcon,\n  },\n  {\n    label: \"Medium\",\n    value: \"medium\",\n    icon: ArrowRightIcon,\n  },\n  {\n    label: \"High\",\n    value: \"high\",\n    icon: ArrowUpIcon,\n  },\n];\n\n// We're keeping a simple non-relational schema here.\n// IRL, you will have a schema for your data models.\nexport const ticketSchema = z.object({\n  id: z.string(),\n  email: z.string().email(),\n  title: z.string(),\n  content: z.string(),\n  status: z.string(),\n  type: z.string(),\n  createdAt: z.string().datetime(),\n  updatedAt: z.string().datetime(),\n});\n\nexport type TicketSchema = z.infer<typeof ticketSchema>;\n\nexport const columns: ColumnDef<TicketSchema>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"id\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Ticket Id\" />\n    ),\n    cell: ({ row }) => (\n      <div className=\"w-[80px] max-w-[80px] truncate\">{row.getValue(\"id\")}</div>\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"title\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Title\" />\n    ),\n    cell: ({ row }) => {\n      return (\n        <div className=\"flex space-x-2\">\n          <span className=\"max-w-32 truncate font-medium sm:max-w-72 md:max-w-[31rem] truncate\">\n            {row.getValue(\"title\")}\n          </span>\n        </div>\n      );\n    },\n  },\n  {\n    accessorKey: \"createdAt\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Created At\" />\n    ),\n    cell: ({ row }) => (\n      <div className=\"w-[100px] max-w-[100px] truncate\">\n        {convertTimestamp(row.getValue(\"createdAt\"))}\n      </div>\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"status\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Status\" />\n    ),\n    cell: ({ row }) => {\n      const status = statuses.find(\n        (status) => status.value === row.getValue(\"status\"),\n      );\n\n      if (!status) {\n        return null;\n      }\n\n      return (\n        <div className=\"flex w-[100px] items-center\">\n          {status.icon && (\n            <status.icon className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n          )}\n          <span>{status.label}</span>\n        </div>\n      );\n    },\n    filterFn: (row, id, value) => {\n      return value.includes(row.getValue(id));\n    },\n  },\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Email\" />\n    ),\n    cell: ({ row }) => {\n      return (\n        <div className=\"flex items-center\">\n          <span>{row.getValue(\"email\")}</span>\n        </div>\n      );\n    },\n    filterFn: (row, id, value) => {\n      return value.includes(row.getValue(id));\n    },\n  },\n  {\n    id: \"actions\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Email\" />\n    ),\n    cell: ({ row }) => (\n      <TicketTableRowActions row={row} tableSchema={ticketSchema} />\n    ),\n  },\n];\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\stores\checkout-store.ts</source>
<document_content>import { create } from \"zustand\";\nimport { devtools, persist } from \"zustand/middleware\";\nimport { StripeElementsOptions } from \"@stripe/stripe-js\";\n\ninterface CheckoutState {\n  clientSecret: string | null;\n  isLoading: boolean;\n  error: string | null;\n  repoId: string | null;\n  appearance: StripeElementsOptions[\"appearance\"];\n}\n\ninterface CheckoutActions {\n  setClientSecret: (secret: string) => void;\n  setIsLoading: (isLoading: boolean) => void;\n  setError: (error: string | null) => void;\n  setRepoId: (repoId: string) => void;\n  resetCheckout: () => void;\n  initializeCheckout: (repoId: string) => Promise<void>;\n  handlePurchase: (repoId: string) => Promise<boolean>;\n}\n\ntype CheckoutStore = CheckoutState & CheckoutActions;\n\nconst DEFAULT_APPEARANCE: StripeElementsOptions[\"appearance\"] = {\n  theme: \"stripe\",\n  variables: {\n    colorPrimary: \"#0F172A\",\n    colorBackground: \"#ffffff\",\n    colorText: \"#1e293b\",\n    colorDanger: \"#ef4444\",\n    fontFamily:\n      'ui-sans-serif, system-ui, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"',\n    spacingUnit: \"4px\",\n    borderRadius: \"8px\",\n  },\n  rules: {\n    \".Input\": {\n      border: \"1px solid #e2e8f0\",\n      boxShadow: \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n    },\n    \".Input:focus\": {\n      border: \"1px solid #0F172A\",\n      boxShadow: \"0 0 0 1px #0F172A\",\n    },\n    \".Label\": {\n      fontWeight: \"500\",\n    },\n    \".Error\": {\n      color: \"#ef4444\",\n    },\n  },\n};\n\nexport const useCheckoutStore = create<CheckoutStore>()(\n  devtools(\n    persist(\n      (set, get) => ({\n        clientSecret: null,\n        isLoading: false,\n        error: null,\n        repoId: null,\n        appearance: DEFAULT_APPEARANCE,\n        setClientSecret: (secret) => set({ clientSecret: secret }),\n        setIsLoading: (isLoading) => set({ isLoading }),\n        setError: (error) => set({ error }),\n        setRepoId: (repoId) => set({ repoId }),\n        resetCheckout: () =>\n          set({\n            clientSecret: null,\n            isLoading: false,\n            error: null,\n            repoId: null,\n          }),\n        initializeCheckout: async (repoId) => {\n          const { setIsLoading, setClientSecret, setError, setRepoId } = get();\n          setIsLoading(true);\n          setRepoId(repoId);\n          try {\n            const response = await fetch(\n              `${window.ENV.BACKEND_URL}/api/v1/checkout`,\n              {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ repoId }),\n                credentials: \"include\",\n              },\n            );\n            if (!response.ok) {\n              throw new Error(\"Failed to create payment intent\");\n            }\n            const { clientSecret } = await response.json();\n            setClientSecret(clientSecret);\n            setError(null);\n          } catch (error) {\n            setError(\n              error instanceof Error\n                ? error.message\n                : \"An unexpected error occurred\",\n            );\n          } finally {\n            setIsLoading(false);\n          }\n        },\n        handlePurchase: async (repoId) => {\n          const { setIsLoading, setClientSecret, setError, setRepoId } = get();\n          setIsLoading(true);\n          setRepoId(repoId);\n          try {\n            const response = await fetch(\n              `${window.ENV.BACKEND_URL}/api/v1/checkout`,\n              {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ repoId }),\n                credentials: \"include\",\n              },\n            );\n            if (!response.ok) {\n              throw new Error(\"Failed to create checkout\");\n            }\n            const { clientSecret } = await response.json();\n            setClientSecret(clientSecret);\n            setError(null);\n            return true;\n          } catch (error) {\n            setError(\n              error instanceof Error\n                ? error.message\n                : \"An unexpected error occurred\",\n            );\n            return false;\n          } finally {\n            setIsLoading(false);\n          }\n        },\n      }),\n      {\n        name: \"checkout-store\",\n        partialize: (state) => ({\n          repoId: state.repoId,\n          clientSecret: state.clientSecret,\n          appearance: state.appearance,\n        }),\n      },\n    ),\n  ),\n);\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\stores\monaco-store.ts</source>
<document_content>import { create, StateCreator } from \"zustand\";\nimport { persist, PersistOptions } from \"zustand/middleware\";\nimport {\n  DEFAULT_REACT_MONACO,\n  DEFAULT_CSS_MONACO,\n} from \"@/integrations/monaco/constants\";\n\nexport type EditorLanguage = \"javascript\" | \"typescript\" | \"css\";\nexport type EditorTheme = \"vs-dark\" | \"vs-light\" | \"hc-black\";\nexport type WordWrapSetting = \"on\" | \"off\" | \"wordWrapColumn\" | \"bounded\";\n\ninterface EditorOptions {\n  theme: EditorTheme;\n  fontSize: number;\n  language: EditorLanguage;\n  wordWrap: WordWrapSetting;\n  minimap: { enabled: boolean };\n  lineNumbers: \"on\" | \"off\" | \"relative\";\n}\n\nexport interface MonacoStoreType {\n  editorValue: string;\n  cssValue: string;\n  editorOptions: EditorOptions;\n  handleEditorChange: (value: string, language: EditorLanguage) => void;\n  setEditorOptions: (options: Partial<EditorOptions>) => void;\n  resetEditorContent: (language: EditorLanguage) => void;\n  toggleMinimap: () => void;\n  increaseFontSize: () => void;\n  decreaseFontSize: () => void;\n  setEditorValue: (value: string) => void;\n  setCssValue: (value: string) => void;\n}\n\nconst DEFAULT_EDITOR_OPTIONS: EditorOptions = {\n  theme: \"vs-dark\",\n  fontSize: 14,\n  language: \"typescript\",\n  wordWrap: \"on\",\n  minimap: { enabled: true },\n  lineNumbers: \"on\",\n};\n\ntype PersistedState = {\n  editorOptions: EditorOptions;\n};\n\ntype MonacoStoreCreator = StateCreator<\n  MonacoStoreType,\n  [],\n  [[\"zustand/persist\", PersistedState]]\n>;\n\nconst createMonacoStore: MonacoStoreCreator = (set) => ({\n  editorValue: \"\",\n  cssValue: \"\",\n  editorOptions: DEFAULT_EDITOR_OPTIONS,\n  handleEditorChange: (value: string, language: EditorLanguage) =>\n    set(() => {\n      if (language === \"css\") {\n        return { cssValue: value };\n      }\n      return { editorValue: value };\n    }),\n  setEditorOptions: (options: Partial<EditorOptions>) =>\n    set((state) => ({\n      editorOptions: { ...state.editorOptions, ...options },\n    })),\n  resetEditorContent: (language: EditorLanguage) =>\n    set(() => {\n      if (language === \"css\") {\n        return { cssValue: DEFAULT_CSS_MONACO };\n      }\n      return { editorValue: DEFAULT_REACT_MONACO };\n    }),\n  toggleMinimap: () =>\n    set((state) => ({\n      editorOptions: {\n        ...state.editorOptions,\n        minimap: { enabled: !state.editorOptions.minimap.enabled },\n      },\n    })),\n  increaseFontSize: () =>\n    set((state) => ({\n      editorOptions: {\n        ...state.editorOptions,\n        fontSize: state.editorOptions.fontSize + 1,\n      },\n    })),\n  decreaseFontSize: () =>\n    set((state) => ({\n      editorOptions: {\n        ...state.editorOptions,\n        fontSize: Math.max(8, state.editorOptions.fontSize - 1),\n      },\n    })),\n  setEditorValue: (value: string) => set({ editorValue: value }),\n  setCssValue: (value: string) => set({ cssValue: value }),\n});\n\nconst persistOptions: PersistOptions<MonacoStoreType, PersistedState> = {\n  name: \"monaco-store\",\n  partialize: (state) => ({\n    editorOptions: state.editorOptions,\n  }),\n};\n\nexport const useMonacoStore = create<MonacoStoreType>()(\n  persist(createMonacoStore, persistOptions),\n);\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\stores\review-store.ts</source>
<document_content>import { create } from \"zustand\";\nimport { devtools } from \"zustand/middleware\";\n\ninterface User {\n  id: string;\n  name?: string;\n  avatar?: string;\n}\n\ninterface Review extends BackendReview {\n  user?: User;\n  commentCount?: number;\n}\n\ninterface Comment extends BackendComment {\n  user?: User;\n}\n\ninterface Pagination {\n  total: number;\n  page: number;\n  perPage: number;\n  lastPage: number;\n}\n\ninterface ReviewsPagination {\n  data: Review[];\n  meta: Pagination;\n}\n\ninterface CommentsPagination {\n  data: Comment[];\n  meta: Pagination;\n}\n\nconst getApiBaseUrl = () => {\n  if (typeof window !== \"undefined\") {\n    return `${window?.ENV?.BACKEND_URL}/api/v1`;\n  }\n  // Provide a fallback or default URL for server-side rendering\n  return `${process.env.BACKEND_URL}/api/v1`;\n};\n\ninterface ReviewStore {\n  reviews: ReviewsPagination;\n  expandedReviews: string[];\n  comments: { [key: string]: CommentsPagination };\n  loadingReviews: boolean;\n  loadingComments: { [key: string]: boolean };\n  API_BASE_URL: string;\n\n  setReviews: (reviews: ReviewsPagination) => void;\n  toggleExpand: (reviewId: string) => void;\n  setComments: (reviewId: string, comments: CommentsPagination) => void;\n  setLoadingReviews: (loading: boolean) => void;\n  setLoadingComments: (reviewId: string, loading: boolean) => void;\n\n  fetchReviews: (repoId: string, page?: number) => Promise<void>;\n  fetchComments: (\n    repoId: string,\n    reviewId: string,\n    page?: number,\n  ) => Promise<void>;\n  loadMoreReviews: (repoId: string) => Promise<void>;\n  loadMoreComments: (repoId: string, reviewId: string) => Promise<void>;\n  handleVote: (\n    reviewId: string,\n    voteType: \"upvote\" | \"downvote\",\n  ) => Promise<void>;\n  handleCommentVote: (\n    repoId: string,\n    commentId: string,\n    voteType: \"upvote\" | \"downvote\",\n  ) => Promise<void>;\n  addReview: (\n    repoId: string,\n    newReviewData: Omit<\n      BackendReview,\n      | \"id\"\n      | \"userId\"\n      | \"repoId\"\n      | \"createdAt\"\n      | \"updatedAt\"\n      | \"deletedAt\"\n      | \"flag\"\n      | \"upvotes\"\n      | \"downvotes\"\n    >,\n  ) => Promise<void>;\n  addComment: (\n    repoId: string,\n    reviewId: string,\n    commentContent: string,\n  ) => Promise<void>;\n}\n\nconst useReviewStore = create<ReviewStore>()(\n  devtools((set, get) => ({\n    reviews: {\n      data: [],\n      meta: { total: 0, page: 1, perPage: 10, lastPage: 1 },\n    },\n    expandedReviews: [],\n    comments: {},\n    loadingReviews: false,\n    loadingComments: {},\n    API_BASE_URL: getApiBaseUrl(),\n\n    setReviews: (reviews) => set({ reviews }),\n    toggleExpand: (reviewId) =>\n      set((state) => ({\n        expandedReviews: state.expandedReviews.includes(reviewId)\n          ? state.expandedReviews.filter((id) => id !== reviewId)\n          : [...state.expandedReviews, reviewId],\n      })),\n    setComments: (reviewId, comments) =>\n      set((state) => ({\n        comments: {\n          ...state.comments,\n          [reviewId]: {\n            ...comments,\n            data:\n              comments.meta.page === 1\n                ? comments.data\n                : [...(state.comments[reviewId]?.data || []), ...comments.data],\n          },\n        },\n      })),\n    setLoadingReviews: (loading) => set({ loadingReviews: loading }),\n    setLoadingComments: (reviewId, loading) =>\n      set((state) => ({\n        loadingComments: { ...state.loadingComments, [reviewId]: loading },\n      })),\n\n    fetchReviews: async (repoId, page = 1) => {\n      get().setLoadingReviews(true);\n      try {\n        const response = await fetch(\n          `${get().API_BASE_URL}/repo/${repoId}/reviews?page=${page}&perPage=10`,\n          { credentials: \"include\" },\n        );\n        if (!response.ok) throw new Error(\"Failed to fetch reviews\");\n        const data: ReviewsPagination = await response.json();\n        set((state) => ({\n          reviews:\n            page === 1\n              ? data\n              : {\n                  ...data,\n                  data: [...state.reviews.data, ...data.data],\n                },\n        }));\n      } catch (error) {\n        console.error(\"Error fetching reviews:\", error);\n      } finally {\n        get().setLoadingReviews(false);\n      }\n    },\n\n    fetchComments: async (repoId, reviewId, page = 1) => {\n      get().setLoadingComments(reviewId, true);\n      try {\n        const response = await fetch(\n          `${get().API_BASE_URL}/repo/${repoId}/reviews/${reviewId}?page=${page}&perPage=10`,\n          { credentials: \"include\" },\n        );\n        if (!response.ok) throw new Error(\"Failed to fetch comments\");\n        const data: CommentsPagination = await response.json();\n        get().setComments(reviewId, data);\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      } finally {\n        get().setLoadingComments(reviewId, false);\n      }\n    },\n\n    loadMoreReviews: async (repoId) => {\n      const currentPage = get().reviews.meta.page;\n      const nextPage = currentPage + 1;\n      if (nextPage <= get().reviews.meta.lastPage) {\n        await get().fetchReviews(repoId, nextPage);\n      }\n    },\n\n    loadMoreComments: async (repoId, reviewId) => {\n      const currentPage = get().comments[reviewId]?.meta.page || 0;\n      const nextPage = currentPage + 1;\n      await get().fetchComments(repoId, reviewId, nextPage);\n    },\n\n    handleVote: async (reviewId, voteType) => {\n      try {\n        const response = await fetch(\n          `${get().API_BASE_URL}/reviews/${reviewId}/${voteType}`,\n          { method: \"POST\", credentials: \"include\" },\n        );\n        if (!response.ok) throw new Error(`Failed to ${voteType} review`);\n        // Refresh reviews after voting\n        await get().fetchReviews(get().reviews.data[0].repoId);\n      } catch (error) {\n        console.error(`Error ${voteType}ing review:`, error);\n      }\n    },\n\n    handleCommentVote: async (repoId, commentId, voteType) => {\n      try {\n        const response = await fetch(\n          `${get().API_BASE_URL}/comments/${commentId}/${voteType}`,\n          { method: \"POST\", credentials: \"include\" },\n        );\n        if (!response.ok) throw new Error(`Failed to ${voteType} comment`);\n        // Find the review that contains this comment and refresh its comments\n        const reviewId = Object.keys(get().comments).find((reviewId) =>\n          get().comments[reviewId].data.some(\n            (comment) => comment.id === commentId,\n          ),\n        );\n        if (reviewId) await get().fetchComments(repoId, reviewId);\n      } catch (error) {\n        console.error(`Error ${voteType}ing comment:`, error);\n      }\n    },\n\n    addReview: async (repoId, newReviewData) => {\n      try {\n        const response = await fetch(`${get().API_BASE_URL}/reviews`, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ ...newReviewData, repoId }),\n          credentials: \"include\",\n        });\n        if (!response.ok) throw new Error(\"Failed to add review\");\n        await get().fetchReviews(repoId);\n      } catch (error) {\n        console.error(\"Error adding review:\", error);\n      }\n    },\n\n    addComment: async (repoId, reviewId, commentContent) => {\n      try {\n        const response = await fetch(`${get().API_BASE_URL}/comments`, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ content: commentContent, reviewId }),\n          credentials: \"include\",\n        });\n        if (!response.ok) throw new Error(\"Failed to add comment\");\n        // Fetch only the first page of comments after adding a new one\n        await get().fetchComments(repoId, reviewId, 1);\n      } catch (error) {\n        console.error(\"Error adding comment:\", error);\n      }\n    },\n  })),\n);\n\nexport default useReviewStore;\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\stores\search-store.ts</source>
<document_content>import { create } from \"zustand\";\nimport { devtools, persist } from \"zustand/middleware\";\nimport { immer } from \"zustand/middleware/immer\";\n\nexport type SearchResultType = {\n  id: string;\n  name: string;\n  description: string;\n  language: string;\n  tags: string[];\n  price: number;\n  // visibility: BackendVisibility;\n};\n\nexport type RepoNoSource = Omit<BackendCodeRepo, \"sourceJs\" | \"sourceCss\">;\n\ntype SearchStoreType = {\n  results: RepoNoSource[];\n  totalResults: number;\n  currentPage: number;\n  isLoading: boolean;\n  hasMore: boolean;\n  searchCriteria: {\n    query: string;\n    tags: string[];\n    language: string;\n  };\n  setResults: (results: RepoNoSource[]) => void;\n  appendResults: (newResults: RepoNoSource[]) => void;\n  setTotalResults: (total: number) => void;\n  setCurrentPage: (page: number) => void;\n  setIsLoading: (isLoading: boolean) => void;\n  setHasMore: (hasMore: boolean) => void;\n  setSearchCriteria: (\n    criteria: Partial<SearchStoreType[\"searchCriteria\"]>,\n  ) => void;\n  resetSearch: () => void;\n};\n\nexport const useSearchStore = create<SearchStoreType>()(\n  devtools(\n    persist(\n      immer((set) => ({\n        results: [],\n        totalResults: 0,\n        currentPage: 1,\n        isLoading: false,\n        hasMore: true,\n        searchCriteria: {\n          query: \"\",\n          tags: [],\n          language: \"\",\n        },\n        setResults: (results) => set({ results }),\n        appendResults: (newResults) =>\n          set((state) => {\n            state.results.push(...newResults);\n          }),\n        setTotalResults: (total) => set({ totalResults: total }),\n        setCurrentPage: (page) => set({ currentPage: page }),\n        setIsLoading: (isLoading) => set({ isLoading }),\n        setHasMore: (hasMore) => set({ hasMore }),\n        setSearchCriteria: (criteria) =>\n          set((state) => {\n            state.searchCriteria = { ...state.searchCriteria, ...criteria };\n          }),\n        resetSearch: () =>\n          set({\n            results: [],\n            totalResults: 0,\n            currentPage: 1,\n            hasMore: true,\n            searchCriteria: {\n              query: \"\",\n              tags: [],\n              language: \"\",\n            },\n          }),\n      })),\n      {\n        name: \"search-store\",\n        partialize: (state) => ({\n          searchCriteria: state.searchCriteria,\n        }),\n      },\n    ),\n  ),\n);\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\stores\user-store.ts</source>
<document_content>import { showErrorToast } from \"@/lib/handle-error\";\nimport { create } from \"zustand\";\nimport { persist, devtools } from \"zustand/middleware\";\nimport { toast } from \"sonner\";\n\n// Define the types based on the expected JSON response\ntype Role = \"ADMIN\" | \"MODERATOR\" | \"SELLER\" | \"USER\";\n\ninterface MeUser {\n  id: string;\n  email: string;\n  emailVerified: boolean;\n  createdAt: string;\n  updatedAt: string;\n  deletedAt: string | null;\n  bannedUntil: string | null;\n  role: Role;\n}\n\ninterface MeProfile {\n  id: string;\n  profileImg: string | null;\n  name: string | null;\n  phoneNumber: string | null;\n  userId: string;\n}\n\nexport interface Me {\n  user: MeUser;\n  profile: MeProfile;\n  sellerProfile: BackendSellerProfile;\n}\n\ninterface UserStoreState {\n  user: Me | null;\n  isLoading: boolean;\n  isLoggedIn: boolean;\n  setUser: (user: Me | null) => void;\n  setLoading: (isLoading: boolean) => void;\n  checkLoginStatus: () => Promise<boolean>;\n}\n\nexport const useUserStore = create<UserStoreState>()(\n  devtools(\n    persist(\n      (set, get) => ({\n        user: null,\n        isLoading: false,\n        isLoggedIn: false,\n        setUser: (user) => set({ user, isLoggedIn: !!user }),\n        setLoading: (isLoading) => set({ isLoading }),\n        checkLoginStatus: async () => {\n          const { setLoading, setUser } = get();\n          setLoading(true);\n          try {\n            const response = await fetch(\n              `${window.ENV.BACKEND_URL}/api/v1/me`,\n              {\n                credentials: \"include\",\n              },\n            );\n            if (response.ok) {\n              if (response.status === 204) {\n                toast(\"Session expired, please login again\", {\n                  action: {\n                    label: \"Login\",\n                    onClick: () => {\n                      window.location.href = \"/login\";\n                    },\n                  },\n                });\n                setUser(null);\n                return false;\n              }\n              const userData: Me = await response.json();\n              setUser(userData);\n              return true;\n            } else {\n              setUser(null);\n              return false;\n            }\n          } catch (error) {\n            showErrorToast(error);\n            console.error(\"Error checking login status:\", error);\n            setUser(null);\n            return false;\n          } finally {\n            setLoading(false);\n          }\n        },\n      }),\n      {\n        name: \"user-store\",\n        partialize: (state) => ({\n          user: state.user,\n          isLoggedIn: state.isLoggedIn,\n        }),\n      },\n    ),\n  ),\n);\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\components\repo\card-repo-seller.tsx</source>
<document_content>import React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Link, useNavigate } from \"@remix-run/react\";\nimport { transform } from \"sucrase\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} from \"@/components/ui/card\";\nimport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { toast } from \"sonner\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface Repo {\n  id: string;\n  userId: string;\n  sourceJs: string;\n  sourceCss: string;\n  createdAt: string;\n  updatedAt: string;\n  deletedAt: string | null;\n  visibility: \"public\" | \"private\";\n  status: \"pending\" | \"active\" | \"rejected\";\n  name: string;\n  description: string;\n  language: \"JSX\" | \"TSX\";\n  price: number;\n}\n\ninterface RepoCardProps {\n  repo: Repo;\n  onDelete?: (id: string) => void;\n}\n\ninterface IframeRendererProps {\n  sourceJs: string;\n  sourceCss: string;\n  language: \"JSX\" | \"TSX\";\n  name: string;\n  className?: string;\n  fullscreen?: boolean;\n}\n\nconst removeImports = (code: string): string => {\n  return code.replace(\n    /import\s+(?:(?:React|ReactDOM)(?:,|\s*{[^}]*})?|{[^}]*}|[\w\s,{}]*)\s+from\s+['\"](?:react|react-dom)['\"];?/g,\n    \"\",\n  );\n};\n\nconst extractComponentName = (code: string): [string, boolean, string] => {\n  const renderRegex = /render\(\s*<(\w+)(?:\s+\/|\s*>|\s[^>]*>)/;\n  const renderMatch = code.match(renderRegex);\n\n  if (renderMatch) {\n    const componentName = renderMatch[1];\n    const codeWithoutRender = code.replace(/render\([^)]+\);?/, \"\");\n    return [componentName, true, codeWithoutRender];\n  }\n\n  return [\"\", false, code];\n};\n\nconst transformCode = (code: string) => {\n  return transform(code, {\n    transforms: [\"jsx\", \"typescript\"],\n    production: true,\n  }).code;\n};\n\nconst IframeRenderer: React.FC<IframeRendererProps> = React.memo(\n  ({ sourceJs, sourceCss, language, name, className, fullscreen = false }) => {\n    const [iframeSrcDoc, setIframeSrcDoc] = useState<string | null>(null);\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n    const [key, setKey] = useState(0); // Key for forcing re-render\n\n    useEffect(() => {\n      const processCode = async () => {\n        setIsProcessing(true);\n        try {\n          // Your existing code processing logic here\n          const codeWithoutImports = removeImports(sourceJs);\n          const [extractedName, hasRender, codeWithoutRender] =\n            extractComponentName(codeWithoutImports);\n          const finalComponentName = extractedName || name;\n\n          if (!hasRender) {\n            setError(\n              \"Warning: No render method found. Unable to display component preview.\",\n            );\n            setIframeSrcDoc(null);\n            return;\n          }\n\n          const transformedCode = await transformCode(codeWithoutRender);\n\n          const newSrcDoc = `\n            <html>\n              <head>\n                <style>${sourceCss}</style>\n                <script src=\"https://cdn.tailwindcss.com\"></script>\n                <script src=\"https://unpkg.com/react@18/umd/react.production.min.js\"></script>\n                <script src=\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\"></script>\n                ${language === \"TSX\" ? '<script src=\"https://unpkg.com/typescript@latest/lib/typescriptServices.js\"></script>' : \"\"}\n              </head>\n              <body>\n                <div id=\"root\"></div>\n                <script>\n                  ${transformedCode}\n                  (function() {\n                    const Component = ${finalComponentName};\n                    if (typeof Component === 'function' || (typeof Component === 'object' && Component !== null && typeof Component.$$typeof === 'symbol')) {\n                      const domNode = document.getElementById('root');\n                      const root = ReactDOM.createRoot(domNode);\n                      root.render(React.createElement(Component));\n                    } else {\n                      document.getElementById('root').innerHTML = 'Component not found or not a valid React component';\n                    }\n                  })();\n                </script>\n              </body>\n            </html>\n          `;\n\n          setIframeSrcDoc(newSrcDoc);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error processing code:\", error);\n          setError(error);\n          setIframeSrcDoc(null);\n        } finally {\n          setIsProcessing(false);\n          setKey((prevKey) => prevKey + 1); // Force re-render\n        }\n      };\n\n      processCode();\n    }, [sourceJs, sourceCss, language, name]);\n\n    const containerClass = cn(\n      \"relative border rounded overflow-hidden\",\n      fullscreen ? \"w-full h-full\" : \"w-full h-48\",\n      className,\n    );\n\n    return (\n      <div className={containerClass}>\n        <AnimatePresence mode=\"wait\">\n          {isProcessing && (\n            <motion.div\n              key=\"loading\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"absolute inset-0 flex items-center justify-center bg-muted/40 z-10\"\n            >\n              <p>Processing component...</p>\n            </motion.div>\n          )}\n          {error && (\n            <motion.div\n              key=\"error\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"absolute inset-0 flex items-center justify-center bg-red-100 text-red-800 z-10\"\n            >\n              <p>{error}</p>\n            </motion.div>\n          )}\n          {iframeSrcDoc && !isProcessing && !error && (\n            <motion.iframe\n              key={`iframe-${key}`}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.2 }}\n              srcDoc={iframeSrcDoc}\n              className=\"w-full h-full\"\n              title={name}\n              sandbox=\"allow-scripts\"\n            />\n          )}\n        </AnimatePresence>\n      </div>\n    );\n  },\n);\n\nIframeRenderer.displayName = \"IframeRenderer\";\n\nconst RepoCard: React.FC<RepoCardProps> = React.memo(({ repo, onDelete }) => {\n  const [isDeleteAlertOpen, setIsDeleteAlertOpen] = useState<boolean>(false);\n  const [isFullscreenOpen, setIsFullscreenOpen] = useState<boolean>(false);\n  const navigate = useNavigate();\n\n  const handleDelete = useCallback(async () => {\n    try {\n      const response = await fetch(`/api/v1/repo/${repo.id}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to delete repository\");\n      }\n\n      toast.success(\"Repository deleted successfully\");\n      onDelete?.(repo.id);\n      setIsDeleteAlertOpen(false);\n      navigate(\"/app/seller/repos\");\n    } catch (error) {\n      console.error(\"Error deleting repo:\", error);\n      toast.error(\"Failed to delete repository\");\n    }\n  }, [repo.id, onDelete, navigate]);\n\n  return (\n    <Card className=\"w-full h-full\">\n      <CardHeader className=\"w-full flex-stretch\">\n        <div className=\"flex flex-col items-start justify-between gap-4\">\n          <div className=\"space-y-1\">\n            <CardTitle>{repo.name}</CardTitle>\n            <CardDescription\n              className={\n                repo.description ? \"line-clamp-1\" : \"line-clamp-1 opacity-0\"\n              }\n            >\n              {repo.description ?? \"no desc\"}\n            </CardDescription>\n          </div>\n          <div className=\"flex flex-wrap gap-2\">\n            <Badge variant=\"secondary\">{repo.language}</Badge>\n            <Badge variant=\"outline\">${repo.price}</Badge>\n            <Badge\n              variant={repo.visibility === \"public\" ? \"default\" : \"secondary\"}\n            >\n              {repo.visibility}\n            </Badge>\n            <Badge\n              variant={\n                repo.status === \"active\"\n                  ? \"success\"\n                  : repo.status === \"pending\"\n                    ? \"warning\"\n                    : \"destructive\"\n              }\n            >\n              {repo.status === \"active\" ? \"Published\" : \"Not Published\"}\n            </Badge>\n          </div>\n          <div className=\"flex-grow h-full w-full\">\n            <IframeRenderer\n              sourceJs={repo.sourceJs}\n              sourceCss={repo.sourceCss}\n              language={repo.language}\n              name={repo.name}\n              className=\"h-48\"\n            />\n          </div>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button className=\"w-full\">Actions</Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onSelect={() => setIsFullscreenOpen(true)}>\n                View Fullscreen\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link to={`/app/seller/repos/${repo.id}/edit`}>Edit Repo</Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem onSelect={() => setIsDeleteAlertOpen(true)}>\n                Delete Repo\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </CardHeader>\n\n      <AlertDialog open={isDeleteAlertOpen} onOpenChange={setIsDeleteAlertOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>\n              Are you sure you want to delete this repo?\n            </AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete your\n              repository and remove all associated data from our servers.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <Dialog open={isFullscreenOpen} onOpenChange={setIsFullscreenOpen}>\n        <DialogContent className=\"max-w-full h-full m-0 p-0\">\n          <DialogHeader className=\"absolute top-0 left-0 right-0 bg-background/80 backdrop-blur-sm p-4 z-10\">\n            <div className=\"flex justify-between items-center\">\n              <DialogTitle>{repo.name} - Fullscreen Preview</DialogTitle>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setIsFullscreenOpen(false)}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </DialogHeader>\n          <div className=\"h-full pt-16\">\n            <IframeRenderer\n              sourceJs={repo.sourceJs}\n              sourceCss={repo.sourceCss}\n              language={repo.language}\n              name={repo.name}\n              fullscreen\n            />\n          </div>\n        </DialogContent>\n      </Dialog>\n    </Card>\n  );\n});\n\nRepoCard.displayName = \"RepoCard\";\n\nexport { RepoCard, IframeRenderer };\nexport default RepoCard;\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\components\repo\card-repo-user.tsx</source>
<document_content>import React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Link, useNavigate } from \"@remix-run/react\";\nimport { transform } from \"sucrase\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} from \"@/components/ui/card\";\nimport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { toast } from \"sonner\";\nimport { X, Download } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface Repo {\n  id: string;\n  userId: string;\n  sourceJs: string;\n  sourceCss: string;\n  createdAt: string;\n  updatedAt: string;\n  deletedAt: string | null;\n  visibility: \"public\" | \"private\";\n  status: \"pending\" | \"active\" | \"rejected\";\n  name: string;\n  description: string;\n  language: \"JSX\" | \"TSX\";\n  price: number;\n}\n\ninterface RepoCardProps {\n  repo: Repo;\n}\n\ninterface IframeRendererProps {\n  sourceJs: string;\n  sourceCss: string;\n  language: \"JSX\" | \"TSX\";\n  name: string;\n  className?: string;\n  fullscreen?: boolean;\n}\n\nconst removeImports = (code: string): string => {\n  return code.replace(\n    /import\s+(?:(?:React|ReactDOM)(?:,|\s*{[^}]*})?|{[^}]*}|[\w\s,{}]*)\s+from\s+['\"](?:react|react-dom)['\"];?/g,\n    \"\",\n  );\n};\n\nconst extractComponentName = (code: string): [string, boolean, string] => {\n  const renderRegex = /render\(\s*<(\w+)(?:\s+\/|\s*>|\s[^>]*>)/;\n  const renderMatch = code.match(renderRegex);\n\n  if (renderMatch) {\n    const componentName = renderMatch[1];\n    const codeWithoutRender = code.replace(/render\([^)]+\);?/, \"\");\n    return [componentName, true, codeWithoutRender];\n  }\n\n  return [\"\", false, code];\n};\n\nconst transformCode = (code: string) => {\n  return transform(code, {\n    transforms: [\"jsx\", \"typescript\"],\n    production: true,\n  }).code;\n};\n\nconst IframeRenderer: React.FC<IframeRendererProps> = React.memo(\n  ({ sourceJs, sourceCss, language, name, className, fullscreen = false }) => {\n    const [iframeSrcDoc, setIframeSrcDoc] = useState<string | null>(null);\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n    const [key, setKey] = useState(0); // Key for forcing re-render\n\n    useEffect(() => {\n      const processCode = async () => {\n        setIsProcessing(true);\n        try {\n          const codeWithoutImports = removeImports(sourceJs);\n          const [extractedName, hasRender, codeWithoutRender] =\n            extractComponentName(codeWithoutImports);\n          const finalComponentName = extractedName || name;\n\n          if (!hasRender) {\n            setError(\n              \"Warning: No render method found. Unable to display component preview.\",\n            );\n            setIframeSrcDoc(null);\n            return;\n          }\n\n          const transformedCode = await transformCode(codeWithoutRender);\n\n          const newSrcDoc = `\n            <html>\n              <head>\n                <style>${sourceCss}</style>\n                <script src=\"https://cdn.tailwindcss.com\"></script>\n                <script src=\"https://unpkg.com/react@18/umd/react.production.min.js\"></script>\n                <script src=\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\"></script>\n                ${language === \"TSX\" ? '<script src=\"https://unpkg.com/typescript@latest/lib/typescriptServices.js\"></script>' : \"\"}\n              </head>\n              <body>\n                <div id=\"root\"></div>\n                <script>\n                  ${transformedCode}\n                  (function() {\n                    const Component = ${finalComponentName};\n                    if (typeof Component === 'function' || (typeof Component === 'object' && Component !== null && typeof Component.$$typeof === 'symbol')) {\n                      const domNode = document.getElementById('root');\n                      const root = ReactDOM.createRoot(domNode);\n                      root.render(React.createElement(Component));\n                    } else {\n                      document.getElementById('root').innerHTML = 'Component not found or not a valid React component';\n                    }\n                  })();\n                </script>\n              </body>\n            </html>\n          `;\n\n          setIframeSrcDoc(newSrcDoc);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error processing code:\", error);\n          setError(error);\n          setIframeSrcDoc(null);\n        } finally {\n          setIsProcessing(false);\n          setKey((prevKey) => prevKey + 1); // Force re-render\n        }\n      };\n\n      processCode();\n    }, [sourceJs, sourceCss, language, name]);\n\n    const containerClass = cn(\n      \"relative border rounded overflow-hidden\",\n      fullscreen ? \"w-full h-full\" : \"w-full h-48\",\n      className,\n    );\n\n    return (\n      <div className={containerClass}>\n        <AnimatePresence mode=\"wait\">\n          {isProcessing && (\n            <motion.div\n              key=\"loading\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"absolute inset-0 flex items-center justify-center bg-muted/40 z-10\"\n            >\n              <p>Processing component...</p>\n            </motion.div>\n          )}\n          {error && (\n            <motion.div\n              key=\"error\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"absolute inset-0 flex items-center justify-center bg-red-100 text-red-800 z-10\"\n            >\n              <p>{error}</p>\n            </motion.div>\n          )}\n          {iframeSrcDoc && !isProcessing && !error && (\n            <motion.iframe\n              key={`iframe-${key}`}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.2 }}\n              srcDoc={iframeSrcDoc}\n              className=\"w-full h-full\"\n              title={name}\n              sandbox=\"allow-scripts\"\n            />\n          )}\n        </AnimatePresence>\n      </div>\n    );\n  },\n);\n\nIframeRenderer.displayName = \"IframeRenderer\";\n\nconst RepoCard: React.FC<RepoCardProps> = React.memo(({ repo }) => {\n  const [isFullscreenOpen, setIsFullscreenOpen] = useState<boolean>(false);\n  const navigate = useNavigate();\n\n  const handleDownload = useCallback((content: string, fileName: string) => {\n    const blob = new Blob([content], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }, []);\n\n  const handleDownloadSourceCode = useCallback(() => {\n    handleDownload(repo.sourceJs, `${repo.name}.js`);\n    handleDownload(repo.sourceCss, `${repo.name}.css`);\n    toast.success(\"Source code downloaded successfully\");\n  }, [repo, handleDownload]);\n\n  return (\n    <Card className=\"w-full h-full\">\n      <CardHeader className=\"w-full flex-stretch\">\n        <div className=\"flex flex-col items-start justify-between gap-4\">\n          <div className=\"space-y-1\">\n            <CardTitle>{repo.name}</CardTitle>\n            <CardDescription\n              className={\n                repo.description ? \"line-clamp-1\" : \"line-clamp-1 opacity-0\"\n              }\n            >\n              {repo.description ?? \"no desc\"}\n            </CardDescription>\n          </div>\n          <div className=\"flex flex-wrap gap-2\">\n            <Badge variant=\"secondary\">{repo.language}</Badge>\n            <Badge variant=\"outline\">${repo.price}</Badge>\n          </div>\n          <div className=\"flex-grow h-full w-full\">\n            <IframeRenderer\n              sourceJs={repo.sourceJs}\n              sourceCss={repo.sourceCss}\n              language={repo.language}\n              name={repo.name}\n              className=\"h-48\"\n            />\n          </div>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button className=\"w-full\">Actions</Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onSelect={() => setIsFullscreenOpen(true)}>\n                View Fullscreen\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link to={`/app/user/purchases/${repo.id}/edit`}>\n                  Edit Repo\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem onSelect={handleDownloadSourceCode}>\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download Source Code\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </CardHeader>\n\n      <Dialog open={isFullscreenOpen} onOpenChange={setIsFullscreenOpen}>\n        <DialogContent className=\"max-w-full h-full m-0 p-0\">\n          <DialogHeader className=\"absolute top-0 left-0 right-0 bg-background/80 backdrop-blur-sm p-4 z-10\">\n            <div className=\"flex justify-between items-center\">\n              <DialogTitle>{repo.name} - Fullscreen Preview</DialogTitle>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setIsFullscreenOpen(false)}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </DialogHeader>\n          <div className=\"h-full pt-16\">\n            <IframeRenderer\n              sourceJs={repo.sourceJs}\n              sourceCss={repo.sourceCss}\n              language={repo.language}\n              name={repo.name}\n              fullscreen\n            />\n          </div>\n        </DialogContent>\n      </Dialog>\n    </Card>\n  );\n});\n\nRepoCard.displayName = \"RepoCard\";\n\nexport { RepoCard, IframeRenderer };\nexport default RepoCard;\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\components\repo\card.tsx</source>
<document_content>// src/components/repo/card.tsx\nimport React, { forwardRef } from \"react\";\nimport { Link } from \"@remix-run/react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Spinner } from \"@/components/custom/spinner\";\nimport type { RepoNoSource } from \"@/stores/search-store\";\n\ninterface RepoCardProps {\n  repo: RepoNoSource;\n}\n\nexport const RepoCard = forwardRef<HTMLDivElement, RepoCardProps>(\n  ({ repo }, ref) => {\n    const [loading, setLoading] = React.useState(true);\n    const appUrl = window.ENV.APP_URL;\n\n    const handleLoad = () => {\n      setLoading(false);\n    };\n\n    const handleError = () => {\n      setLoading(false);\n    };\n\n    return (\n      <Link\n        to={`/r/${repo.id}`}\n        className=\"block\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Card\n          ref={ref}\n          className=\"bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow relative\"\n        >\n          <div className=\"dark:bg-gray-900 min-h-64 relative\">\n            {loading && (\n              <div className=\"absolute inset-0 flex items-center justify-center bg-white dark:bg-gray-800\">\n                <Spinner />\n              </div>\n            )}\n            <iframe\n              src={`${appUrl}/preview/repo/${repo.id}`}\n              title={repo.name}\n              width=\"100%\"\n              className=\"w-full h-64 object-cover\"\n              loading=\"lazy\"\n              onLoad={handleLoad}\n              onError={handleError}\n            />\n          </div>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2\">\n                {repo.name}\n              </h3>\n            </div>\n            <p className=\"text-gray-600 dark:text-gray-400 line-clamp-2\">\n              {repo.description}\n            </p>\n          </CardContent>\n        </Card>\n      </Link>\n    );\n  },\n);\n\nRepoCard.displayName = \"RepoCard\";\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\components\repo\code-analysis.tsx</source>
<document_content>import React from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} from \"@/components/ui/card\";\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionTrigger,\n  AccordionContent,\n} from \"@/components/ui/accordion\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  ShieldIcon,\n  WrenchIcon,\n  BookOpenIcon,\n  ChevronDownIcon,\n  Code2,\n  Star,\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport type PublicCodeCheckResult = {\n  securityScore: number;\n  maintainabilityScore: number;\n  readabilityScore: number;\n  overallDescription: string;\n  eslintErrorCount: number;\n  eslintFatalErrorCount: number;\n};\n\nexport type PrivateCodeCheckResult = PublicCodeCheckResult & {\n  securitySuggestion: string;\n  maintainabilitySuggestion: string;\n  readabilitySuggestion: string;\n};\n\ntype CodeAnalysisProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  codeCheckResult: PublicCodeCheckResult | PrivateCodeCheckResult;\n  repoName: string;\n  repoLanguage: string;\n  isPublicView: boolean;\n};\n\nconst CodeAnalysis: React.FC<CodeAnalysisProps> = ({\n  isOpen,\n  onClose,\n  codeCheckResult,\n  repoName,\n  repoLanguage,\n  isPublicView,\n}) => {\n  const {\n    securityScore,\n    maintainabilityScore,\n    readabilityScore,\n    overallDescription,\n    eslintErrorCount,\n    eslintFatalErrorCount,\n  } = codeCheckResult;\n\n  const overallScore = Math.round(\n    (securityScore + maintainabilityScore + readabilityScore) / 3,\n  );\n\n  const renderSuggestions = () => {\n    if (isPublicView) return null;\n\n    const privateResult = codeCheckResult as PrivateCodeCheckResult;\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Suggestions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Accordion type=\"single\" collapsible>\n            <AccordionItem value=\"security\">\n              <AccordionTrigger>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"bg-accent rounded-full p-2\">\n                      <ShieldIcon className=\"w-5 h-5 text-accent-foreground\" />\n                    </div>\n                    <span>Security</span>\n                  </div>\n                  <ChevronDownIcon className=\"w-5 h-5 text-muted-foreground\" />\n                </div>\n              </AccordionTrigger>\n              <AccordionContent>\n                <div className=\"grid gap-4\">\n                  {privateResult.securitySuggestion\n                    .split(\". \")\n                    .map((suggestion, index) => (\n                      <div key={index} className=\"flex items-center gap-3\">\n                        <Checkbox />\n                        <span>{suggestion}</span>\n                      </div>\n                    ))}\n                </div>\n              </AccordionContent>\n            </AccordionItem>\n            <AccordionItem value=\"maintainability\">\n              <AccordionTrigger>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"bg-primary rounded-full p-2\">\n                      <WrenchIcon className=\"w-5 h-5 text-primary-foreground\" />\n                    </div>\n                    <span>Maintainability</span>\n                  </div>\n                  <ChevronDownIcon className=\"w-5 h-5 text-muted-foreground\" />\n                </div>\n              </AccordionTrigger>\n              <AccordionContent>\n                <div className=\"grid gap-4\">\n                  {privateResult.maintainabilitySuggestion\n                    .split(\". \")\n                    .map((suggestion, index) => (\n                      <div key={index} className=\"flex items-center gap-3\">\n                        <Checkbox />\n                        <span>{suggestion}</span>\n                      </div>\n                    ))}\n                </div>\n              </AccordionContent>\n            </AccordionItem>\n            <AccordionItem value=\"readability\">\n              <AccordionTrigger>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"bg-secondary rounded-full p-2\">\n                      <BookOpenIcon className=\"w-5 h-5 text-secondary-foreground\" />\n                    </div>\n                    <span>Readability</span>\n                  </div>\n                  <ChevronDownIcon className=\"w-5 h-5 text-muted-foreground\" />\n                </div>\n              </AccordionTrigger>\n              <AccordionContent>\n                <div className=\"grid gap-4\">\n                  {privateResult.readabilitySuggestion\n                    .split(\". \")\n                    .map((suggestion, index) => (\n                      <div key={index} className=\"flex items-center gap-3\">\n                        <Checkbox />\n                        <span>{suggestion}</span>\n                      </div>\n                    ))}\n                </div>\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh]\">\n        <DialogHeader>\n          <DialogTitle>Code Analysis Results</DialogTitle>\n        </DialogHeader>\n        <ScrollArea className=\"h-[80vh] pr-4\">\n          <div className=\"flex flex-col bg-muted/40 p-4 rounded-lg\">\n            <Card className=\"w-full shadow-lg mb-6\">\n              <CardHeader className=\"pb-2\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Code2 className=\"h-6 w-6 text-primary\" />\n                    <CardTitle className=\"text-2xl font-bold\">\n                      {repoName}\n                    </CardTitle>\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-sm px-3 py-1\">\n                    {repoLanguage}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pb-2\">\n                <div className=\"flex items-center justify-center bg-primary/10 rounded-lg p-4\">\n                  <Star className=\"h-10 w-10 text-primary mr-2\" />\n                  <span className=\"text-5xl font-bold text-primary\">\n                    {overallScore}/10\n                  </span>\n                </div>\n                <p className=\"mt-4 text-center text-sm text-muted-foreground\">\n                  Overall Code Quality Score\n                </p>\n              </CardContent>\n            </Card>\n            <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6 mb-8\">\n              <Card>\n                <CardHeader className=\"flex items-center gap-4\">\n                  <div className=\"bg-accent rounded-full p-2\">\n                    <ShieldIcon className=\"w-6 h-6 text-accent-foreground\" />\n                  </div>\n                  <div>\n                    <CardTitle>Security</CardTitle>\n                    <CardDescription>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-4xl font-bold\">\n                          {securityScore}\n                        </span>\n                        <span className=\"text-muted-foreground\">/ 10</span>\n                      </div>\n                    </CardDescription>\n                  </div>\n                </CardHeader>\n              </Card>\n              <Card>\n                <CardHeader className=\"flex items-center gap-4\">\n                  <div className=\"bg-primary rounded-full p-2\">\n                    <WrenchIcon className=\"w-6 h-6 text-primary-foreground\" />\n                  </div>\n                  <div>\n                    <CardTitle>Maintainability</CardTitle>\n                    <CardDescription>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-4xl font-bold\">\n                          {maintainabilityScore}\n                        </span>\n                        <span className=\"text-muted-foreground\">/ 10</span>\n                      </div>\n                    </CardDescription>\n                  </div>\n                </CardHeader>\n              </Card>\n              <Card>\n                <CardHeader className=\"flex items-center gap-4\">\n                  <div className=\"bg-secondary rounded-full p-2\">\n                    <BookOpenIcon className=\"w-6 h-6 text-secondary-foreground\" />\n                  </div>\n                  <div>\n                    <CardTitle>Readability</CardTitle>\n                    <CardDescription>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-4xl font-bold\">\n                          {readabilityScore}\n                        </span>\n                        <span className=\"text-muted-foreground\">/ 10</span>\n                      </div>\n                    </CardDescription>\n                  </div>\n                </CardHeader>\n              </Card>\n            </div>\n            {renderSuggestions()}\n            <Card>\n              <CardHeader>\n                <CardTitle>Code Quality Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p>{overallDescription}</p>\n                <div className=\"mt-4 grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"font-semibold\">ESLint Errors:</p>\n                    <p>{eslintErrorCount}</p>\n                  </div>\n                  <div>\n                    <p className=\"font-semibold\">ESLint Fatal Errors:</p>\n                    <p>{eslintFatalErrorCount}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default CodeAnalysis;\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\components\repo\code-check-progress.tsx</source>
<document_content>import React from \"react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Progress } from \"@/components/ui/progress\";\n\ntype CodeCheckProgressDialogProps = {\n  isOpen: boolean;\n  isChecking: boolean;\n  checkProgress: number;\n  onConfirm: () => void;\n  onCancel: () => void;\n};\n\nexport const CodeCheckProgressDialog: React.FC<\n  CodeCheckProgressDialogProps\n> = ({ isOpen, isChecking, checkProgress, onConfirm, onCancel }) => {\n  return (\n    <AlertDialog open={isOpen}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Submit Code Check</AlertDialogTitle>\n          <AlertDialogDescription>\n            Are you sure you want to submit a code check for this repository?\n            This action will analyze your code and may take a few moments to\n            complete.\n          </AlertDialogDescription>\n          {isChecking && (\n            <Progress value={checkProgress} className=\"w-full mt-4\" />\n          )}\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel onClick={onCancel} disabled={isChecking}>\n            {isChecking ? \"Cancel Check\" : \"Cancel\"}\n          </AlertDialogCancel>\n          <AlertDialogAction onClick={onConfirm} disabled={isChecking}>\n            Submit Check\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n};\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\components\repo\constants.ts</source>
<document_content>import { z } from \"zod\";\n\nexport const NewRepoSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  description: z.string().optional(),\n  language: z.string().min(1, \"Language is required\"),\n  tags: z.array(z.string()).optional(),\n  price: z.coerce.number().nonnegative().optional(),\n  visibility: z.enum([\"public\", \"private\"]),\n  iframeSrc: z.string().url(\"Invalid URL\").optional(),\n});\n\nexport type NewRepoSchemaType = z.infer<typeof NewRepoSchema>;\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\components\repo\editor-menubar.tsx</source>
<document_content>import { useMonacoStore } from \"@/stores/monaco-store\";\nimport {\n  Menubar,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarSeparator,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n} from \"@/components/ui/menubar\";\n\nexport function EditorMenubar() {\n  const {\n    editorOptions,\n    setEditorOptions,\n    toggleMinimap,\n    increaseFontSize,\n    decreaseFontSize,\n  } = useMonacoStore();\n\n  return (\n    <Menubar>\n      <MenubarMenu>\n        <MenubarTrigger>Editor Options</MenubarTrigger>\n        <MenubarContent>\n          <MenubarSub>\n            <MenubarSubTrigger>Themes</MenubarSubTrigger>\n            <MenubarSubContent>\n              <MenubarItem\n                onClick={() => setEditorOptions({ theme: \"vs-dark\" })}\n              >\n                Dark Theme\n              </MenubarItem>\n              <MenubarItem\n                onClick={() => setEditorOptions({ theme: \"vs-light\" })}\n              >\n                Light Theme\n              </MenubarItem>\n              <MenubarItem\n                onClick={() => setEditorOptions({ theme: \"hc-black\" })}\n              >\n                High Contrast Black\n              </MenubarItem>\n            </MenubarSubContent>\n          </MenubarSub>\n          <MenubarSeparator />\n          <MenubarSub>\n            <MenubarSubTrigger>Font Size</MenubarSubTrigger>\n            <MenubarSubContent>\n              <MenubarItem onClick={increaseFontSize}>\n                Increase Font Size\n              </MenubarItem>\n              <MenubarItem onClick={decreaseFontSize}>\n                Decrease Font Size\n              </MenubarItem>\n            </MenubarSubContent>\n          </MenubarSub>\n          <MenubarSeparator />\n          <MenubarItem onClick={() => setEditorOptions({ wordWrap: \"on\" })}>\n            Enable Word Wrap\n          </MenubarItem>\n          <MenubarItem onClick={() => setEditorOptions({ wordWrap: \"off\" })}>\n            Disable Word Wrap\n          </MenubarItem>\n          <MenubarSeparator />\n          <MenubarSub>\n            <MenubarSubTrigger>Language</MenubarSubTrigger>\n            <MenubarSubContent>\n              <MenubarItem\n                onClick={() => setEditorOptions({ language: \"typescript\" })}\n              >\n                TSX\n              </MenubarItem>\n              <MenubarItem\n                onClick={() => setEditorOptions({ language: \"javascript\" })}\n              >\n                JSX\n              </MenubarItem>\n            </MenubarSubContent>\n          </MenubarSub>\n          <MenubarSeparator />\n          <MenubarItem onClick={toggleMinimap}>\n            {editorOptions.minimap.enabled ? \"Disable\" : \"Enable\"} Minimap\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarMenu>\n    </Menubar>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\components\repo\editor-preview.tsx</source>
<document_content>import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport lodash from \"lodash\";\nimport { transform } from \"sucrase\";\n\ninterface IframeRendererProps {\n  sourceJs: string;\n  sourceCss: string;\n  language: \"JSX\" | \"TSX\";\n  name: string;\n  className?: string;\n  fullscreen?: boolean;\n}\n\nconst IframeRenderer: React.FC<IframeRendererProps> = ({\n  sourceJs,\n  sourceCss,\n  language,\n  name,\n  className,\n  fullscreen = false,\n}) => {\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n  const [debug, setDebug] = useState<string>(\"\");\n  const [error, setError] = useState<string | null>(null);\n  const [key, setKey] = useState(0);\n\n  const logDebug = useCallback((message: string) => {\n    console.log(message);\n    setDebug((prev) => prev + \"\n\" + message);\n  }, []);\n\n  const transformCode = useCallback(\n    (code: string, lang: \"JSX\" | \"TSX\") => {\n      try {\n        const result = transform(code, {\n          transforms: [\"jsx\", \"typescript\"],\n          production: true,\n        });\n        setError(null);\n        return result.code;\n      } catch (error) {\n        const errorMessage =\n          error instanceof Error ? error.message : String(error);\n        logDebug(\"Error transforming code: \" + errorMessage);\n        setError(errorMessage);\n        return null;\n      }\n    },\n    [logDebug],\n  );\n\n  const updateIframeContent = useCallback(\n    (iframeWindow: Window, transformedCode: string, extractedName: string) => {\n      const injectedCode = `\n      ${transformedCode}\n      window.CustomComponent = ${extractedName};\n    `;\n      iframeWindow.postMessage(\n        { type: \"UPDATE_CODE\", code: injectedCode },\n        \"*\",\n      );\n    },\n    [],\n  );\n\n  const debouncedUpdateIframe = useCallback(\n    lodash.debounce(\n      (\n        iframeWindow: Window,\n        transformedCode: string,\n        extractedName: string,\n      ) => {\n        updateIframeContent(iframeWindow, transformedCode, extractedName);\n      },\n      300,\n    ),\n    [updateIframeContent],\n  );\n\n  useEffect(() => {\n    const cleanedCode = removeImports(sourceJs);\n    const [extractedName, hasRender, codeWithoutRender] =\n      extractComponentName(cleanedCode);\n\n    const transformedCode = transformCode(codeWithoutRender, language);\n    if (!transformedCode) {\n      logDebug(\"Failed to transform source code\");\n      return;\n    }\n\n    const handleMessage = (event: MessageEvent) => {\n      if (event.data && event.data.type === \"IFRAME_LOG\") {\n        logDebug(\"Iframe message: \" + event.data.message);\n      } else if (event.data && event.data.type === \"IFRAME_READY\") {\n        const iframeWindow = iframeRef.current?.contentWindow;\n        if (iframeWindow) {\n          updateIframeContent(iframeWindow, transformedCode, extractedName);\n        }\n      }\n    };\n\n    window.addEventListener(\"message\", handleMessage);\n\n    if (iframeRef.current?.contentWindow) {\n      debouncedUpdateIframe(\n        iframeRef.current.contentWindow,\n        transformedCode,\n        extractedName,\n      );\n    }\n\n    return () => {\n      window.removeEventListener(\"message\", handleMessage);\n    };\n  }, [sourceJs, language, logDebug, transformCode, debouncedUpdateIframe]);\n\n  useEffect(() => {\n    setKey((prevKey) => prevKey + 1);\n  }, [sourceJs, sourceCss]);\n\n  useEffect(() => {\n    if (iframeRef.current) {\n      const iframeContent = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <style>${sourceCss}</style>\n            <script src=\"https://cdn.tailwindcss.com\"></script>\n            <script src=\"https://unpkg.com/react@17/umd/react.development.js\"></script>\n            <script src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\"></script>\n            <script>\n              function log(message) {\n                console.log(message);\n                window.parent.postMessage({ type: 'IFRAME_LOG', message: message }, '*');\n              }\n\n              window.addEventListener('message', function(event) {\n                if (event.data && event.data.type === 'UPDATE_CODE') {\n                  try {\n                    eval(event.data.code);\n                    if (typeof window.CustomComponent !== 'undefined') {\n                      ReactDOM.render(React.createElement(window.CustomComponent), document.getElementById('root'));\n                      log('Custom component rendered');\n                    } else {\n                      log('Custom component not found after evaluation');\n                    }\n                  } catch (error) {\n                    log('Error rendering custom component: ' + error.message);\n                  }\n                }\n              });\n\n              window.parent.postMessage({ type: 'IFRAME_READY' }, '*');\n            </script>\n          </head>\n          <body class=\"h-full\">\n            <div id=\"root\"></div>\n          </body>\n        </html>\n      `;\n      iframeRef.current.srcdoc = iframeContent;\n      logDebug(\"Iframe content initialized\");\n    }\n  }, [sourceCss, logDebug, key]);\n\n  const containerClass = cn(\n    \"relative border rounded overflow-hidden\",\n    fullscreen ? \"w-full h-full\" : \"w-full h-48\",\n    className,\n  );\n\n  return (\n    <div className={containerClass}>\n      {error ? (\n        <div className=\"w-full h-full flex flex-col items-center justify-center bg-red-100 text-red-800 p-4\">\n          <div>\n            <h3 className=\"font-bold mb-2\">Transformation Error:</h3>\n            <pre className=\"text-sm whitespace-pre-wrap\">{error}</pre>\n          </div>\n        </div>\n      ) : (\n        <iframe\n          key={key}\n          ref={iframeRef}\n          className=\"w-full h-full\"\n          title={name}\n          sandbox=\"allow-scripts allow-popups allow-same-origin\"\n        />\n      )}\n      <pre className=\"mt-4 p-2 bg-gray-100 text-xs whitespace-pre-wrap\">\n        {debug}\n      </pre>\n    </div>\n  );\n};\n\nfunction removeImports(code: string): string {\n  return code.replace(/^import\s+.*?;?\s*$/gm, \"\");\n}\n\nconst extractComponentName = (code: string): [string, boolean, string] => {\n  const renderRegex = /render\(\s*<(\w+)(?:\s+\/|\s*>|\s[^>]*>)/;\n  const renderMatch = code.match(renderRegex);\n\n  if (renderMatch) {\n    const componentName = renderMatch[1];\n    const codeWithoutRender = code.replace(/render\([^)]+\);?/, \"\");\n    return [componentName, true, codeWithoutRender];\n  }\n\n  return [\"\", false, code];\n};\n\nexport default IframeRenderer;\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\components\repo\loading.tsx</source>
<document_content>import { Spinner } from \"../custom/spinner\";\n\nexport function MonacoLoading() {\n  return (\n    <div className=\"flex items-center justify-center w-full h-full\">\n      <Spinner />\n    </div>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\components\repo\new-repo-form.tsx</source>
<document_content>import { Label } from \"@/components/ui/label\";\nimport { Spinner } from \"@/components/custom/spinner\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { NewRepoSchema, NewRepoSchemaType } from \"./constants\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectContent,\n  SelectItem,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { useState } from \"react\";\nimport { toast } from \"sonner\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X } from \"lucide-react\";\n\ninterface RepoFormProps {\n  defaultValues?: Partial<NewRepoSchemaType>;\n}\n\nexport function RepoForm({ defaultValues }: RepoFormProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [tags, setTags] = useState<string[]>(defaultValues?.tags || []);\n  const [tagInput, setTagInput] = useState(\"\");\n\n  const form = useForm<NewRepoSchemaType>({\n    resolver: zodResolver(NewRepoSchema),\n    defaultValues: {\n      name: defaultValues?.name || \"\",\n      description: defaultValues?.description || \"\",\n      language: defaultValues?.language || \"\",\n      tags: defaultValues?.tags || [],\n      price: defaultValues?.price || 0,\n      visibility: defaultValues?.visibility || \"public\",\n    },\n  });\n\n  const onSubmit = async (data: NewRepoSchemaType) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`${window.ENV.BACKEND_URL}/api/v1/repo`, {\n        credentials: \"include\",\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ ...data, tags }),\n      });\n      const res = await response.json();\n      if (!response.ok) {\n        throw new Error(res.message);\n      }\n      toast(\"Project created successfully.\");\n      window.location.reload();\n    } catch (error) {\n      console.error(error);\n      toast(`An error occurred. ${(error as Error).message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleTagInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTagInput(e.target.value);\n  };\n\n  const handleTagInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\" || e.key === \",\") {\n      e.preventDefault();\n      if (tagInput.trim() && !tags.includes(tagInput.trim())) {\n        setTags([...tags, tagInput.trim()]);\n      }\n      setTagInput(\"\");\n    }\n  };\n\n  const removeTag = (tag: string) => {\n    setTags(tags.filter((t) => t !== tag));\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Name</FormLabel>\n              <FormControl>\n                <Input {...field} placeholder=\"Enter project name\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description</FormLabel>\n              <FormControl>\n                <Textarea {...field} placeholder=\"Enter project description\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"language\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Language</FormLabel>\n              <FormControl>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select language\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"JSX\">JSX</SelectItem>\n                    <SelectItem value=\"TSX\">TSX</SelectItem>\n                  </SelectContent>\n                </Select>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"tags\"\n          render={() => (\n            <FormItem>\n              <FormLabel>Tags</FormLabel>\n              <FormControl>\n                <Input\n                  value={tagInput}\n                  onChange={handleTagInputChange}\n                  onKeyDown={handleTagInputKeyDown}\n                  placeholder=\"Enter tags and press comma\"\n                />\n              </FormControl>\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {tags.map((tag, index) => (\n                  <Badge key={index} className=\"flex items-center gap-1\">\n                    {tag}\n                    <X\n                      size={16}\n                      className=\"cursor-pointer\"\n                      onClick={() => removeTag(tag)}\n                    />\n                  </Badge>\n                ))}\n              </div>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"price\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Price</FormLabel>\n              <FormControl>\n                <Input\n                  {...field}\n                  type=\"number\"\n                  onChange={(e) => {\n                    if (e.target.value === \"\") e.target.value = \"0\";\n                    else if (e.target.value.startsWith(\"0\"))\n                      e.target.value = e.target.value.slice(1);\n                    // if it is 0, set it to 0\n                    field.onChange(parseInt(e.target.value));\n                  }}\n                  placeholder=\"Enter project price\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"visibility\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Visibility</FormLabel>\n              <FormControl>\n                <RadioGroup onValueChange={field.onChange} value={field.value}>\n                  <div className=\"flex items-center gap-2\">\n                    <RadioGroupItem value=\"public\" id=\"visibility-public\" />\n                    <Label htmlFor=\"visibility-public\" className=\"font-normal\">\n                      Public\n                    </Label>\n                    <RadioGroupItem value=\"private\" id=\"visibility-private\" />\n                    <Label htmlFor=\"visibility-private\" className=\"font-normal\">\n                      Private\n                    </Label>\n                  </div>\n                </RadioGroup>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n          {isLoading ? <Spinner /> : \"Create Project\"}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\components\repo\review.tsx</source>
<document_content>import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Star, ThumbsUp, ThumbsDown, MessageCircle } from \"lucide-react\";\nimport useReviewStore from \"@/stores/review-store\";\n\ninterface User {\n  id: string;\n  name?: string;\n  avatar?: string;\n}\n\ninterface Review {\n  id: string;\n  content: string;\n  userId: string;\n  user?: User;\n  rating: number;\n  createdAt: string;\n  updatedAt: string;\n  upvotes: number;\n  downvotes: number;\n  commentCount: number;\n  repoId: string;\n}\n\ninterface Comment {\n  id: string;\n  content: string;\n  userId: string;\n  user?: User;\n  createdAt: string;\n  updatedAt: string;\n  upvotes: number;\n  downvotes: number;\n}\n\ninterface ApiIntegratedReviewComponentProps {\n  repoId: string;\n}\n\nexport default function ReviewComponent({\n  repoId,\n}: ApiIntegratedReviewComponentProps) {\n  const {\n    reviews,\n    expandedReviews,\n    comments,\n    loadingReviews,\n    loadingComments,\n    fetchReviews,\n    toggleExpand,\n    fetchComments,\n    loadMoreReviews,\n    loadMoreComments,\n    handleVote,\n    handleCommentVote,\n    addReview,\n    addComment,\n  } = useReviewStore();\n\n  const [lastReviewRef, setLastReviewRef] = useState<HTMLDivElement | null>(\n    null,\n  );\n\n  useEffect(() => {\n    if (repoId) {\n      fetchReviews(repoId);\n    }\n  }, [repoId, fetchReviews]);\n\n  const handleExpandToggle = async (reviewId: string) => {\n    toggleExpand(reviewId);\n    if (!expandedReviews.includes(reviewId) && !comments[reviewId]) {\n      await fetchComments(repoId, reviewId);\n    }\n  };\n\n  const handleAddComment = async (reviewId: string, content: string) => {\n    await addComment(repoId, reviewId, content);\n    // After adding a comment, we don't need to do anything else\n    // The store will fetch the first page of comments automatically\n  };\n\n  const observer = useRef<IntersectionObserver | null>(null);\n  const lastReviewCallback = useCallback(\n    (node: HTMLDivElement) => {\n      if (loadingReviews) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver((entries) => {\n        if (\n          entries[0].isIntersecting &&\n          reviews.meta.page < reviews.meta.lastPage\n        ) {\n          loadMoreReviews(repoId);\n        }\n      });\n      if (node) observer.current.observe(node);\n      setLastReviewRef(node);\n    },\n    [\n      loadingReviews,\n      reviews.meta.page,\n      reviews.meta.lastPage,\n      loadMoreReviews,\n      repoId,\n    ],\n  );\n\n  return (\n    <div className=\"mx-auto max-w-2xl px-4 py-6 sm:px-6 lg:px-8\">\n      <AddReviewForm\n        onSubmit={(newReviewData) => addReview(repoId, newReviewData)}\n      />\n      <Separator className=\"my-8\" />\n      <div className=\"grid gap-8\">\n        {reviews.data.map((review, index) => (\n          <React.Fragment key={review.id}>\n            <div\n              className=\"grid gap-4\"\n              ref={\n                index === reviews.data.length - 1 ? lastReviewCallback : null\n              }\n            >\n              <div className=\"flex items-start gap-4\">\n                <Avatar className=\"w-10 h-10 border\">\n                  <AvatarImage\n                    src={review.user?.avatar || \"/placeholder-user.jpg\"}\n                    alt={review.user?.name}\n                  />\n                  <AvatarFallback>\n                    {review.user?.name\n                      ?.split(\" \")\n                      .map((n) => n[0])\n                      .join(\"\") || \"U\"}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"grid gap-2 flex-1\">\n                  <div className=\"flex items-center gap-2\">\n                    <h3 className=\"text-lg font-semibold\">\n                      {review.content.split(\" \").slice(0, 5).join(\" \")}...\n                    </h3>\n                    <div className=\"flex items-center gap-0.5\">\n                      {[...Array(5)].map((_, i) => (\n                        <Star\n                          key={i}\n                          className={`w-5 h-5 ${i < review.rating ? \"fill-primary text-primary\" : \"fill-muted text-muted-foreground\"}`}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    <p>\n                      {expandedReviews.includes(review.id)\n                        ? review.content\n                        : `${review.content.slice(0, 150)}...`}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                    <div>- {review.user?.name || \"Anonymous\"}</div>\n                    <div>·</div>\n                    <time>\n                      {new Date(review.createdAt).toLocaleDateString()}\n                    </time>\n                    <div className=\"flex items-center gap-2\">\n                      <VoteButton\n                        icon={ThumbsUp}\n                        count={review.upvotes}\n                        onClick={() => handleVote(review.id, \"upvote\")}\n                      />\n                      <VoteButton\n                        icon={ThumbsDown}\n                        count={review.downvotes}\n                        onClick={() => handleVote(review.id, \"downvote\")}\n                      />\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleExpandToggle(review.id)}\n                        className=\"flex items-center gap-1\"\n                      >\n                        <MessageCircle className=\"w-4 h-4\" />\n                        {review.commentCount || 0}{\" \"}\n                        {review.commentCount === 1 ? \"Comment\" : \"Comments\"}\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleExpandToggle(review.id)}\n                      >\n                        {expandedReviews.includes(review.id)\n                          ? \"Read Less\"\n                          : \"Read More\"}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {expandedReviews.includes(review.id) && (\n                <div className=\"ml-14\">\n                  {loadingComments[review.id] ? (\n                    <p>Loading comments...</p>\n                  ) : (\n                    <>\n                      {comments[review.id]?.data.map((comment) => (\n                        <CommentComponent\n                          key={comment.id}\n                          comment={comment}\n                          onVote={(commentId, voteType) =>\n                            handleCommentVote(repoId, commentId, voteType)\n                          }\n                        />\n                      ))}\n                      {comments[review.id] &&\n                        comments[review.id].meta.page <\n                          comments[review.id].meta.lastPage && (\n                          <Button\n                            onClick={() => loadMoreComments(repoId, review.id)}\n                            disabled={loadingComments[review.id]}\n                          >\n                            {loadingComments[review.id]\n                              ? \"Loading...\"\n                              : \"Load More Comments\"}\n                          </Button>\n                        )}\n                      <AddCommentForm\n                        onSubmit={(content) =>\n                          handleAddComment(review.id, content)\n                        }\n                      />\n                    </>\n                  )}\n                </div>\n              )}\n            </div>\n            <Separator />\n          </React.Fragment>\n        ))}\n      </div>\n      {loadingReviews && <p>Loading more reviews...</p>}\n    </div>\n  );\n}\n\ninterface VoteButtonProps {\n  icon: React.FC<React.ComponentProps<\"svg\">>;\n  count: number;\n  onClick: () => void;\n}\n\nconst VoteButton: React.FC<VoteButtonProps> = ({\n  icon: Icon,\n  count,\n  onClick,\n}) => (\n  <div className=\"flex items-center gap-2\">\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      className=\"w-4 h-4 hover:bg-transparent text-stone-400 hover:text-stone-900\"\n      onClick={onClick}\n    >\n      <Icon className=\"w-4 h-4\" />\n      <span className=\"sr-only\">Vote</span>\n    </Button>\n    <div className=\"text-sm text-muted-foreground\">{count}</div>\n  </div>\n);\n\ninterface CommentComponentProps {\n  comment: Comment;\n  onVote: (commentId: string, voteType: \"upvote\" | \"downvote\") => void;\n}\n\nconst CommentComponent: React.FC<CommentComponentProps> = ({\n  comment,\n  onVote,\n}) => (\n  <div className=\"flex items-start gap-4 mt-4\">\n    <Avatar className=\"w-8 h-8 border\">\n      <AvatarImage\n        src={comment.user?.avatar || \"/placeholder-user.jpg\"}\n        alt={comment.user?.name}\n      />\n      <AvatarFallback>\n        {comment.user?.name\n          ?.split(\" \")\n          .map((n: string) => n[0])\n          .join(\"\") || \"U\"}\n      </AvatarFallback>\n    </Avatar>\n    <div className=\"grid gap-2\">\n      <div className=\"flex items-center gap-2\">\n        <h4 className=\"text-sm font-medium\">\n          {comment.user?.name || \"Anonymous\"}\n        </h4>\n        <div className=\"flex items-center gap-2\">\n          <VoteButton\n            icon={ThumbsUp}\n            count={comment.upvotes}\n            onClick={() => onVote(comment.id, \"upvote\")}\n          />\n          <VoteButton\n            icon={ThumbsDown}\n            count={comment.downvotes}\n            onClick={() => onVote(comment.id, \"downvote\")}\n          />\n        </div>\n      </div>\n      <div className=\"text-sm text-muted-foreground\">\n        <p>{comment.content}</p>\n      </div>\n      <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n        <time>{new Date(comment.createdAt).toLocaleDateString()}</time>\n      </div>\n    </div>\n  </div>\n);\n\ninterface AddCommentFormProps {\n  onSubmit: (content: string) => void;\n}\n\nconst AddCommentForm: React.FC<AddCommentFormProps> = ({ onSubmit }) => {\n  const [comment, setComment] = useState(\"\");\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(comment);\n    setComment(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"grid gap-2 mt-4\">\n      <Textarea\n        placeholder=\"Add a comment...\"\n        value={comment}\n        onChange={(e) => setComment(e.target.value)}\n        className=\"rounded-md border border-muted px-4 py-2 text-sm\"\n      />\n      <div className=\"flex justify-end\">\n        <Button type=\"submit\" size=\"sm\">\n          Post Comment\n        </Button>\n      </div>\n    </form>\n  );\n};\n\ninterface AddReviewFormProps {\n  onSubmit: (\n    review: Omit<\n      Review,\n      | \"id\"\n      | \"userId\"\n      | \"createdAt\"\n      | \"updatedAt\"\n      | \"upvotes\"\n      | \"downvotes\"\n      | \"commentCount\"\n      | \"repoId\"\n    >,\n  ) => void;\n}\n\nconst AddReviewForm: React.FC<AddReviewFormProps> = ({ onSubmit }) => {\n  const [content, setContent] = useState(\"\");\n  const [rating, setRating] = useState(0);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit({ content, rating });\n    setContent(\"\");\n    setRating(0);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"grid gap-4\">\n      <h2 className=\"text-xl font-semibold\">Add Your Review</h2>\n      <Textarea\n        placeholder=\"Write your review...\"\n        value={content}\n        onChange={(e) => setContent(e.target.value)}\n        className=\"rounded-md border border-muted px-4 py-2 text-sm\"\n      />\n      <div className=\"flex items-center gap-2\">\n        <span className=\"text-sm font-medium\">Rating:</span>\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Button\n            key={star}\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setRating(star)}\n            className={star <= rating ? \"text-yellow-400\" : \"text-gray-300\"}\n          >\n            <Star className=\"w-5 h-5\" />\n          </Button>\n        ))}\n      </div>\n      <div className=\"flex justify-end\">\n        <Button type=\"submit\" size=\"sm\">\n          Post Review\n        </Button>\n      </div>\n    </form>\n  );\n};\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\components\repo\search-filter.tsx</source>
<document_content>import React, { useState, useCallback } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command.client\";\nimport { Check, ChevronsUpDown, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { z } from \"zod\";\nimport { showErrorToast } from \"@/lib/handle-error\";\n\nconst MAX_TAGS = 5;\n\nexport const SearchFilterSchema = z.object({\n  searchQuery: z.string().optional(),\n  tags: z\n    .array(z.string())\n    .max(MAX_TAGS, `You can only add up to ${MAX_TAGS} tags`),\n  language: z.string().optional(),\n});\n\nexport type SearchFilterSchemaType = z.infer<typeof SearchFilterSchema>;\n\ninterface SearchResult {\n  id: string;\n  name: string;\n  description: string;\n  tags: string[];\n  language: string;\n  visibility: string;\n}\n\ninterface SearchAndFilterProps {\n  onSearch: (results: SearchResult[]) => void;\n}\n\nconst LANGUAGES = [\n  { value: \"javascript\", label: \"JavaScript\" },\n  { value: \"typescript\", label: \"TypeScript\" },\n  { value: \"python\", label: \"Python\" },\n  { value: \"java\", label: \"Java\" },\n  { value: \"csharp\", label: \"C#\" },\n];\n\nexport default function SearchAndFilter({ onSearch }: SearchAndFilterProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);\n\n  const form = useForm<SearchFilterSchemaType>({\n    resolver: zodResolver(SearchFilterSchema),\n    defaultValues: {\n      searchQuery: \"\",\n      tags: [],\n      language: \"\",\n    },\n  });\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    watch,\n    reset,\n  } = form;\n  const watchedTags = watch(\"tags\");\n\n  const addTag = useCallback(\n    (tag: string) => {\n      if (\n        tag.trim() &&\n        !watchedTags.includes(tag.trim()) &&\n        watchedTags.length < MAX_TAGS\n      ) {\n        setValue(\"tags\", [...watchedTags, tag.trim()]);\n      }\n    },\n    [watchedTags, setValue],\n  );\n\n  const removeTag = useCallback(\n    (tagToRemove: string) => {\n      setValue(\n        \"tags\",\n        watchedTags.filter((tag) => tag !== tagToRemove),\n      );\n    },\n    [watchedTags, setValue],\n  );\n\n  const handleSearch = async (data: SearchFilterSchemaType) => {\n    setIsLoading(true);\n    try {\n      const queryParams = new URLSearchParams({\n        ...(data.searchQuery && { q: data.searchQuery }),\n        ...(data.tags.length && { tags: data.tags.join(\",\") }),\n        ...(data.language && { language: data.language }),\n      }).toString();\n\n      const response = await fetch(\n        `${window.ENV.BACKEND_URL}/api/v1/repos/search?${queryParams}`,\n        { method: \"GET\" },\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch search results\");\n      }\n\n      const results: SearchResult[] = await response.json();\n      setSearchResults(results);\n      onSearch(results);\n    } catch (error) {\n      showErrorToast(error);\n      setSearchResults([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const clearForm = () => {\n    reset();\n    setSearchResults([]);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={handleSubmit(handleSearch)} className=\"space-y-4\">\n        <FormField\n          control={control}\n          name=\"searchQuery\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Search</FormLabel>\n              <FormControl>\n                <Input {...field} placeholder=\"Search...\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <Controller\n          name=\"tags\"\n          control={control}\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Tags</FormLabel>\n              <FormControl>\n                <div>\n                  <Input\n                    placeholder=\"Enter tags and press Enter\"\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\" || e.key === \",\") {\n                        e.preventDefault();\n                        addTag((e.target as HTMLInputElement).value);\n                        (e.target as HTMLInputElement).value = \"\";\n                      }\n                    }}\n                  />\n                  <div className=\"flex flex-wrap gap-2 mt-2\">\n                    {field.value.map((tag, index) => (\n                      <Badge key={index} className=\"flex items-center gap-1\">\n                        {tag}\n                        <X\n                          size={14}\n                          className=\"cursor-pointer\"\n                          onClick={() => removeTag(tag)}\n                        />\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              </FormControl>\n              <FormMessage>{errors.tags?.message}</FormMessage>\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={control}\n          name=\"language\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Language</FormLabel>\n              <FormControl>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      role=\"combobox\"\n                      aria-expanded={open}\n                      className=\"w-full justify-between\"\n                    >\n                      {field.value\n                        ? LANGUAGES.find(\n                            (language) => language.value === field.value,\n                          )?.label\n                        : \"Select language\"}\n                      <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-full p-0\">\n                    <Command>\n                      <CommandInput placeholder=\"Search language...\" />\n                      <CommandList>\n                        <CommandEmpty>No language found.</CommandEmpty>\n                        <CommandGroup>\n                          {LANGUAGES.map((language) => (\n                            <CommandItem\n                              key={language.value}\n                              onSelect={() => {\n                                setValue(\"language\", language.value);\n                              }}\n                            >\n                              <Check\n                                className={cn(\n                                  \"mr-2 h-4 w-4\",\n                                  field.value === language.value\n                                    ? \"opacity-100\"\n                                    : \"opacity-0\",\n                                )}\n                              />\n                              {language.label}\n                            </CommandItem>\n                          ))}\n                        </CommandGroup>\n                      </CommandList>\n                    </Command>\n                  </PopoverContent>\n                </Popover>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex gap-2\">\n          <Button type=\"submit\" className=\"flex-1\" disabled={isLoading}>\n            {isLoading ? \"Searching...\" : \"Search\"}\n          </Button>\n          <Button type=\"button\" variant=\"outline\" onClick={clearForm}>\n            Clear\n          </Button>\n        </div>\n      </form>\n\n      {searchResults.length > 0 && (\n        <div className=\"mt-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Search Results</h2>\n          {searchResults.map((result) => (\n            <div key={result.id} className=\"border p-4 rounded-md mb-4\">\n              <h3 className=\"text-lg font-semibold\">{result.name}</h3>\n              <p className=\"text-sm text-gray-600\">{result.description}</p>\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {result.tags.map((tag, index) => (\n                  <Badge key={index} variant=\"secondary\">\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n              <p className=\"text-sm mt-2\">Language: {result.language}</p>\n              <p className=\"text-sm\">Visibility: {result.visibility}</p>\n            </div>\n          ))}\n        </div>\n      )}\n    </Form>\n  );\n}\n</document_content>
</document>
<document>
<source>C:\Users\aaron\OneDrive - Asia Pacific University\deg sem 3\FYP\project\frontend\app\components\checkout\payment-form.tsx</source>
<document_content>import { showErrorToast } from \"@/lib/handle-error\";\nimport { useNavigate } from \"@remix-run/react\";\nimport {\n  useStripe,\n  useElements,\n  PaymentElement,\n} from \"@stripe/react-stripe-js\";\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { toast } from \"sonner\";\n\nconst CheckoutForm = () => {\n  const navigate = useNavigate();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [requiresRecovery, setRequiresRecovery] = useState(false);\n  const [recoveryPaymentIntentId, setRecoveryPaymentIntentId] = useState<\n    string | null\n  >(null);\n\n  useEffect(() => {\n    if (stripe && elements) {\n      console.log(\"Stripe and elements are ready\");\n    }\n  }, [stripe, elements]);\n\n  const processPaymentOnServer = async (\n    paymentIntentId: string,\n  ): Promise<{ success: boolean; orderId?: string }> => {\n    try {\n      if (!window.ENV || !window.ENV.BACKEND_URL) {\n        throw new Error(\"Backend URL is not configured\");\n      }\n\n      const response = await fetch(\n        `${window.ENV.BACKEND_URL}/api/v1/checkout/process-payment`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ paymentIntentId }),\n          credentials: \"include\",\n        },\n      );\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.message || \"Failed to process payment on server\",\n        );\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error processing payment on server:\", error);\n      throw error;\n    }\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      toast.error(\"Stripe is not loaded yet.\");\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const result = await stripe.confirmPayment({\n        elements,\n        confirmParams: {},\n        redirect: \"if_required\",\n      });\n\n      console.log(\"Payment confirmation result:\", result);\n\n      if (result.error) {\n        throw new Error(result.error.message);\n      }\n\n      if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n        try {\n          const processResult = await processPaymentOnServer(\n            result.paymentIntent.id,\n          );\n\n          if (processResult.success) {\n            toast.success(\"Payment Successful\", {\n              description: \"Your payment has been processed successfully.\",\n            });\n            navigate(\"/checkout/success\", {\n              replace: true,\n              state: { orderId: processResult.orderId },\n            });\n          } else {\n            throw new Error(\"Failed to process payment on the server.\");\n          }\n        } catch (serverError) {\n          console.error(\"Server processing failed:\", serverError);\n          setRequiresRecovery(true);\n          setRecoveryPaymentIntentId(result.paymentIntent.id);\n          toast.error(\n            \"Payment recorded but order processing failed. Please try recovery or contact support.\",\n            {\n              duration: 10000,\n            },\n          );\n        }\n      } else {\n        throw new Error(\"Payment was not successful.\");\n      }\n    } catch (error) {\n      showErrorToast(error);\n      console.error(\"Payment error:\", error);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleRecovery = async () => {\n    if (!recoveryPaymentIntentId) {\n      toast.error(\"No payment to recover.\");\n      return;\n    }\n\n    setIsProcessing(true);\n    try {\n      const processResult = await processPaymentOnServer(\n        recoveryPaymentIntentId,\n      );\n\n      if (processResult.success) {\n        toast.success(\"Recovery Successful\", {\n          description: \"Your order has been successfully processed.\",\n        });\n        navigate(\"/checkout/success\", {\n          replace: true,\n          state: { orderId: processResult.orderId },\n        });\n      } else {\n        throw new Error(\"Failed to recover the order.\");\n      }\n    } catch (error) {\n      showErrorToast(error);\n      console.error(\"Recovery error:\", error);\n      toast.error(\"Recovery failed. Please contact customer support.\", {\n        duration: 10000,\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <PaymentElement />\n      {!requiresRecovery ? (\n        <Button\n          type=\"submit\"\n          disabled={!stripe || isProcessing}\n          className=\"w-full mt-4\"\n        >\n          {isProcessing ? \"Processing...\" : \"Pay Now\"}\n        </Button>\n      ) : (\n        <div className=\"mt-4\">\n          <p className=\"text-red-500 mb-2\">\n            Payment recorded but order processing failed. Please try recovery or\n            contact support.\n          </p>\n          <Button\n            onClick={handleRecovery}\n            disabled={isProcessing}\n            className=\"w-full\"\n          >\n            {isProcessing ? \"Recovering...\" : \"Attempt Recovery\"}\n          </Button>\n        </div>\n      )}\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n</document_content>
</document>
